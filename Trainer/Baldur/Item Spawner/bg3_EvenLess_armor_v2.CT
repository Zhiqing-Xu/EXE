<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Even Less"</Description>
      <Options moHideChildren="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Do the following steps BEFORE activating any of these cheats."</Description>
          <Options moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
          <Color>0000FF</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>3</ID>
              <Description>"1) Load Zanzer's " bg3.CT " and merge."</Description>
              <Color>00FFFF</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>4</ID>
              <Description>"2) Enable " Console Commands "."</Description>
              <Color>00FFFF</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>5</ID>
              <Description>"3) Enable " Register Commands "."</Description>
              <Color>00FFFF</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Armour"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>

            <CheatEntry>
              <ID>7</ID>
              <Description>"Amulet"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>8</ID>
                  <Description>"WYR_MonkAmulet_Amulet_AfterCombat"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
WYR_MonkAmulet_Amulet_AfterCombat

Item Description:

]]
local items = {
  "7eaa1331-877c-40d7-9811-8238aee09f68"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>9</ID>
                  <Description>"WYR_MonkAmulet_Amulet_NoGhost"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
WYR_MonkAmulet_Amulet_NoGhost

Item Description:

]]
local items = {
  "14a6da9a-6689-4c70-96a1-d03319ba3278"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>10</ID>
                  <Description>"Abbot Crest"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
CRE_Crest_Abbot

Item Description:

]]
local items = {
  "bf385fcc-8a09-4c98-b899-c9dafb1d830d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>11</ID>
                  <Description>"Aberration Hunters' Amulet"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
CRE_MAG_Githborn_Amulet

Item Description:
Many a githyanki hunter has worn this amulet before you. The strange stones set in swirling silver reverberate with echoes of their magic.
]]
local items = {
  "1310524f-408e-405d-8d75-7a6d3cb18bcc"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>12</ID>
                  <Description>"Absolute Confidence Amulet"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_TheOptimist_Amulet

Item Description:

]]
local items = {
  "b4f88dd8-0a5b-4641-937e-a882bebc26b1"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>13</ID>
                  <Description>"Absolute's Talisman"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
GOB_Priest_Amulet

Item Description:
Stained by blood_ and gifted to only the most faithful of True Souls to help preserve their lives.
]]
local items = {
  "95b04c9c-8b58-44c5-bf1f-7d4d1027d57e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>14</ID>
                  <Description>"Amulet of Bhaal"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
QUEST_LOW_Bhaal_Amulet

Item Description:
A silver amulet depicting the symbol of Bhaal.
]]
local items = {
  "16a632e2-45b1-4ff1-8250-513eb271abea"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>15</ID>
                  <Description>"Amulet of Branding"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Gish_WeaknessBranding_Amulet

Item Description:
Though thin and delicate-looking_ the amulet's pendant sits heavy against your chest.
]]
local items = {
  "894a6847-3d80-4368-86fb-354c8cb23525"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>16</ID>
                  <Description>"Amulet of Elemental Torment"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_MartyrAmulet

Item Description:
Each jewel gleams with the energy of the natural elements.
]]
local items = {
  "c1cb7388-bd2f-4cc7-8305-7d7a0651874f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>17</ID>
                  <Description>"Amulet of Greater Health"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ofGreaterHealth_Amulet

Item Description:
Worn by Lumi_ a cleric beholden to twilight_ who sheltered her fellow adventurers as a bantam shelters her chicks. 
]]
local items = {
  "5ed63342-30c9-456d-9a57-a88c8596c0c9"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>18</ID>
                  <Description>"Amulet of Misty Step"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
GOB_DrowCommander_Amulet

Item Description:
This necklace allows the wearer to cast Misty Step.____Made of blue gems unique to a privately-owned mine in Menzoberranzan_ this necklace was likely a token of esteem - or perhaps a desperate attempt to win its recipient's mercy.
]]
local items = {
  "338848e7-b2c6-4f97-879b-cb3439b4f959"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>19</ID>
                  <Description>"Amulet of Restoration"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Healer_HPRestoration_Amulet

Item Description:
The gemstone centrepiece of the amulet was long ago mottled and dyed by the tears of a martyr. 
]]
local items = {
  "b648ee98-f648-411b-be7e-6c50ca9b463c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>20</ID>
                  <Description>"Amulet of Sel_ne's Chosen"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_GOB_SeluneAmulet

Item Description:
The gems and pearls of this necklace have a brilliant shine to them_ as if reflecting unseen moonlight.
]]
local items = {
  "e7bf966a-b611-4c36-89fe-0a3b28393d97"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>21</ID>
                  <Description>"Amulet of Silvanus"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
DEN_BearReward_Amulet

Item Description:
This amulet_ engraved with a small waterfall_ imparts a feeling of calm serenity when worn.
]]
local items = {
  "c0b04c1c-afb5-4f02-b832-e12043a2d2c4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>22</ID>
                  <Description>"Amulet of The Devout"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfTheDevout_Amulet

Item Description:
Otto_ a member of the powerful arcane organisation the Circle of Eight_ had a penchant for amulets. So much so that they announced his arrival before he ever needed to.
]]
local items = {
  "1acf71e6-6bca-4d9b-9d24-739823e10723"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>23</ID>
                  <Description>"Amulet of the Drunkard"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_EGW_OfTheDrunkard_Amulet

Item Description:
Donning this necklace causes the room to sway and tip - or maybe it was already swaying_ Whatever_ time for another pint. 
]]
local items = {
  "b6510e39-54fc-45fa-a49e-e7d8cbfdafe6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>24</ID>
                  <Description>"Amulet of the Harpers"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Harpers_HarpersAmulet

Item Description:
Nobility can be found in suffering the slings and arrows of outrageous fortune. So can dying. Best to be on guard. 
]]
local items = {
  "ddc9ac0b-8e68-422b-8d9d-c081629ab4ad"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>25</ID>
                  <Description>"Amulet of the Unworthy"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_Minotaur_BeltAmulet

Item Description:
Once part of the Girdle of Blades_ this buckle was torn off and fashioned into an amulet that can be worn by creatures of all sizes.
]]
local items = {
  "b96d16dc-da98-4108-9a0e-5e55720dbf5c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26</ID>
                  <Description>"Amulet of Windrider"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
LOW_OfWindrider_Amulet

Item Description:

]]
local items = {
  "489290fd-c517-4c26-83e8-db102d8db25b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>27</ID>
                  <Description>"Beastmaster's Chain"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
GOB_Pens_BeastmasterAmulet

Item Description:
The green jewel set into this necklace's pendant is carved to resemble a cat's slivered pupil.
]]
local items = {
  "01d74aea-9e8a-4d03-9b55-e43458b61163"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>28</ID>
                  <Description>"Brass Locket"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_KeepsakeLocket_A

Item Description:
Slightly tarnished_ and opened with a mere flick of the thumb.
]]
local items = {
  "fa28af9d-f179-4eeb-9780-a4cde893ac1f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>29</ID>
                  <Description>"Bronze Necklace"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Bronze

Item Description:
Though shining brightly_ this necklace smells distinctively of rust.
]]
local items = {
  "fda631e5-83f5-4ae4-b28f-cf4da102e3be"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>30</ID>
                  <Description>"Bronze Necklace"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_B_Bronze_A

Item Description:
Though shining brightly_ this necklace smells distinctively of rust.
]]
local items = {
  "fda631e5-83f5-4ae4-b28f-cf4da102e3be"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>31</ID>
                  <Description>"Bronze Pendant"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_D_Bronze_Green

Item Description:
The interlocked bronze links of this necklace tinkle softly every time you move.
]]
local items = {
  "15be2ce4-3f2c-4b75-8068-bd13fd69a3d5"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>32</ID>
                  <Description>"Broodmother's Revenge"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Healer_HealSelfPoisonWeapon_Amulet

Item Description:
Each of this amulet's jewels shines like a viper's eyes.
]]
local items = {
  "21abc023-343a-4693-b63f-3ba07a231864"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>33</ID>
                  <Description>"Burnished Necklace"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_C_Gold_A

Item Description:
The deep emerald stones on this chain sparkle like Eldath's eyes.
]]
local items = {
  "ee6309db-5347-435c-94d8-a84f5996ea56"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>34</ID>
                  <Description>"Burnished Necklace"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_C_Silver_A

Item Description:
Set with gems harvested from deep within the Underdark_ this necklace has a dark lustre.
]]
local items = {
  "c3d8f808-3f35-4206-9f6d-a26961953616"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>35</ID>
                  <Description>"Burnished Necklace"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_C_Bronze_A

Item Description:
Bright and polished_ this necklace was clearly cherished by its previous owner.
]]
local items = {
  "032c0c5e-158f-4c51-8fbe-f7658f43c853"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>36</ID>
                  <Description>"Champion's Chain"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_MyconidAmulet_Evil

Item Description:
A plump mass torn from Sovereign Glut's own flesh. A marker of the colony's esteem - or perhaps its property.
]]
local items = {
  "f6963e1e-b95a-496d-9d57-d4ad79a4394c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>37</ID>
                  <Description>"Corvid Token"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LuckySeven_Amulet

Item Description:
'Let your lips turn black as night_On this eve of frightful wights_Let your throat be filled with screams_Nearby looms the Raven Queen_' - A song of dark festivity
]]
local items = {
  "95f850c6-ccaf-4f37-8c7a-33f740765ec0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>38</ID>
                  <Description>"Dauntless Amulet"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LC_Cyric_FearImmunity_Amulet

Item Description:
Flowing through your chest_ threads of whiskey-like warmth - they spread and spread_ and who could lay you low_ you champion in hopeful hours_
]]
local items = {
  "a67c7aa5-7b3f-4222-a655-6e4217d3b8e6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>39</ID>
                  <Description>"Envoy's Amulet"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_MyconidAmulet_Good

Item Description:
A fleshy amulet shaped by Sovereign Spaw's own hand. Wherever the bearer goes_ so does the myconid circle.
]]
local items = {
  "5556b0c1-5b0a-47f9-8bc6-91c8f293f83e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>40</ID>
                  <Description>"Fey Semblance Amulet"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Greenstone_Amulet

Item Description:
Originally the kidney stone of an archfey_ this object has been_ ahem_ passed down through the centuries. 
]]
local items = {
  "e4d2562d-2789-4598-befe-d46b255f551a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>41</ID>
                  <Description>"Fireheart"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Fire_HeatOnTakingFireDamage_Amulet

Item Description:
The ruby's red reflections look like eerie flames dancing across your skin.
]]
local items = {
  "ad278f33-7c10-4779-88fc-d1448f25ae72"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>42</ID>
                  <Description>"Frost Prince"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Frost_Frostbite_Amulet

Item Description:
Each sapphire feels like a tiny shard of sharpened ice.
]]
local items = {
  "6cc1bd88-9ff8-42bc-ac63-495d0cc027e4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>43</ID>
                  <Description>"Gold Necklace"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_B_Gold_A

Item Description:
Tiny_ ageless flower petals fill the amber stones of this necklace.
]]
local items = {
  "c612c1e6-0ff0-40a1-b199-b25db1c9808e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>44</ID>
                  <Description>"Gold Pendant"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Gold

Item Description:
Though this necklace looks simple in design_ the tiny filigreed triangles holding the gemstone in place demonstrate the jeweller's skill.
]]
local items = {
  "fc44cf0e-04dc-4feb-b143-b1c52cffe252"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>45</ID>
                  <Description>"Gold Pendant"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_A_Gold_Purple

Item Description:
Though this necklace looks simple in design_ the tiny filigreed triangles holding the gemstone in place demonstrate the jeweller's skill.
]]
local items = {
  "fc44cf0e-04dc-4feb-b143-b1c52cffe252"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>46</ID>
                  <Description>"Gold Pendant"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_D_Gold_Blue

Item Description:
Heavily embossed with filigree_ this necklace reflects light in all directions.
]]
local items = {
  "54566608-c5e2-40e1-b2fc-014ba43a67ae"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>47</ID>
                  <Description>"Hammergrim Mist Amulet"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Shadow_FogCloud_Amulet

Item Description:
One of the relics of Deep Duerra's rebellious children. Drugging the Keykeeper of Duerra's vaults_ the children crept in under cover of night and plundered their mother's treasure - searching desperately for anything that would aid in their flight. 
]]
local items = {
  "17a817b0-ea8b-492c-8925-402ad5cd84d5"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>48</ID>
                  <Description>"Ilmater's Aid"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LowHP_IncreasedSpellDamage_Amulet

Item Description:
Named after the god of martyrs_ this amulet seems to shine in the presence of the wearer's blood.
]]
local items = {
  "49a3a5ac-4e04-497a-a721-1decf89ea077"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>49</ID>
                  <Description>"Khalid's Gift"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
SCE_KhalidsGift

Item Description:
A gift from Khalid for Jaheira.
]]
local items = {
  "64b31781-85f6-4266-8fac-430d79bcbdb4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>50</ID>
                  <Description>"Kill Collar"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_LOW_SteelWatchFoundry_ExplodingCollar

Item Description:

]]
local items = {
  "47af23c3-7eb0-4a49-a4a4-f2ee5ab521c0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>51</ID>
                  <Description>"Komira's Locket"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
DEN_Arabella_Locket

Item Description:
Worked carefully into the locket's metal back are the words_ 'Never dark again.'
]]
local items = {
  "be745c7b-f5a0-48cb-a7bd-3b7713f6e702"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>52</ID>
                  <Description>"Kruznabir's Asylum Amulet"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LC_HellishMadness_Amulet

Item Description:
The bauble is emblazoned with fiendish words that_ when translated_ mean_ 'May your throat be educated in new screams.'
]]
local items = {
  "52503330-69de-427a-a443-b49ab748fc1c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>53</ID>
                  <Description>"Lightning Aura Amulet"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ChargedLightning_StaticDischarge_Amulet

Item Description:

]]
local items = {
  "defadacf-466a-4a4e-85e4-84e2fb7266d2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>54</ID>
                  <Description>"Lofty Sorcerer's Amulet"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfGreaterSorcery_Amulet

Item Description:
Chiselled into the back of the amulet with great care_ 'sorcery _ wizardry'.
]]
local items = {
  "99864ac4-824c-4049-8933-e81667c4a408"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>55</ID>
                  <Description>"Magic Amulet"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_SecondChance_Amulet

Item Description:
Imbued with a little luck after the item was pressed to the pursed lips of a saint of the goddess Tymora.
]]
local items = {
  "49c2d3d1-f489-4433-8f9a-bdef766ee9f1"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>56</ID>
                  <Description>"Moondrop Pendant "</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LowHP_IgnoreAttackOfOpportunity_Amulet

Item Description:
The back bears an inscription under a delicate crescent moon. 'You're a novice no more_ Robin. Only right you should carry a little of our Lady's light with you.'
]]
local items = {
  "5bf24229-7a46-46d7-94d7-766ea5591ec2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>57</ID>
                  <Description>"Necklace of Elemental Augmentation"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ElementalGish_CantripBooster_Amulet

Item Description:
The tourmaline in this necklace is almost uncomfortably hot_ warmed by a heat all its own.
]]
local items = {
  "a92cec2f-3a86-4aa1-a7e9-1d6dc9e12957"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>58</ID>
                  <Description>"Pearl Necklace"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Pearl

Item Description:
Tiny rainbows reflect in the pearls' iridescent shine.
]]
local items = {
  "5fb93f62-06fa-4dc1-9c59-ff3fd48043d4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>59</ID>
                  <Description>"Pearl Necklace"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_E_Pearl_A

Item Description:
Tiny rainbows reflect in the pearls' iridescent shine.
]]
local items = {
  "5fb93f62-06fa-4dc1-9c59-ff3fd48043d4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>60</ID>
                  <Description>"Pearl Necklace"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_E_Pearl_B

Item Description:
Dozens of tiny pearls adorn this necklace_ knotted in place by clever gnomish hands.
]]
local items = {
  "8174f2b6-e595-4d18-a3bb-b1617d0524ac"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>61</ID>
                  <Description>"Pearl Necklace"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_E_Pearl_C

Item Description:
Well-to-do households sometimes let their maids wear pearls_ believing that the servants' body heat will increase the pearls' lustre.
]]
local items = {
  "ecd570ea-af01-4835-a9c8-967edf4afe85"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>62</ID>
                  <Description>"Pearl of Power Amulet"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_PHB_ofPower_Pearl_Amulet

Item Description:
There are no molluscs of power_ alas. 
]]
local items = {
  "6b8fcc06-fa6a-4a11-8318-075d90d8e909"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>63</ID>
                  <Description>"Pendulum of Malagard"</Description>
                  <Color>4080FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
LOW_PendulumOfMalagard

Item Description:

]]
local items = {
  "4c1143b7-1f07-465a-90a0-64df5c00717d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>64</ID>
                  <Description>"Periapt of Wound Closure"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_PHB_PeriaptofWoundClosure_Amulet

Item Description:
Sometimes the best thing you can do for your friends is to stop bleeding and give them a chance to sort everything out. 
]]
local items = {
  "716e94de-130b-4f54-84d9-a14fc60adcfb"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>65</ID>
                  <Description>"Polished Necklace"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_F_Gold_A

Item Description:
It is said that wearing a ruby near the heart will increase a lover's courage.
]]
local items = {
  "912bbc6f-f4f0-4815-9ed5-d914289402e6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>66</ID>
                  <Description>"Polished Necklace"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_F_Silver_B

Item Description:
Fine strips of silver snake around the emeralds in this necklace_ holding them firmly in place.
]]
local items = {
  "e75e18a0-0a94-42b4-8745-063ea00a5a66"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>67</ID>
                  <Description>"Polished Necklace"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_F_Bronze_A

Item Description:
Heavily set with gemstones_ this necklace weighs more than expected.
]]
local items = {
  "3a3a688b-4d18-44df-9190-003493492070"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>68</ID>
                  <Description>"Psychic Spark"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_SocietyOfBrilliance_MagicMissileNecklace

Item Description:
Every gem hanging from this necklace is warm to the touch_ as if waiting to ignite.
]]
local items = {
  "4a9f0479-954f-486c-9534-d7d72c11f919"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>69</ID>
                  <Description>"Scarab of Protection"</Description>
                  <Color>4080FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_PHB_ScarabOfProtection_Amulet

Item Description:
This beetle-shaped medallion thrums with a power redolent of older civilisations in Toril - how old is this relic_ all grouted with dust as it is_ 
]]
local items = {
  "7107c86e-ec6a-4bd8-bc93-8147412fc501"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>70</ID>
                  <Description>"Sentient Amulet"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_MonkAmulet_Amulet

Item Description:
Sun-graced warmth radiates from both the pendant and its chain. Somehow_ even a brief glance of it brings a smile to your face.
]]
local items = {
  "086ae8fd-c44e-43a7-b8be-777b551a06d6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>71</ID>
                  <Description>"Shar's Temptation"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
TWN_NecklaceOfCharming

Item Description:
The inlaid jewels are so rich in colour_ so deep in hue_ you could lose yourself in them.
]]
local items = {
  "9c10ac72-da07-4aca-a2ce-3d04d1ce3485"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>72</ID>
                  <Description>"Silver Amulet"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Silver

Item Description:
Chunky and a little dated_ but made entirely of hammered silver.
]]
local items = {
  "51873c0d-f319-45e6-a6a2-79164cd8f3db"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>73</ID>
                  <Description>"Silver Amulet"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet

Item Description:
Chunky and a little dated_ but made entirely of hammered silver.
]]
local items = {
  "51873c0d-f319-45e6-a6a2-79164cd8f3db"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>74</ID>
                  <Description>"Silver Amulet"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_A_Silver_Orange

Item Description:
Chunky and a little dated_ but made entirely of hammered silver.
]]
local items = {
  "51873c0d-f319-45e6-a6a2-79164cd8f3db"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>75</ID>
                  <Description>"Silver Necklace"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_B_Silver_A

Item Description:
Sapphire necklaces are popular among Baldur's Gate's patriars as mourning garb - the heavy teardrop-shaped stones represent the weight of their loss.
]]
local items = {
  "50d054ee-4982-46eb-8f16-7a1c71ec8e28"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>76</ID>
                  <Description>"Silver Pendant"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_D_Silver_Purple

Item Description:
This cold_ heavy pendant is slow to warm to the touch.
]]
local items = {
  "1df12296-498c-494c-b639-f103b63156a3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>77</ID>
                  <Description>"Silver Pendant"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
CHA_OutpostJewelry

Item Description:
Grime covers this necklace_ but you can vaguely discern delicate engravings of a moon and harp.
]]
local items = {
  "8b5fb90f-f957-4a1a-b8eb-2baff0c3b40b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>78</ID>
                  <Description>"Spell Savant Amulet"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LC_TheAmplifier_Amulet

Item Description:
When on the wrong side of a few sherries_ the powerful wizards Bigby and Tenser would sometimes see how many spells they could fit into amulets like this one before they burst.
]]
local items = {
  "a3964bb7-abe5-49f3-a1b1-30ff160ecbf3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>79</ID>
                  <Description>"Spellcrux Amulet "</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Restoration_SpellSlotRestoration_Amulet

Item Description:
Some scholars have speculated that spells have a mind of their own_ suggesting that the spells get bored between being cast and restored.
]]
local items = {
  "ba147dc7-98bc-4bfb-9fbc-efa1735d0841"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>80</ID>
                  <Description>"Spineshudder Amulet"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Thunder_ReverberationOnRangeSpellDamage_Amulet

Item Description:
Quivers creep up your enemy's back - the slow_ long-fingered hand of your magic. 
]]
local items = {
  "203321f7-74f6-428c-90be-5d8b12da23ec"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>81</ID>
                  <Description>"Staggering Amulet"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Psychic_Staggering_Amulet

Item Description:

]]
local items = {
  "ebe323ad-029a-4d04-8564-106e45d32f12"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>82</ID>
                  <Description>"Surgeon's Subjugation Amulet"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_TWN_Surgeon_ParalyzingCritical_Amulet

Item Description:
A surgeon is only as reliable as her tools. And_ indeed_ as depraved. 
]]
local items = {
  "d6db1ae8-8e8e-49d1-8968-5cdb7fa3a02a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>83</ID>
                  <Description>"Synaptic Needle Amulet "</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Illithid_MindTax_Amulet

Item Description:
Fingering this amulet sends a spike of pleasure sliding through the brain - pleasure that could be turned to pain in an enemy's addled mind. 
]]
local items = {
  "28daf3e2-18c6-479d-82f6-54041596980e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>84</ID>
                  <Description>"Tarnished Charm"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_HAG_Phylactery

Item Description:
A menacing cackle emanates from this twisted charm. It whispers to bite_ to maim_ to kill...
]]
local items = {
  "6d02f3e8-9c0e-49ce-993e-035e433d02b2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>85</ID>
                  <Description>"Tarnished Pendant"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Amulet_Necklace_A_Bronze_Green

Item Description:
Spots of crumbling green patina are slowly eating away at this once-bronze pendant.
]]
local items = {
  "8bba4a7c-a7df-4d1f-b202-286522a028fa"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>86</ID>
                  <Description>"The Amulet of Lost Voices"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_TalismanOfJergal

Item Description:
The dead hold no secrets from Jergal's Scriveners of Doom.
]]
local items = {
  "e89d55a7-9a68-445a-bac9-b4a02654f0c7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>87</ID>
                  <Description>"The Blast Pendant"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ChargedLightning_LightningBlast_Amulet

Item Description:
Though they only worked together for a short time_ it is hard to overstate the influence Lenore the cleric of Mystra had on Yrre the Sparkstruck_ who often likened harnessing lightning to manipulating the Weave.
]]
local items = {
  "c2bbb262-34ee-4483-a0f8-f72cb7794ff1"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>88</ID>
                  <Description>"The Ever-Seeing Eye"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
HAG_EyeballNecklace

Item Description:
A pale green eye_ pierced by the twisting branches of a dead tree - the result of a foolhardy woman begging Auntie for a favour.
]]
local items = {
  "3af0e44d-309a-4a42-818a-288af77a7350"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>89</ID>
                  <Description>"The Spectator Eyes"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_SpectatorEye_Amulet

Item Description:
Spectators are hideous aberrations that float above the ground_ fiercely staring around and shooting beams at anything they don't appreciate. 
]]
local items = {
  "6fe3b3f6-22f4-4745-9be0-25d0e36a1a4f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>90</ID>
                  <Description>"Treacleflow Amulet"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ZOC_RampartAura_Amulet

Item Description:
The air surrounding this lavishly decorated amulet is thick - like pushing your fingers through sap or syrup.
]]
local items = {
  "20beaa42-f9fb-4b53-9c86-b971059b845b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>91</ID>
                  <Description>"Tressym Collar"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Taras_Collar_Amulet

Item Description:
The gem in this collar's centre is placed as a common courtesy_ it allows the tressym's summoner to be identified and complained to in the case of bereaved pet owners or pigeon-masters. This one glows with a Waterdhavian name_ Gale Dekarios.
]]
local items = {
  "7d4b8a5c-7748-4021-a760-4bf646518a88"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>92</ID>
                  <Description>"Uncovered Mysteries"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_Tower_AmuletDetectThoughts

Item Description:
Beneath the layers of dust covering this necklace_ its inlaid gems still give off a blue sparkle - the colour of Mystra's clergy.
]]
local items = {
  "cfbda235-8cb7-4ee7-bd94-b9a2249ed82e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>93</ID>
                  <Description>"Unflinching Protector Amulet"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LegendaryEvasion_Amulet

Item Description:
Touching this amulet's centrepiece_ you are imbued with a vision of woven strands_ and the strands coming apart and holding true and firm over your friends_ like shields banded in a haze of golden light. 
]]
local items = {
  "ed529c1b-abb0-4efa-8f5b-c4ed8560dfd3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>94</ID>
                  <Description>"Volo's Ersatz Eye"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
DEN_VoloOperation_ErsatzEye

Item Description:
While the ersatz eye is embedded in your eye socket_ you can see through the tiny orb as though it were a normal eye. Can't be removed once inserted.____A hollow bead of white glass_ carefully painted to resemble a realistic eye. Its tarnished brass fittings hum with a tinge of magic.
]]
local items = {
  "000cfc9f-b973-48e7-a5c8-f2992a47a943"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>95</ID>
                  <Description>"Wakeful Amulet"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_WYRM_SleepImmunity_Amulet

Item Description:
While this doesn't prevent wilful rest_ it does protect you from being put to sleep from such sources as hypnotism_ copious alcohol usage_ or_ indeed_ magic. 
]]
local items = {
  "d9ee5eb0-3fa8-4d9c-96d2-676798791095"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>96</ID>
              <Description>"Boots"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>97</ID>
                  <Description>"Acrobat Shoes"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Acrobat_Shoes

Item Description:
These flexible shoes were once owned by Audreyne Willoughs_ who_ in a somewhat ironic twist of fate_ ran away from the circus to join her parents back home.
]]
local items = {
  "32b1a84f-2e32-4249-8b19-ecaa7f279cb0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>98</ID>
                  <Description>"Boots of Aid and Comfort"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Healer_TempHPOnHeal_Boots

Item Description:
Sturdy and well-worn_ these boots make a snug fit on any wearer.
]]
local items = {
  "bc090f4e-ff74-49f6-a3f2-7eb561f57436"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>99</ID>
                  <Description>"Boots of Apparent Death"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
TWN_BootsOfApparentDeath

Item Description:
Practical jokes with these boots often involve all your stuff being stolen by opportunistic cousins.
]]
local items = {
  "8838eb53-ed3d-4d64-9fe7-a82ab7249c18"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>100</ID>
                  <Description>"Boots of Arcane Bolstering "</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_CQCaster_ArcaneChargeAfterDash_Boots

Item Description:
Fizzling barbs of enchantment magic crackle from the laces of these boots. 
]]
local items = {
  "400b3aca-fc9e-44c7-b5a7-a183693d3a75"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>101</ID>
                  <Description>"Boots of Brilliance"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Bard_RefreshBardicInspirationSlot_Shoes

Item Description:
Tiny bells are sewn into the boots' cuffs. They jingle subtly with every step.
]]
local items = {
  "a7ce200c-ab1a-4d49-bf7d-c6894b1e5b06"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>102</ID>
                  <Description>"Boots of Elemental Momentum"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ElementalGish_MomentumOnElementalDamage_Boots

Item Description:
Toughened metal boots_ highly insulated with heavy leather and padding for use in any and all elements.
]]
local items = {
  "cf8e6826-9133-425a-be21-79a41e1f7add"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>103</ID>
                  <Description>"Boots of Genial Striding "</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_TerrainWalkers_Boots

Item Description:
The soles of these boots warp and shift like warm clay manipulated by an unseen sculptor's hands. 
]]
local items = {
  "0624ccf0-1b77-448f-8da9-d8a04efa4935"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>104</ID>
                  <Description>"Boots of Psionic Movement"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Githborn_PsionicMovement_Boots

Item Description:
When not atop their dragons_ gith are not particularly air-worthy. This is probably for the best. The imposition of downward gravity tends to put most people in a mood.
]]
local items = {
  "18919a04-67a0-4321-82ff-ce2b64a27589"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>105</ID>
                  <Description>"Boots of Speed"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_BootsOfSpeed

Item Description:
Featherlaced and flexible of sole_ these boots have been used to round up - and outrun - many a foe.
]]
local items = {
  "8b22d15a-85bb-4c8d-90cf-a773fc451eac"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>106</ID>
                  <Description>"Boots of Stormy Clamour"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Thunder_ReverberationOnStatusApply_Boots

Item Description:
Peals of thunder rumble at the back of your skull with every step taken in these boots. 
]]
local items = {
  "3908725d-29d1-4c9a-be46-4e03c8c65238"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>107</ID>
                  <Description>"Boots of Striding"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Paladin_MomentumOnConcentration_Boots

Item Description:
The metal of these greaves is comfortably warm against your shins_ as though heated by your mere presence.
]]
local items = {
  "8770f821-38bc-41cc-aae9-02988d46df02"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>108</ID>
                  <Description>"Boots of Uninhibited Kushigo"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Monk_Magic_Boots

Item Description:
During a hilltop battle that soaked the slopes in gore_ Kushigo's best friend Irishi was scalped before he could help her.____The enemy held up the bloody wig_ and Kushigo fell upon one_ and then another_ until he had killed so many that they hung from his antlered shoulders like skewered effigies. 
]]
local items = {
  "1cd85fa0-b46a-43c6-88d2-e90ad4e73cf7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>109</ID>
                  <Description>"Briskwind Boots"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Critical_CriticalSwiftness_Boots

Item Description:
The wind seems to lap encouragingly at the heels of these boots_ no matter which direction they take.
]]
local items = {
  "93cc1480-9fe1-4e76-8c0b-0ad3caf35285"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>110</ID>
                  <Description>"Cinder Shoes"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Fire_HeatOnInflictBurning_Boots

Item Description:
Despite the many scorch marks_ these leather boots are somehow still supple and intact.
]]
local items = {
  "eff1515c-4612-4e23-9b50-71f318a2f117"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>111</ID>
                  <Description>"Dennon's Boots"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
Quest_DEN_ARM_LuckyBoots

Item Description:
Dripping wet_ these boots squelch uncomfortably around your toes with every step.
]]
local items = {
  "ed82c14d-f047-4c4a-866e-836f33e74e40"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>112</ID>
                  <Description>"Disintegrating Night Walkers"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
FOR_NightWalkers

Item Description:
Darker than a starless night_ Night Walkers are made for secrecy in the honour of Shar.__This particular pair was found deep in the ruins of an Underdark fortress. Though the leather is old and the magic is fading_ the boots were recently cleaned and oiled with care.
]]
local items = {
  "ac9145d1-31d0-4aa3-8755-62cc85dad22b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>113</ID>
                  <Description>"Evasive Shoes"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Evasive_Shoes

Item Description:
Rogues in Waterdeep prefer these spring-loaded boots that make evading the city watch a breeze.
]]
local items = {
  "119f753a-8b06-44d8-bb9a-8a307f6032da"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>114</ID>
                  <Description>"Featherlight Boots"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LowHP_IncreaseSpeed_Boots

Item Description:
The soft and supple leather glides over your skin. Wearing them feels like running barefoot.
]]
local items = {
  "e3ab8ed8-de3a-466a-ad85-319bdea94bde"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>115</ID>
                  <Description>"Helldusk Boots"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Infernal_Metal_Boots

Item Description:
No ore takes better to being forged than the infernal iron of Avernus_ where the archdevil Zariel presides.
]]
local items = {
  "bc82f909-ade5-4ada-9b94-cec7ca1d4a68"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>116</ID>
                  <Description>"Hoarfrost Boots "</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Frost_IceSurfaceProneImmunity_Boots

Item Description:
A smattering of tiny ice crystals have formed cleats on the soles of these hardy boots. 
]]
local items = {
  "6ca10a61-07d8-478c-a6e7-8e43072233cf"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>117</ID>
                  <Description>"Linebreaker Boots"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Violence_ViolenceOnDash_Boots

Item Description:
Lightweight fur and leather_ designed to speed the wearer's charge into battle.
]]
local items = {
  "edb7385a-e4d4-4fb7-ad9f-a9910e4b9e97"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>118</ID>
                  <Description>"Mystra's Grace"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_Tower_BootsFeatherFall

Item Description:
Wearing these boots is like walking on cotton clouds.
]]
local items = {
  "baae9783-dcd3-4d6b-bba3-86faf2fe4c8e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>119</ID>
                  <Description>"Oathbreaker Knights Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Oathbreaker_Boots

Item Description:

]]
local items = {
  "71030d3c-c3c4-4ad6-80de-f9871bd6f11d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>120</ID>
                  <Description>"Shadowstep Boots"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Shadow_Shadowstep_Boots

Item Description:
One of the relics of Deep Duerra's rebellious children. A mean-minded parent_ Duerra quickly earned her children's enmity. In secret_ the children devised a plan to escape their mother forever.
]]
local items = {
  "6cae9a98-b75d-408e-ac59-d6bde6e4ab13"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>121</ID>
                  <Description>"Slinging Shoes"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Projectile_Shoes

Item Description:
These shoes were formerly enchanted to return to their owner's feet. This caused a great deal of trouble for owners_ who_ while wearing a slipper or a nice heeled number_ kept being kicked in the ankles by jealous footwear.
]]
local items = {
  "9b94fd74-bcee-4d30-8862-0a18ae65541b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>122</ID>
                  <Description>"Spaceshunt Boots"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_BootsOfDimensionalDoor

Item Description:

]]
local items = {
  "ae4af670-5674-4fed-bbf9-4083f06519b0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>123</ID>
                  <Description>"Spiderstep Boots"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
FOR_SpiderstepBoots

Item Description:
Slightly sticky to the touch_ these boots have excellent grip.
]]
local items = {
  "d0666101-d24e-4d2b-bc63-63f67532b38c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>124</ID>
                  <Description>"Springstep Boots"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Mobility_MomentumOnDash_Boots

Item Description:
Supple leather rebounds with every step_ as if urging the wearer on.
]]
local items = {
  "1a6825cb-95d5-4542-b018-deb48d936b73"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>125</ID>
                  <Description>"Swiresy Shoes"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Jumping_Shoes

Item Description:
Likely fashioned in tribute to the extremely small_ high-vaulting rascal who pillaged many a hen house - Lupperdiddle Swires.
]]
local items = {
  "b9872a9c-d653-4108-9060-21d6d8ec511a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>126</ID>
                  <Description>"Tenacious Boots"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ZOC_ForceConduitWhileSurounded_Boots

Item Description:
Plant your feet firm as an oak_ your roots determinate_ your balance as precise as the contour of the moon. 
]]
local items = {
  "cde75746-e209-433b-838c-300e3c7d8306"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>127</ID>
                  <Description>"The Speedy Lightfeet"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ChargedLightning_Dash_Boots

Item Description:
It is said the Speedy Lightfeet were the first of many lightning inventions made by Yrre the Sparkstruck. The boots' old_ frayed edges zap and crackle with even the slightest movement.
]]
local items = {
  "66be4e91-933b-44e8-a73c-3b8a9c6b14a8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>128</ID>
                  <Description>"The Watersparkers"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ChargedLightning_ElectricSurface_Boots

Item Description:
An enormous storm was raging the first time Yrre the Sparkstruck left the Underdark. The deep gnome's interest in lightning became at once an all-consuming obsession_ and they would spend the rest of their years striving to recreate that storm's power themselves.
]]
local items = {
  "fc9104ab-b61c-4481-8402-cecb13baf30f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>129</ID>
                  <Description>"Varsh Ko'kuu's Boots"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
CRE_Hatchery_AcidPoisonImmunity_Boots

Item Description:
Though the leather is slick with acid_ the corrosive liquid doesn't seem to damage the boots - nor does it penetrate.
]]
local items = {
  "3462aa18-bb93-403c-b28d-9841c147787f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>130</ID>
                  <Description>"Vital Conduit Boots"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Gish_TempHPWhileConcentrating_Boots

Item Description:
Tenser's notes on arcane displacement were not only read by wizards - other avid readers included enterprising smiths eager to break into the magic items market. 
]]
local items = {
  "306d3417-5e12-499e-832e-86b602a075de"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>131</ID>
                  <Description>"Wavemother's Boots"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LC_Umberlee_Regeneration_Boots

Item Description:
Though vindictive and about as kindly as a tsunami_ Umberlee the Sea Goddess is occasionally inclined toward restorative acts_ as gentle as placid waves on a white-gold shore. 
]]
local items = {
  "a1eb910c-0090-4c50-a1cb-a35cbe8c80f2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>132</ID>
              <Description>"Breast"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>133</ID>
                  <Description>"ARM_Leather_Body_Minsc"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Leather_Body_Minsc

Item Description:

]]
local items = {
  "be29b42a-e3ab-4a41-b4c2-7443cf65162f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>134</ID>
                  <Description>"_Foot"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
_Foot

Item Description:

]]
local items = {
  "00000000-0000-0000-0000-000000000000"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>135</ID>
                  <Description>"ARM_Breastplate_Body_Githyanki"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Breastplate_Body_Githyanki

Item Description:

]]
local items = {
  "80b78428-809f-4978-acea-d54670011fbe"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>136</ID>
                  <Description>"ARM_Civilian_Body"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Civilian_Body

Item Description:

]]
local items = {
  "fefa15ce-2277-42eb-b49a-83e5ac2594c6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>137</ID>
                  <Description>"ARM_Robe_CultOfAbsolute"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Robe_CultOfAbsolute

Item Description:

]]
local items = {
  "799fd23a-8e18-4642-8650-521dd7880c2b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>138</ID>
                  <Description>"ARM_StuddedLeather_CultOfAbsolute"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_StuddedLeather_CultOfAbsolute

Item Description:

]]
local items = {
  "0d6cf147-e47a-481e-9ed7-a2d85e358d2c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>139</ID>
                  <Description>"ARM_Breastplate_BGWatch"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Breastplate_BGWatch

Item Description:

]]
local items = {
  "f94eafb0-4277-45cd-96c8-03d0184eed51"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>140</ID>
                  <Description>"ARM_Padded_BGWatch"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Padded_BGWatch

Item Description:

]]
local items = {
  "9a487731-93df-45bd-bfcb-9bc82140c719"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>141</ID>
                  <Description>"UNI_Leather_Jaheira"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_Leather_Jaheira

Item Description:

]]
local items = {
  "f91623dd-7dcd-4d05-b353-6a15f5caa921"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>142</ID>
                  <Description>"UNI_Karlach_StarterArmor"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_Karlach_StarterArmor

Item Description:

]]
local items = {
  "2e3a2651-18ce-44b0-b7bd-3e2565bf666c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>143</ID>
                  <Description>"UNI_Leather_Halsin"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_Leather_Halsin

Item Description:

]]
local items = {
  "26b77cf7-8722-4e61-a820-555de653e8ab"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>144</ID>
                  <Description>"Adamantine Scale Mail"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_MeleeDebuff_AttackDebuff1_OnDamage_ScaleMail

Item Description:
The adamantine scales hug your body like a second skin - a heavy_ near-impregnable skin.
]]
local items = {
  "5427c806-5565-421f-a00f-a8282a9f504f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>145</ID>
                  <Description>"Adamantine Splint Armour"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_MeleeDebuff_AttackDebuff2_OnDamage_SplintMail

Item Description:
The adamantine plates lock and slide together perfectly - offering protection against even the deadliest of blades.
]]
local items = {
  "ea3cf349-19ab-4104-9253-8e182bdbf538"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>146</ID>
                  <Description>"Appreciably-Cared-For Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Boots_Leather_A

Item Description:
These boots are well-maintained and clean_ though their soles are thin from wear.
]]
local items = {
  "cf987856-1381-477e-88db-6b359f7e19e8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>147</ID>
                  <Description>"Armour of Agility"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_EndGame_HalfPlate

Item Description:
Layered sheets of smelted_ shaped_ and smithed steel have been etched with a sweetly luminous gold. Its outward appearance is heavy. And yet it's so light when you lift it_ like lifting a bag of shrunken dead leaves.
]]
local items = {
  "42e6357a-4c05-4eda-9415-6b6b4c7d44c5"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>148</ID>
                  <Description>"Armour of Devotion"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Paladin_RestoreChannelDivinity_Armor

Item Description:
The soft hum of a fervent prayer reverberates throughout the armoured plates.
]]
local items = {
  "c4af39d8-628d-4791-9dc4-4446ee31e160"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>149</ID>
                  <Description>"Armour of Landfall"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Druid_Land_Magic_Leather_Armor

Item Description:
Smelling of long-abandoned gardens grown wild with thorny roses_ moss and hibiscus_ this armour was worn by a powerful druid who spent so long from people that she forgot to miss them.
]]
local items = {
  "baa33dbe-6f95-4569-87bf-9582b4b58bd2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>150</ID>
                  <Description>"Armour of Moonbasking"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Druid_Moon_Magic_Leather_Armor

Item Description:
This armour was designed by lunar-obsessed Cuthbertina_ a gnomish arcane smith who now lives peacefully on a mountain plateau with her magical forge.
]]
local items = {
  "d33d71f8-f7b9-4c19-9b39-03d0b9ba8829"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>151</ID>
                  <Description>"Armour of Persistence"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_EndGame_Plate_Armor

Item Description:
Great sheets of steel were hammered and bashed into something like a carapace_ thick and dense - you can almost feel the hammer blows_ flooded with rich magic.
]]
local items = {
  "fb2ff6d1-3096-4904-813c-a448e3fbec4d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>152</ID>
                  <Description>"Armour of the Sporekeeper"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Druid_Spore_Magic_Leather_Armor

Item Description:
According to one story_ this armour was enriched by the cascading spores of a myconid sovereign_ its great fungal head shimmering and twinkling as it shook upon the material.
]]
local items = {
  "eb3a4744-26e4-404a-be65-c72bb17f5cfc"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>153</ID>
                  <Description>"Armour of Uninhibited Kushigo"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Monk_Magic_Armor

Item Description:
Long ago_ Kushigo was a warrior. Bedecked in an enormous set of plate steel_ its shoulder pauldrons fashioned like great antlered stags_ his arrival on a battlefield spelled doom for the enemy.____Yet this armour - so light and fine - speaks nothing to that legacy. 
]]
local items = {
  "ab7f13b8-3b3f-49be-8708-4d52b9690e45"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>154</ID>
                  <Description>"Astarion's Eccentric Clothes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Body_Astarion

Item Description:
Clearly no stranger to a needle and thread_ Astarion has embroidered the words of a poem on his shirt. It reads_ 'Lamentable is the autumn picker content with plums.'
]]
local items = {
  "b7392453-6569-4c24-9a1b-cbaea7cebac8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>155</ID>
                  <Description>"Barbarian Clothes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Barbarian

Item Description:
A rough combination of furs_ leathers_ and supple fabrics_ made for a life outside civilisation.
]]
local items = {
  "f6599c3f-cfcd-4721-9cc2-1df5d8ff0154"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>156</ID>
                  <Description>"Barkskin Armour"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Druid_Late_Hide_Armor_1

Item Description:
The bark motifs in this armour are like the boles of oak trees in a wood where the acorns slept long_ and grew proud.
]]
local items = {
  "a1d321be-ff4c-423a-bc50-bcad85a3a83a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>157</ID>
                  <Description>"Bhaalist Armour"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Bhaalist_Armor

Item Description:
Bhaal_ Lord of Murder_ was forced to walk the world as a mortal man during a period of history called the Time of Troubles. He was more vulnerable than he had ever been.____But Bhaal was cunning. He had contingencies in case he died. 
]]
local items = {
  "443b2caf-8d36-42cf-b389-d774229ed18c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>158</ID>
                  <Description>"Bided Time"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_CQCaster_GainArcaneChargeOnDamaged_Robe

Item Description:
Revenge is best served. Hot or cold makes no difference. 
]]
local items = {
  "9e8f0ce6-c344-47f9-bb99-202cdd2f7d73"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>159</ID>
                  <Description>"Blackguard's Greaves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OB_Paladin_DeathKnight_Boots

Item Description:
Clad on the desiccated feet of a death knight_ these boots have walked a long and terrible path. They strode through the tattered remains of their owner's oath. With every heavy footstep_ they have sounded pure fear into the hearts of men.
]]
local items = {
  "bc3c8375-bad5-4f02-b1f3-2261cea690aa"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>160</ID>
                  <Description>"Blackguard's Plate"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OB_Paladin_DeathKnight_Armor

Item Description:
To break one's oath is a dangerous game - it marks you as a faithless cur_ an exile without a cause. This armour is tempered by an age of rocks_ blades_ and persecution turned against it - and is buffed by the immutable_ unbindable will of its wearer. 
]]
local items = {
  "1109da0a-2d12-4ed3-a93a-fe369023ead3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>161</ID>
                  <Description>"Blazer of Benevolence"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Bard_TempHP_Armor

Item Description:
Even though the embroidered velvet won't help against a sharp blade_ wearing it fills you with self-assuredness.
]]
local items = {
  "947dbbe3-19e3-4b96-ba5a-14750f0acc29"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>162</ID>
                  <Description>"Bloodguzzler Garb"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Violence_LowHP_Violence_Clothes

Item Description:
No sooner does blood speck the armour than it's absorbed_ as if sustaining something within.
]]
local items = {
  "5fc2fcce-810d-47d2-824c-f6acf7b81a22"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>163</ID>
                  <Description>"Bonespike Boots"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Barbarian_BoneSpike_Shoes

Item Description:
Armour designed for the aerodynamic leaping and striking and general screaming of your standard barbarian. 
]]
local items = {
  "23806fd3-f5f6-4ff3-826d-054afe03b7c0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>164</ID>
                  <Description>"Bonespike Garb"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Barbarian_BoneSpike_Armor

Item Description:
Sharp juts and knobbly nodules of bone stud this armour_ as if something ancient sank its teeth deep into the leather and they got stuck there.
]]
local items = {
  "7cca51a5-bfa6-4c65-b2d9-ef0167762a19"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>165</ID>
                  <Description>"Bonespike Garb"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BarbMonk_Cloth_B_1

Item Description:
Sharp juts and knobbly nodules of bone stud this armour_ as if something ancient sank its teeth deep into the leather and they got stuck there.
]]
local items = {
  "7cca51a5-bfa6-4c65-b2d9-ef0167762a19"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>166</ID>
                  <Description>"Boots of Persistence"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_EndGame_Metal_Boots

Item Description:
''If I had a copper for all the adventurin folk I seen gutted or cut up_ or clawed like they was made of wet paper_ just cause they couldn't move quick enough when speed might have saved em... well_ I'd be suckin good brandy from crystal rather than this fuckin swill.'' - Overheard in a tavern in Baldur's Gate.
]]
local items = {
  "f3d8ff49-eaac-4c10-9421-3fd2180c7b39"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>167</ID>
                  <Description>"Boots of Very Fast Blinking"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
WYR_Circus_TeleportBoots

Item Description:
You can cast _LSTag Type__Spell_ Tooltip__Target_MistyStep__Misty Step_ with the caveat that you will teleport leaving your clothes behind.
]]
local items = {
  "480a8519-e375-4ce0-ae0a-513bc9d39820"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>168</ID>
                  <Description>"Breastplate"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Breastplate_Body

Item Description:
This standard-sized breastplate is lined with thick padding meant to cushion the wearer and deflect blows from assailants. The uniform squares of the padding suggest a mathematically-minded crafter.
]]
local items = {
  "4814825e-23ee-41ed-9784-d9963434150d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>169</ID>
                  <Description>"Breastplate _1"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Breastplate_Body_1

Item Description:
This breastplate is crafted in the specialty style of a mysterious armourer in Amn known only as 'The Tailor.'
]]
local items = {
  "ad912cef-8bfb-4bf3-98f0-f2c5e3b45915"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>170</ID>
                  <Description>"Breastplate _2"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Breastplate_Body_2

Item Description:
This garment's previous owner left a few minor personal effects in its inner breast pocket_ a scrap of sassafrass_ a short bit of thread_ and half a peppermint.
]]
local items = {
  "4842e9ec-95ba-4168-81a9-f184b08d6c2c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>171</ID>
                  <Description>"Cerebral Citadel Armour "</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Illithid_Carapace_Armor

Item Description:
The little tentacle engravings are a nice touch. 
]]
local items = {
  "ee3c78be-d33b-4d1b-b433-2634a39f50aa"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>172</ID>
                  <Description>"Chain Mail"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ChainMail_Body

Item Description:
The tight weave of chains in this armour chimes like wind through leaves.
]]
local items = {
  "b973e3cb-c18d-4514-ba01-ebcabbf26968"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>173</ID>
                  <Description>"Chain Mail _1"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ChainMail_Body_1

Item Description:
Fine fabric obscures the bulk of this chain mail_ allowing its wearer to mix in polite society while protecting them from unexpected assailants.
]]
local items = {
  "ed7a8055-cf36-42c8-ad77-15a80d19744f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>174</ID>
                  <Description>"Chain Mail _2"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ChainMail_Body_2

Item Description:
Made from thick_ strong chains loosely-fitted_ this armour hangs more heavily than some but protects its wearer with an impenetrable weave of metal.
]]
local items = {
  "d8120501-e5bb-4eb1-b5cf-120b8bfd2ab2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>175</ID>
                  <Description>"Chain of Liberation"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Mobility_SprintForMomentum_ChainShirt

Item Description:
The linked rings crackle with energy just waiting to be released.
]]
local items = {
  "88107048-2ec3-4e48-9670-4d4dd2ca0ff9"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>176</ID>
                  <Description>"Chain Shirt"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ChainShirt_Body_Shar

Item Description:
While the stitching on the shirt is rushed and uneven_ the chain mail is sturdy_ and the garment is decorated with an obsidian disk that seems to swallow all light.
]]
local items = {
  "0c0c1031-4a04-4e8f-ba8a-8aafa2a396e8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>177</ID>
                  <Description>"Chain Shirt"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ChainShirt_Body

Item Description:
Tight chains protect the wearer from sharp weapons_ while fabric padding protects the skin from cold metal.
]]
local items = {
  "921cd1e1-c39c-44c3-a090-b667322af7f8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>178</ID>
                  <Description>"Chain Shirt _1"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ChainShirt_Body_1

Item Description:
The intricate embroidery on the linen panel of this armour indicates the nobility of its previous owner.
]]
local items = {
  "eac652ed-ecf7-4505-bf64-0fec29e7d677"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>179</ID>
                  <Description>"Chain Shirt _2"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ChainShirt_Body_2

Item Description:
This mail's impossibly fine_ close joining indicates the work of gnomish fingers.
]]
local items = {
  "461f1cbe-6d0d-40ee-8bf6-8a68e0570d6f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>180</ID>
                  <Description>"Cleverly Cobbled Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shoes_D

Item Description:

]]
local items = {
  "85d78eab-e4ad-4f56-bfb3-87c6368f5b17"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>181</ID>
                  <Description>"Cloth Armour"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Cloth_Body_1

Item Description:

]]
local items = {
  "427d12a3-dff2-4b59-978e-8e55daaed4ce"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>182</ID>
                  <Description>"Cloth of Authority"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Gortash_Cloth

Item Description:
One can hardly be called a lord if they aren't dressed as such. A cursory glance at Gorash's finery would reveal intricate garb - a closer look would reveal a maddening attention to even the most minute details of the filigree. 
]]
local items = {
  "8b868b78-320b-43d0-b5a8-5e52669fc11e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>183</ID>
                  <Description>"Damaged Chain Shirt"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ChainShirt_Body_Destroyed

Item Description:
Your crash landing aboard the nautiloid has done serious damage to this garment.
]]
local items = {
  "82f4d3d6-c2c8-47ee-8fcb-7b093deff6e9"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>184</ID>
                  <Description>"Damaged Githyanki Half Plate"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_HalfPlate_Body_Githyanki_Destroyed

Item Description:
Scorched_ stained_ and dented_ this suit of githyanki armour has survived the unthinkable - and still endured.
]]
local items = {
  "c3aaffa5-096d-4d4c-87b6-a9298d306cb6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>185</ID>
                  <Description>"Damaged Leather Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Leather_Body_Destroyed

Item Description:
Scorch marks_ acid burns_ and jagged tears indicate this leather armour has been to the Hells and back.
]]
local items = {
  "91d8e57d-4c73-47ca-87dc-252ab0a3aa95"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>186</ID>
                  <Description>"Damaged Padded Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Padded_Body_Destroyed

Item Description:
Scorching fire_ jagged metallic edges_ and destructive poison have turned this padded armour into a rag.
]]
local items = {
  "e8609f47-b67c-4020-850d-58f7897593e0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>187</ID>
                  <Description>"Damaged Robe"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Robe_Destroyed

Item Description:
Tattered and stained_ this robe has seen better days.
]]
local items = {
  "14c13bc9-ab35-4cab-a220-23a61cd43845"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>188</ID>
                  <Description>"Damaged Scale Mail"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ScaleMail_Body_Destroyed

Item Description:
With many broken and missing scales_ this armour offers little in the way of protection.
]]
local items = {
  "ddf6982a-72d4-44db-a152-4dd2b816e836"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>189</ID>
                  <Description>"Dark Justiciar Boots"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_SHA_DarkJusticiar_Boots

Item Description:

]]
local items = {
  "e33850ba-f697-40f5-abec-2951077f2cef"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>190</ID>
                  <Description>"Dark Justiciar Half-Plate"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_DarkJusticiar_HalfPlate

Item Description:
Shar's aspect winds its way through the patterns and pauldrons of this half plate_ and any light cast nearby seems to almost quiver away from it_ afraid. For even the light knows that the clank of this armour is swiftly followed by a Dark Justiciar's silent blade. 
]]
local items = {
  "20318684-a35f-4830-b566-41ecd379893a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>191</ID>
                  <Description>"Dark Justiciar Half-Plate"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_DarkJusticiarArmor_HalfPlate

Item Description:
Shar's aspect winds its way through the patterns and pauldrons of this half plate_ and any light cast nearby seems to almost quiver away from it_ afraid. For even the light knows that the clank of this armour is swiftly followed by a Dark Justiciar's silent blade. 
]]
local items = {
  "742d43ff-b74d-4cbe-9554-51773bbccdc2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>192</ID>
                  <Description>"Dark Justiciar Mail"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_Justiciar_Chainshirt_Magic

Item Description:
Though well-preserved_ the armour's gleam is somewhat muted - as if half-shadowed_ even in brightest day.
]]
local items = {
  "14c4c9a8-9d2b-4b15-a6b6-a24852092c5a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>193</ID>
                  <Description>"Debtor's Attire"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_ARM_Debtor_Body

Item Description:
This attire disguises you as a poor soul indebted to Raphael - other debtors in his thrall will not be hostile to you.
]]
local items = {
  "30c5721d-bdc3-4150-8cd1-d99197eb4870"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>194</ID>
                  <Description>"Debtor's Attire"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_ARM_DebtorAlt_Body

Item Description:
This attire disguises you as a poor soul indebted to Raphael - other debtors in his thrall will not be hostile to you.
]]
local items = {
  "6f7d15a8-9bcb-45de-94c5-8c77424aaf42"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>195</ID>
                  <Description>"Dreamsome Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_Daisy_Boots

Item Description:
Scratched in places_ scorched in others_ and worn thin at the heel_ these boots bear the indelible marks of experience.
]]
local items = {
  "216f0362-f77b-420c-84cb-d84853aa173d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>196</ID>
                  <Description>"Drow Leather Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Leather_Body_Drow

Item Description:

]]
local items = {
  "181383f0-c2db-4a15-9786-7d5a396dbfdd"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>197</ID>
                  <Description>"Drow Leather Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
GOB_DrowCommander_Leather_Boots

Item Description:
Shallow_ web-like lines have been tooled into these boiled leather boots.
]]
local items = {
  "b1bf7df1-94e0-43b1-b083-e55eaafde2ae"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>198</ID>
                  <Description>"Drow Studded Leather Armour"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_StuddedLeather_Body_Drow

Item Description:
Tracings of glossy black spider-web mark this drow-made armour. It is supple_ but strong - and made to blend in with the dark caves and crevices of the Underdark.
]]
local items = {
  "cab3455f-59fe-42be-8dcd-7cd61149389a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>199</ID>
                  <Description>"Druid Leather Armour"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Druid_Magic_Leather_Armor

Item Description:

]]
local items = {
  "10338c7e-39c8-44b3-a0a2-2a76af453718"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>200</ID>
                  <Description>"Druid Leather Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Leather_Body_Druid

Item Description:
Dark_ messy stains line the armholes of the well-used leather breastplate.
]]
local items = {
  "b8468a39-a5ff-4de0-85be-a8883a479628"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>201</ID>
                  <Description>"Drunken Cloth"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Drunken_Cloth

Item Description:
Long ago_ Kushigo was a warrior. Bedecked in enormous_ stag-antlered plate_ his arrival spelled doom for the enemy. This flimsy cloth speaks nothing to that legacy.
]]
local items = {
  "652c5cb5-b03b-4bd4-8993-3d4f07ed215c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>202</ID>
                  <Description>"Dwarven Splintmail"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Splint_Body_Dwarven

Item Description:

]]
local items = {
  "ed0e4aee-affe-4d80-bf09-086d4515fc2f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>203</ID>
                  <Description>"Elegant Robe"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_Daisy_Plate

Item Description:
A draped robe made with lightweight fabric. Made for seduction rather than battle.
]]
local items = {
  "aa0917ea-5f66-4a22-97de-654228484128"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>204</ID>
                  <Description>"Elegant Studded Leather"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_EndGame_StuddedLeather_Armor

Item Description:
After she returned from her confinement at the hands of the demon prince Graz'zt_ the Goddess of prosperity_ Waukeen_ appointed a champion_ who donned this studded leather and took up arms against those who had schismed and corrupted her church in the interim. 
]]
local items = {
  "8472235c-8ced-4db3-825f-322eace0f34d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>205</ID>
                  <Description>"Elven Chain"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_PHB_ElvenChain_Armor

Item Description:
The weight of the interwoven steel rings is offset by clever elven craftsmanship - rustling against your undershirt_ the mail feels like you're wearing a cloud. 
]]
local items = {
  "391bccb7-8199-41e3-9aa3-261def2ebf26"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>206</ID>
                  <Description>"Emblazoned Plate of the Marshal"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_Ravengard_Plate

Item Description:
The tabard adorning this perfectly-kept platemail denotes the status of its wearer - Marshal of the Flaming Fist and ultimate military authority in Baldur's Gate. 
]]
local items = {
  "637f2b2f-9947-406e-b942-8b3b884172c0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>207</ID>
                  <Description>"Enraging Heart Garb"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Barbarian_Magic_Armor_1

Item Description:
Created by a designer and an enchanter who were going through a messy divorce at the time. As such the armour is filled with passive-aggressive rage.
]]
local items = {
  "3a213e92-1714-4f11-9726-ca762943d2cc"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>208</ID>
                  <Description>"Firm-Soled Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Boots_Leather_D

Item Description:

]]
local items = {
  "38f78b0a-4f55-406f-8b28-7c0ec8220905"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>209</ID>
                  <Description>"Flame Enamelled Armour "</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_FlamingFist_Flame_Armor

Item Description:
The air around this armour shimmers_ oven-hot. From the seams of the armour you can hear a red-tinted rumble_ like coals digesting in a furnace. 
]]
local items = {
  "12a8f326-cc3a-4d21-92c2-f3a6d0fcaee3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>210</ID>
                  <Description>"Gale's Austere Clothes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Body_Gale

Item Description:
Somehow Gale has managed to make his clothes smell like a library - perhaps through thaumaturgy_ or through a passion to books most people reserve for sexual partners.
]]
local items = {
  "c56bbf29-2315-415e-a488-fada851828ea"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>211</ID>
                  <Description>"Garb of The Land and Sky"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Monk_Magic_Armor_1

Item Description:
Long ago_ Kushigo was a warrior. Bedecked in an enormous set of plate steel_ its shoulder pauldrons fashioned like great antlered stags_ his arrival on a battlefield spelled doom for the enemy.____Yet this armour - so light and fine - speaks nothing to that legacy. 
]]
local items = {
  "dbe75b4c-d23a-4a19-b630-34de519750c6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>212</ID>
                  <Description>"Gargoyle Boots"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BG_Gargoyle_Boots

Item Description:
These boots are heavy and slow to step in - perhaps due to the gargoyle spirit reportedly trapped within. While that legend's truth is debatable_ the protection these boots offer against toe-stubbing is not.
]]
local items = {
  "b22318a2-5c8d-4886-b181-6602f3e4e535"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>213</ID>
                  <Description>"Githyanki Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Boots_Metal_Githyanki

Item Description:
Lavishly decorated boots_ crafted on far-away planes from stolen metals and poached rubies.
]]
local items = {
  "319c625a-cfb7-4e44-ac3f-370a00c0d4ef"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>214</ID>
                  <Description>"Githyanki Half Plate"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_HalfPlate_Body_Githyanki

Item Description:
This armour was forged to Vlaakith's standards under the exacting eye of a githyanki smith.
]]
local items = {
  "38c63f49-3c50-46d0-90d3-68b247542c36"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>215</ID>
                  <Description>"Grovetender Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Boots_Leather_Druid

Item Description:
These boots are well-maintained and clean_ though their soles are thin from wear.
]]
local items = {
  "7de51e0b-cb9d-4279-9bc5-b0d85dce4cf6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>216</ID>
                  <Description>"Half Plate Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_HalfPlate_FlamingFist

Item Description:
This heavy_ resilient breastplate is reinforced by a padded gambeson to protect soldiers from hip to neck.
]]
local items = {
  "4aa373b2-0cb7-4b69-af38-0d1352236a1f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>217</ID>
                  <Description>"Half Plate Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_HalfPlate_Body

Item Description:
This heavy_ resilient breastplate is reinforced by a padded gambeson to protect soldiers from hip to neck.
]]
local items = {
  "34a71679-0ab5-4fd4-bba8-d6ad341ee490"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>218</ID>
                  <Description>"Half Plate Armour _1"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_HalfPlate_Body_1

Item Description:
Heraldic runes are sewn into the padding of this armour_ offering a gift of protection to whoever dons it.
]]
local items = {
  "c3407c8d-0180-4f5a-9530-e1167e7290b3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>219</ID>
                  <Description>"Half Plate Armour _2"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_HalfPlate_Body_2

Item Description:
This breastplate is far tougher than it appears_ taking blows from common weapons without suffering so much as a scratch.
]]
local items = {
  "15338da1-c4f8-4b43-912c-c14e7d9a8579"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>220</ID>
                  <Description>"Halsin's Grove Garments"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Body_Halsin

Item Description:
Feeling the fabric_ the strangest feeling occurs_ your thumbs brush sun-dappled leaves_ skim the water of a creek_ tangle in the fur of some panting animal_ heat and breath.
]]
local items = {
  "dc74db6c-14b2-44fa-8415-0dd1194e90e2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>221</ID>
                  <Description>"Hardily Constructed Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shoes_A

Item Description:

]]
local items = {
  "9c16f3c5-f25a-49ee-b24c-7e974334939f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>222</ID>
                  <Description>"Heavy Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Boots_Leather_F

Item Description:

]]
local items = {
  "d7219371-2f32-4675-b805-a0c9af19c1ff"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>223</ID>
                  <Description>"Hedge Wanderer Armour"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Druid_Magic_Hide_Armor

Item Description:
This simple cured goat hide was enchanted by a travelling druid. A goatherd once helped her negotiate a strange maze of hedges_ so she blessed all his goats in thanks.
]]
local items = {
  "9cf8e8a9-16ee-4186-88b7-bdfcaa734e61"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>224</ID>
                  <Description>"Helldusk Armour"</Description>
                  <Color>4080FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Infernal_Plate_Armor

Item Description:
Carixim_ soul-stuffed forgemaster of hellish Avernus_ hammers away ceaselessly at new creations. Questions of morality and destiny do not concern him. Conscience is for his betters. He works with cheer_ his swollen skin moaning soothingly. 
]]
local items = {
  "7ae705fd-1cfd-4482-a584-d2e68f9c1262"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>225</ID>
                  <Description>"Hellgloom Armour "</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Lesser_Infernal_Plate_Armor

Item Description:
'I learned so much from Carixim. All sorts of forgecraft that... S-sorry. Just when I think of him_ and the whimpers those people inside him made... I don't know. Anyway_ it was worth it. Worth it to be the best.' - Overheard from the smith Dammon 
]]
local items = {
  "d76dd47b-e1bf-4e30-b366-6069d9eb9e22"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>226</ID>
                  <Description>"Hide Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Hide_Body

Item Description:
Constructed from carefully-chosen animal hides tanned_ hardened and varnished to a gleaming finish.
]]
local items = {
  "b78fabcc-d2df-4c74-b5d4-1eda6dc4c071"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>227</ID>
                  <Description>"Hide Armour _1"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Hide_Body_1

Item Description:
Tight stitches bind panels of hard leather into a formfitting carapace that moves like a second skin.
]]
local items = {
  "94ed8ec8-93a4-4a8c-bc47-55cb3faae7c0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>228</ID>
                  <Description>"Hide Armour _2"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Hide_Body_2

Item Description:
This hide armour_ soft to the touch but hard as a zaratan's hide_ is stitched together of narrow panels allowing for the wearer's ease of movement and comfort.
]]
local items = {
  "fd4ab5b0-67e6-4a8b-8745-2003f2f5ada3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>229</ID>
                  <Description>"Homely Clothes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Body

Item Description:
Perfect for ambling around a campsite_ enjoying the starlight and good conversation.
]]
local items = {
  "f369f4fa-2da7-4693-a147-16cfaf02bca5"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>230</ID>
                  <Description>"Humbly Cobbled Shoes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shoes_G

Item Description:

]]
local items = {
  "6c194c79-51c7-4cbd-a5b1-ef0d06b7c559"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>231</ID>
                  <Description>"Icebite Robe"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Frost_GenerateFrostOnDamage_Robe

Item Description:
Delicate ferns of frost glitter in the lining of this robe. 
]]
local items = {
  "50faa322-b43d-475a-91b7-25d390ac3ef6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>232</ID>
                  <Description>"Infernal Robe"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ORI_Wyll_Infernal_Robe

Item Description:
Presumably Mizora was not always a sensuous and manipulative benefactor of troubled souls like Wyll. Negotiating the hierarchies of hell result in changes of form - but was she ever less beautiful_ less erudite_ less willful_
]]
local items = {
  "b2de6dee-50c1-45b9-b35d-7d5e8d53135f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>233</ID>
                  <Description>"Ironwood Breastplate"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Druid_Ironwood_Armor

Item Description:
This armour's material has the coarse texture of a bramble patch_ and the fragrance of a rose garden in springtime. 
]]
local items = {
  "e17c0a45-e064-4a9f-8bcb-ba273440008d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>234</ID>
                  <Description>"Jaheira's Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_Jaheira_Boots

Item Description:
As well travelled as any set of boots on Toril.
]]
local items = {
  "edcc4d57-ba17-4470-ad78-bc2b967b524c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>235</ID>
                  <Description>"Jaheira's Respectable Clothes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Body_Jaheira

Item Description:
Though humble in appearance_ these clothes bear little hints at Jaheira's fashionability. Minimalism offset by the subtle hues shining brighter at night and softening in sunbeams.
]]
local items = {
  "0d0d9c0f-e9aa-4ba4-a0a9-1a0b7b7069ca"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>236</ID>
                  <Description>"Karlach's Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_Karlach_Shoes

Item Description:
Warmed by occasionally wiggling infernal toes.
]]
local items = {
  "20f935fc-c55b-4841-9f14-1bd71c4bf3c8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>237</ID>
                  <Description>"Karlach's Infernal Trousers"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Body_Karlach

Item Description:
Torn and hell-scented_ these trousers have seen a good deal of action - though not perhaps the sort Karlach might prefer.
]]
local items = {
  "5c79e518-2c59-41c5-84a7-d43a58e76d09"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>238</ID>
                  <Description>"Lae'zel's Clothes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Body_Laezel

Item Description:
As exciting as a trade deposition and as functional as a brick.
]]
local items = {
  "54de4a07-c57c-421e-912c-7e8bd93ca0c4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>239</ID>
                  <Description>"Leather Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Leather_Body_Rogue

Item Description:
Dark_ messy stains line the armholes of the well-used leather breastplate.
]]
local items = {
  "4c4396db-fa4a-4541-9b2a-23e43211dde7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>240</ID>
                  <Description>"Leather Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Leather_Body

Item Description:
Dark_ messy stains line the armholes of the well-used leather breastplate.
]]
local items = {
  "02ae5d88-8044-43df-8363-02a2900776db"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>241</ID>
                  <Description>"Leather Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Leather_FlamingFist

Item Description:
Dark_ messy stains line the armholes of the well-used leather breastplate.
]]
local items = {
  "738b0d75-74ce-466b-864d-c5f0f764842b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>242</ID>
                  <Description>"Leather Armour _1"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Leather_Body_1

Item Description:
This well-tailored leather tunic is reinforced by geometric quilting.
]]
local items = {
  "90a79e46-e327-41f4-a349-8e4dd70b1892"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>243</ID>
                  <Description>"Leather Armour _2"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Leather_Body_2

Item Description:
This armour is stitched together with thick_ metal-lined cord_ reinforcing it at the seams.
]]
local items = {
  "ac71c753-c207-465c-b28b-c10f95ed0745"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>244</ID>
                  <Description>"Leather Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Boots_Leather

Item Description:
These boots are well-maintained and clean_ though their soles are thin from wear.
]]
local items = {
  "969bab00-b269-46a5-a7e9-dd4887814719"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>245</ID>
                  <Description>"Leather Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shoes_Barbarian

Item Description:
Warm_ supple boots_ made to cross the roughest of terrains with ease.
]]
local items = {
  "2577a332-8ad2-4e54-b52b-f4f7cc5823a1"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>246</ID>
                  <Description>"Luminous Armour "</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Radiant_RadiatingOrb_Armor

Item Description:
Many an adventurer has found themselves swallowed up by the dark throat of some nameless dungeon_ aching for a glimpse of light. 
]]
local items = {
  "a2cbaf4f-3eb8-4362-9f2e-d325a0d47a36"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>247</ID>
                  <Description>"Metallic Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Boots_Metal

Item Description:
Scratched in places_ scorched in others_ and worn thin at the heel_ these boots bear the indelible marks of experience.
]]
local items = {
  "689e8d3e-b79b-417b-8cd2-9d08b2f5e618"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>248</ID>
                  <Description>"Minsc's Fantastical Relaxation Garb"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Body_Minsc

Item Description:
To the metaphorical eye_ an absolute fantasia of an outfit_ declaiming Minsc as a style icon without equal. To the literal eye_ this is a belt-buckle shirt_pants combo.
]]
local items = {
  "42ff9d36-849d-4777-968c-8cf9ca7d8027"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>249</ID>
                  <Description>"Minthara's At-Ease Clothes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Body_Minthara

Item Description:
While there is little of the spidery Goddess Lolth's influence in this outfit_ there is something of spiney inflexible culture of the drow in it.
]]
local items = {
  "29a31736-6f9d-46ef-880d-ac3157187202"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>250</ID>
                  <Description>"Monastic Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shoes_Monk

Item Description:

]]
local items = {
  "2c49ed8d-6ca0-45a9-8d2e-a93fe29d3fe2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>251</ID>
                  <Description>"Monastic Robes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Monk

Item Description:
This garment's pristine condition despite years of martial training speaks to a supremely disciplined owner.
]]
local items = {
  "063ea449-a0ba-4749-b9b5-869b2c0ebf92"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>252</ID>
                  <Description>"Moon Devotion Robe"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Selunite_Isobel_Robe

Item Description:
A memory from her childhood_ a warm bed. Through the cracked window_ she could see the moonlight cupping the plums in the tree as if in silver hands. The name of the goddess Sel_ne came to her_ and never left.
]]
local items = {
  "3b498702-834f-4989-a9d1-c0f3b38fbcfc"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>253</ID>
                  <Description>"Oathbreaker Knight Armour"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Oathbreaker_Platemail

Item Description:

]]
local items = {
  "c67137ac-4ece-4652-aaab-14615aa25b20"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>254</ID>
                  <Description>"Obsidian Laced Robe "</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Heat_Fire_Robe

Item Description:
The inside of this robe is dark and faceted like volcanic glass_ yet the material is light and soft. Against the skin_ it also produces a heat like a toasty fire on a day of snow. 
]]
local items = {
  "63df7557-efe6-4e11-8a0d-10ab211ac1b8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>255</ID>
                  <Description>"Padded Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_Astarion_StarterArmor

Item Description:
Despite the careful stitches_ the gold embroidery on this padded doublet is slowly unravelling.
]]
local items = {
  "397dbd19-efed-4507-85f9-66daebad5258"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>256</ID>
                  <Description>"Padded Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Padded_Body

Item Description:
A standard gambeson of quilted cloth. Good for catching blows_ but almost unbearably sweaty.
]]
local items = {
  "63cc7723-245d-4b62-b9e6-5a47283cf777"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257</ID>
                  <Description>"Padded Armour _1"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Padded_Body_1

Item Description:
The quilting threads running through this padded vest seem to gleam in the rising sun.
]]
local items = {
  "f5faa6c5-a43c-4edd-a77f-6e7536a7e683"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>258</ID>
                  <Description>"Padded Armour _2"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Padded_Body_2

Item Description:
A standard gambeson of quilted cloth. Good for catching blows_ but almost unbearably sweaty.
]]
local items = {
  "96613037-cbac-4f43-a39b-584e6f2629c7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>259</ID>
                  <Description>"Penumbral Armour"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Shadow_StealthBonusWhileObscured_Armor

Item Description:
One of the relics of Deep Duerra's rebellious children.____Kitted out though they were for escape_ the older siblings had a horrible time encouraging their younger brothers and sisters_ who at the crux were frightened of what their mother would do to them should they be caught. 
]]
local items = {
  "3ce4d5d2-3ed0-470e-8cea-bdac81a60583"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>260</ID>
                  <Description>"Plain Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Boots_Leather_C

Item Description:

]]
local items = {
  "c1f9f7af-cdb2-49f6-8459-521f2b9263cb"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>261</ID>
                  <Description>"Plate Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Plate_Body

Item Description:

]]
local items = {
  "95b4e2c4-759a-4d33-a2d1-4e0ee6ed4f29"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>262</ID>
                  <Description>"Plate Armour _1"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Plate_Body_1

Item Description:

]]
local items = {
  "dd905194-9a67-4c61-b26d-5b4da4725cde"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>263</ID>
                  <Description>"Plate Armour _2"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Plate_Body_2

Item Description:

]]
local items = {
  "fdb8ce53-51dc-4ccb-9e29-d1d99040e60b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>264</ID>
                  <Description>"Poisoner's Robe"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
FOR_SpiderQueen_Robe

Item Description:
Found in the Spider Queen's stomach_ this robe emanates a sour smell and stings to the touch.
]]
local items = {
  "0db056b3-23d1-4873-883d-482b5d9337b5"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>265</ID>
                  <Description>"Potent Robe"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_CharismaCaster_Robe

Item Description:
This robe is a difficult look to pull off unless one is blessed with an otherworldly charisma.
]]
local items = {
  "1e64badf-4898-4169-9b02-3910518dc73d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>266</ID>
                  <Description>"Psionic Ward Armour "</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Githborn_MagicEating_HalfPlate

Item Description:
After all that was done to them at the illithids' caprice_ it is little wonder that the gith would construct armaments fit for combating their psionic might.
]]
local items = {
  "f601bac2-16a7-4da0-854a-ae4132ca448f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>267</ID>
                  <Description>"Psychic Feedback Armour"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Psychic_PsychicFeedback_Armor

Item Description:

]]
local items = {
  "38fe10d2-720a-4576-a8a7-254646e8f568"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>268</ID>
                  <Description>"Quite Fashionable Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shoes_H

Item Description:

]]
local items = {
  "127d5d89-d6ab-4e4a-b6fe-a3586e6d7020"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>269</ID>
                  <Description>"Reaper's Embrace"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MOO_Ketheric_Armor

Item Description:
Heavy steel bones and teeth enclose the armour's chest and neck like a grotesque exoskeleton that both swallows and protects the wearer.
]]
local items = {
  "53b3e771-5835-4703-8845-28169b836b8c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>270</ID>
                  <Description>"Ring Mail Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_RingMail_Body

Item Description:

]]
local items = {
  "e3a5099a-397a-4bbc-932c-cd0a00043b79"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>271</ID>
                  <Description>"Ring Mail Armour _1"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_RingMail_Body_1

Item Description:

]]
local items = {
  "4837915c-080b-491f-813e-be5a71571a17"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>272</ID>
                  <Description>"Ring Mail Armour _2"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_RingMail_Body_2

Item Description:

]]
local items = {
  "339c2d50-af1b-45d4-af96-cf2d27e1e11d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>273</ID>
                  <Description>"Rippling Force Mail"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ZOC_ForceConduit_ChainMail

Item Description:
Dents_ notches_ and nicks add character to each ring of this mail - yet each blemish also speaks to those who tasted magical vengeance on the armour's behalf.
]]
local items = {
  "b2530a6b-1235-4f5f-b61c-d174a980bc0b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>274</ID>
                  <Description>"Robe"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Robe_Body_2

Item Description:
Crafted with care_ this robe will protect you from the elements. It won't do much against a sword's thrust_ though.
]]
local items = {
  "467cca20-42bb-45cd-8eac-6ed49bbc2707"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>275</ID>
                  <Description>"Robe of Exquisite Focus"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfArcanicAssault_Robe

Item Description:
This robe once belonged to one of the great wizard Tenser's lecturers. While in university_ Tenser used to practise spells on this robe_ sometimes resulting in wonderful arcane discovery.
]]
local items = {
  "1f038181-a534-434b-b447-7c4084636cc3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>276</ID>
                  <Description>"Robe of Spell Resistance"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfSpellResistance_Robe

Item Description:
Handed out to all students during orientation at the arcane universities of the world. However_ a bit of enchanted cloth is a meagre defence against one's classmates.
]]
local items = {
  "c3309d8f-8cff-4418-b064-bca8bd77700c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>277</ID>
                  <Description>"Robe of Summer"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_RobeOfSummer

Item Description:
This robe's thin fabric is pleasantly warm to the touch.
]]
local items = {
  "ffed890a-69fe-4798-8c71-1bd3b72369bc"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>278</ID>
                  <Description>"Robe of Supreme Defences"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfArcanicDefense_Robe

Item Description:
Long ago_ the young wizard Bigby noticed his friend Tenser spending a lot of time with his robe. One of nature's pranksters_ Bigby sent his dog_ Bigboy_ to savage the garment. The ensuing struggle between canine and nude wizard was brutal_ and eventually led to Tenser designing more durable robes like this one. 
]]
local items = {
  "f3e90ffd-1559-4915-8829-740f55741c92"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>279</ID>
                  <Description>"Robe of the Weave"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_EndGameCaster_Robe

Item Description:
Earnest little Edith Cluckle was a small girl when she asked to be the great wizard Otiluke's apprentice. He scoffed at her_ but was quickly abashed when Mystra herself endowed Edith with this very cloak.
]]
local items = {
  "56906f41-61a3-4c23-aa46-2295e08d9add"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>280</ID>
                  <Description>"Robust Chain Shirt"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LowHP_CounterOnDamage_ChainShirt

Item Description:
A multitude of names are embroidered on the inside collar - the lives of those this shirt has saved. 
]]
local items = {
  "81cdbea7-3cd5-44a5-baa7-852c930bdf7b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>281</ID>
                  <Description>"Sarevok's Wretched Armour"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_ARM_Sarevok_Armor

Item Description:
This armour drips with dark ambition - the ambition of a failed godchild_ Sarevok_ spawn of Bhaal. Sarevok has not been remembered fondly by most historians_ who almost unanimously agree that he had the general disposition of a sledgehammer.
]]
local items = {
  "935f9927-2df0-4a8d-a831-b7cb5bbbcae3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>282</ID>
                  <Description>"Scale Mail"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ScaleMail_Body

Item Description:
A hefty shirt of scale_ offering some protection against the slings and arrows of the world.
]]
local items = {
  "ca0aafad-0f1e-4d76-8e3b-925397bb436b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>283</ID>
                  <Description>"Scale Mail"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ScaleMail_FlamingFist

Item Description:
A hefty shirt of scale_ offering some protection against the slings and arrows of the world.
]]
local items = {
  "0db0d565-db86-4213-befa-096c3bd09330"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>284</ID>
                  <Description>"Scale Mail _1"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ScaleMail_Body_1

Item Description:
The work of a skilled craftsman_ this scale shirt offers better protection than most.
]]
local items = {
  "dc748177-8590-4a99-a446-feccbd8d8eb4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>285</ID>
                  <Description>"Scale Mail _2"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ScaleMail_Body_2

Item Description:
Crafted by an artist's hands_ this exquisite scale shirt feels like it could turn aside any blade.
]]
local items = {
  "21f0dd84-6f02-4be9-8654-4cebd00dcbaf"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>286</ID>
                  <Description>"Scale Mail of Devotion"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ScaleMail_Body_Paladin_Devotion

Item Description:
Embroidered on the tabard are the tenets of devotion_ Honesty_ Courage_ Compassion_ Honour_ and Duty.
]]
local items = {
  "a455f1a1-acc6-4fce-a09e-111aceced98a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>287</ID>
                  <Description>"Scale Mail of the Ancients"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ScaleMail_Body_Paladin_Ancients

Item Description:
Four embroidered sentences decorate the tabard - the tenets of the ancients_ 'Kindle the Light. Shelter the Light. Preserve your own Light. Be the Light.'
]]
local items = {
  "e4daf34d-053c-471a-9171-92fa9b4db4af"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>288</ID>
                  <Description>"Scale Mail of Vengeance"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_ScaleMail_Body_Paladin_Vengeance

Item Description:
Gold embroidery covers the inside of the tabard_ right over the heart_ 'By any means necessary_ I will fight the Greater Evil_ showing no mercy for the wicked.'
]]
local items = {
  "bed301f2-cbb8-492f-b94a-597dfc119b3c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>289</ID>
                  <Description>"Scarlet Leather Armour"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Leather_1_Red

Item Description:
This well-tailored leather tunic is reinforced by geometric quilting.
]]
local items = {
  "2cbf1f6b-2607-4789-972f-f51e8c892a68"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>290</ID>
                  <Description>"Selunite Robe"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Robe_Selunite

Item Description:

]]
local items = {
  "204de787-46de-4d39-8fe0-2e080bf44a61"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>291</ID>
                  <Description>"Shadeclinger Armour "</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Harpers_ArmorOfShadows

Item Description:
Glutted with lone wolves and well-meaning scallywags_ the Harpers are not averse to shadows - quite the contrary. For many such individuals_ being swallowed in the dark throat of the night is the only method they know_ or care to know. 
]]
local items = {
  "2077fe9a-991d-4763-9b1a-fff843efd705"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>292</ID>
                  <Description>"Shadowheart's Clothes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Body_Shadowheart

Item Description:
A little bar of standard-issue cloister soap is tucked into this outfit. It smells like lime and religious fervour.
]]
local items = {
  "7062410b-439c-4f2f-bc48-1c16ab1ace20"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>293</ID>
                  <Description>"Sharpened Snare Cuirass"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Druid_Late_Hide_Armor_2

Item Description:
This magnificent hide was harvested from a rare mythological creature of the Feywild_ a cross between a unicorn and a stoat.
]]
local items = {
  "dee3077c-f9ef-4b28-8878-9b61a92ae601"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>294</ID>
                  <Description>"Shelter of Athkatla "</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LC_Lorroakan_Robe

Item Description:
Mantled in the sublime majesty of this cloak_ you magically sense Lorroakan's complex feelings for his homeland. Merriment and comfort go hand in hand with a jilted sentiment around his lovers and his family. And the old friends he thought of_ but would never see again.
]]
local items = {
  "09e5d397-bcf6-456a-be6e-e6b474721f1c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>295</ID>
                  <Description>"Simple Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shoes

Item Description:
Made of tough_ well-worn leather_ these boots have survived years of use_ and can survive many more.
]]
local items = {
  "97f37571-35e8-4cc8-8b0d-ff92d20ae0bb"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>296</ID>
                  <Description>"Simple Cloth"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Cloth_Body_2

Item Description:

]]
local items = {
  "0f2e59b9-c244-4e3c-836e-4f1e7b755b12"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>297</ID>
                  <Description>"Simple Jerkin"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Bard

Item Description:
Dark_ messy stains line the armholes of the well-used leather breastplate.
]]
local items = {
  "da345d08-2186-4e4a-857c-3fd6a104cec6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>298</ID>
                  <Description>"Simple Robe"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Robe_Body

Item Description:
Crafted with care_ this robe will protect you from the elements. It won't do much against a sword's thrust_ though.
]]
local items = {
  "168b9099-19f5-44e4-b55c-e64ceb60b71f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>299</ID>
                  <Description>"Simple Robe"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Robe_FlamingFist

Item Description:
Crafted with care_ this robe will protect you from the elements. It won't do much against a sword's thrust_ though.
]]
local items = {
  "3ae83f97-63f4-4dab-848f-0b8ac5c26649"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>300</ID>
                  <Description>"Simple Robe"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_GaleRobe

Item Description:
Crafted with care_ this robe will protect you from the elements. It won't do much against a sword's thrust_ though.
]]
local items = {
  "9410a467-3e49-4b14-b067-ea8ad6a0d431"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>301</ID>
                  <Description>"Simple Robe"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Robe_Body_1

Item Description:
Artfully crafted_ this robe is comfortable and elegant.
]]
local items = {
  "7ec40cde-4d96-4352-b93e-cdcab6383337"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>302</ID>
                  <Description>"Slippery Chain Shirt"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Healer_DisengageOnHeal_ChainShirt

Item Description:
Scored with slime and blood_ it seems this chain mail shirt couldn't save its previous owner. Although it may help the next.
]]
local items = {
  "e6e74ef9-1916-4c6b-a7bb-98fc83e71b62"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>303</ID>
                  <Description>"Smarmy Swaggerer Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Boots_Leather_B

Item Description:

]]
local items = {
  "2a5964b5-ee7c-4acf-9f40-f45a313b4755"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>304</ID>
                  <Description>"Soft and Comfortable Shoes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shoes_E

Item Description:

]]
local items = {
  "2134b8b6-fb84-4521-a154-b734c3cf6fd9"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>305</ID>
                  <Description>"Sorcerer Robe"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Robe_Body_Sorcerer_DraconicAncestry

Item Description:
Neat leather bands keep the trailing cloth secure. Singed sleeves are a liability for any spellcaster.
]]
local items = {
  "5ebd4ed6-17e6-4787-86d6-bbcaad8c6565"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>306</ID>
                  <Description>"Sorcerer Robe"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Robe_Body_Sorcerer_StormSorcery

Item Description:
Neat leather bands keep the trailing cloth secure. Singed sleeves are a liability for any spellcaster.
]]
local items = {
  "a81be340-0706-4201-bb4c-da52920574cf"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>307</ID>
                  <Description>"Sorcerer Robe"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Robe_Body_Sorcerer

Item Description:
Neat leather bands keep the trailing cloth secure. Singed sleeves are a liability for any spellcaster.
]]
local items = {
  "4ba55c6f-1302-4069-9e04-ff0bf2a7ede2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>308</ID>
                  <Description>"Spidersilk Armour"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
GOB_DrowCommander_Leather_Armor

Item Description:
Tracings of glossy black spider-web mark this drow-made armour. It is supple_ but strong - and made to blend in with the dark caves and crevices of the Underdark.
]]
local items = {
  "c0c0534c-b7fc-4d0b-a335-b8f4c548852d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>309</ID>
                  <Description>"Splint Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Splint_Body

Item Description:
Combining sturdy metal plates with flexible cloth_ this armour promises protection and mobility.
]]
local items = {
  "8ed82f7e-fdd4-4a9f-94b6-f256c599bfdd"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>310</ID>
                  <Description>"Splint Armour _1"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Splint_Body_1

Item Description:
Skilled hands crafted this armour_ reinforcing the metal plates while sacrificing none of the flexibility.
]]
local items = {
  "ecfb1364-b1a0-4d0e-b82a-0becd8c291fd"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>311</ID>
                  <Description>"Splint Armour _2"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Splint_Body_2

Item Description:
Wrought of an artisan's skill and passion_ this armour will turn aside all but the fiercest of blades.
]]
local items = {
  "2e8dfe32-cd6e-475b-98b5-5e2d9c42a7df"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>312</ID>
                  <Description>"Studded Leather Armour"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_StuddedLeather_Body

Item Description:
Shaped_ hardened_ and reinforced with metal studs_ leather is the armour of choice for those who value agility as much as protection.
]]
local items = {
  "19451420-13f6-444c-a15b-7abb6dde3f91"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>313</ID>
                  <Description>"Studded Leather Armour"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Druid_Magic_StuddedLeather_Armor

Item Description:

]]
local items = {
  "e3f2d3d9-8ec6-4033-911a-966630fd1344"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>314</ID>
                  <Description>"Studded Leather Armour _1"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_StuddedLeather_Body_1

Item Description:
This armour is strong enough to stop a dagger and light enough to escape whatever weapon follows it.
]]
local items = {
  "58d7927f-c6eb-4635-85b6-70265c621b3d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>315</ID>
                  <Description>"Studded Leather Armour _2"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_StuddedLeather_Body_2

Item Description:
Superbly shaped_ elegantly designed_ and tough as ring mail with none of the weight.
]]
local items = {
  "83603f36-d158-4a0e-b9c9-358413ba3a92"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>316</ID>
                  <Description>"Tasteful Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Shoes_Gale

Item Description:
Made of tough_ well-worn leather_ these boots have survived years of use_ and can survive many more.
]]
local items = {
  "cb28ea7d-2838-43e7-a807-11277c44facb"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>317</ID>
                  <Description>"Tasteful Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Shoes_Minthara

Item Description:
Made of tough_ well-worn leather_ these boots have survived years of use_ and can survive many more.
]]
local items = {
  "f107cc6a-3a6e-4a58-be16-fbe73b3f7ae8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>318</ID>
                  <Description>"Tasteful Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Shoes_Karlach

Item Description:
Made of tough_ well-worn leather_ these boots have survived years of use_ and can survive many more.
]]
local items = {
  "b8f42945-a42e-46cb-a424-3a0a5e97157a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>319</ID>
                  <Description>"Tasteful Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Shoes_Minsc

Item Description:
Made of tough_ well-worn leather_ these boots have survived years of use_ and can survive many more.
]]
local items = {
  "836e13ab-78a6-4ca3-ba8e-adc4c25205f1"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>320</ID>
                  <Description>"Tasteful Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Shoes_Halsin

Item Description:
Made of tough_ well-worn leather_ these boots have survived years of use_ and can survive many more.
]]
local items = {
  "42de5102-7a39-44d2-b1d8-645ec4d8b0ce"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>321</ID>
                  <Description>"Tasteful Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Shoes

Item Description:
Made of tough_ well-worn leather_ these boots have survived years of use_ and can survive many more.
]]
local items = {
  "6bb7a595-7646-48a9-9c44-d39f16c1c5cb"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>322</ID>
                  <Description>"Tasteful Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Shoes_Astarion

Item Description:
Made of tough_ well-worn leather_ these boots have survived years of use_ and can survive many more.
]]
local items = {
  "4700fad1-769e-4831-9b3f-4ead08c49cfa"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>323</ID>
                  <Description>"Tasteful Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Shoes_Jaheira

Item Description:
Made of tough_ well-worn leather_ these boots have survived years of use_ and can survive many more.
]]
local items = {
  "556de2bd-99a6-4d62-b78c-d4681ce5bdfa"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>324</ID>
                  <Description>"Tasteful Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Shoes_Shadowheart

Item Description:
Made of tough_ well-worn leather_ these boots have survived years of use_ and can survive many more.
]]
local items = {
  "e92e4dad-8e96-4f27-aacb-cc430df0bc75"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>325</ID>
                  <Description>"Tasteful Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Shoes_Laezel

Item Description:
Made of tough_ well-worn leather_ these boots have survived years of use_ and can survive many more.
]]
local items = {
  "212bf756-b237-4ede-9c67-e871fd60e788"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>326</ID>
                  <Description>"Tasteful Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Shoes_Wyll

Item Description:
Made of tough_ well-worn leather_ these boots have survived years of use_ and can survive many more.
]]
local items = {
  "b307af36-a2da-4c01-aac3-a31771edd407"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>327</ID>
                  <Description>"The Graceful Cloth"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BarbMonk_Cloth_A_1

Item Description:
A garment worn by one of three monks who fought together against Headless Serpent_ Secret Venom_ a gang in the port city of Nyanzaru. This was worn by Roahton Mobar_ whose stances were broad and strong.
]]
local items = {
  "b18ef236-44dc-43cd-8f6e-51ae785fae4d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>328</ID>
                  <Description>"The Graceful Cloth"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BarbMonk_Defensive_Cloth

Item Description:
A garment worn by one of three monks who fought together against Headless Serpent_ Secret Venom_ a gang in the port city of Nyanzaru. This was worn by Roahton Mobar_ whose stances were broad and strong.
]]
local items = {
  "b18ef236-44dc-43cd-8f6e-51ae785fae4d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>329</ID>
                  <Description>"The Jolty Vest"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ChargedLightning_Electrocute_Armor

Item Description:
Yrre the Sparkstruck got their nickname for both their obsession with lightning and the inventions they created_ which had the habit of electrocuting both Yrre and any poor observers that got too close.
]]
local items = {
  "1fda52bd-6983-49a3-ba52-6756327a5182"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>330</ID>
                  <Description>"The Mighty Cloth"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BarbMonk_Offensive_Cloth

Item Description:
A garment worn by one of three monks who fought together against Headless Serpent_ Secret Venom_ a gang in the port city of Nyanzaru. This was worn by Kimigha Poji_ whose stances were narrow and swift.
]]
local items = {
  "48215bcb-b4a2-48cb-bfbe-8b601e678032"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>331</ID>
                  <Description>"The Mighty Cloth"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BarbMonk_Cloth_A_1_Late

Item Description:
A garment worn by one of three monks who fought together against Headless Serpent_ Secret Venom_ a gang in the port city of Nyanzaru. This was worn by Kimigha Poji_ whose stances were narrow and swift.
]]
local items = {
  "48215bcb-b4a2-48cb-bfbe-8b601e678032"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>332</ID>
                  <Description>"The Oak Father's Embrace"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
FOR_OwlbearCubs_Armor

Item Description:
Embroidered with a simple maxim - 'Nature is the True State of the World' - these hides radiate a faint divine power.
]]
local items = {
  "9ab8b5fa-ba00-44d4-8c4a-50acd5fa62e3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>333</ID>
                  <Description>"The Protecty Sparkswall"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ChargedLightning_BonusAC_Robe

Item Description:
Yrre the Sparkstruck was raised in the Underdark_ so they weren't surprised that power begets envy_ and envy begets violence. They were prepared.
]]
local items = {
  "f28c3264-8cdb-46c1-800f-a47a01e49efc"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>334</ID>
                  <Description>"Thin-Soled Shoes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shoes_C

Item Description:

]]
local items = {
  "10e07ff1-5586-44fb-b437-31db1f7748ec"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>335</ID>
                  <Description>"Tidy Slender Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Boots_Leather_E

Item Description:

]]
local items = {
  "39eb6810-3cb9-4ddb-966a-ddd68b93e62c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>336</ID>
                  <Description>"Torment Drinker Armour"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Critical_BolsteringCritical_Armor

Item Description:
Timid_ god-fearing Cat Burroughs was dizzyingly happy when an angel courted her one summer. But in the autumn_ when he shamefacedly revealed he was not an angel but an incubus of the Hells_ Cat flew into a rage_ slew him_ and fashioned this armour from his wings and still-warm bones. 
]]
local items = {
  "a0dfac7c-c6ea-44f1-a12d-b5e67887ae8e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>337</ID>
                  <Description>"Tough Shoes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shoes_B

Item Description:

]]
local items = {
  "f649e46c-f1d1-4eb7-af73-368423951707"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>338</ID>
                  <Description>"Tough-Soled Shoes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shoes_F

Item Description:

]]
local items = {
  "524ca019-25b5-4769-a9e4-842505710e77"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>339</ID>
                  <Description>"Tyrannical Jackboots"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Gortash_Boots

Item Description:
Each step taken in Gortash's shoes is a reflection of the man himself_ quick_ sharp_ and terrible.
]]
local items = {
  "48408219-2ab9-4f08-8cb8-2d955fb3dae8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>340</ID>
                  <Description>"Unwanted Masterwork Greaves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_DevilsBlackmith_Boots

Item Description:
These boots are stamped with the marks of a cancelled commission. Despite their discarded fate_ they still hum with complex infernal arcana.
]]
local items = {
  "df040e30-b424-4a89-be1b-83ffd57eb5a1"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>341</ID>
                  <Description>"Unwanted Masterwork Greaves"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Boots_Metal_Karlach

Item Description:
These boots are stamped with the marks of a cancelled commission. Despite their discarded fate_ they still hum with complex infernal arcana.
]]
local items = {
  "df040e30-b424-4a89-be1b-83ffd57eb5a1"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>342</ID>
                  <Description>"Unwanted Masterwork Scalemail"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_DevilsBlackmith_ScaleMail

Item Description:
Nothing stings the master blacksmith more than a cancelled commission - not even molten iron. This mail is engraved with the mark of a devillish forgemaster_ as well as several curses stamped out in Infernal_ and hums with diabolic magic.
]]
local items = {
  "5ff8df3a-6924-4eb4-9d1a-9e87bd644bf7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>343</ID>
                  <Description>"Veil of the Morning"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_WYRM_UndeadProtector_Robe

Item Description:
Crafted from celestial feathers_ bottled sunlight_ and ink from the pages of sacred scripture_ it's a wonder the maker didn't hang cloves of garlic from this robe_ so anathema is it to the undead.
]]
local items = {
  "fe48d485-1563-4172-952c-7eb53d9faca8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>344</ID>
                  <Description>"Vest of Soul Rejuvenation"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BarbMonk_Cloth_A_2_Late

Item Description:
A garment worn by one of three monks who fought together against Headless Serpent_ Secret Venom_ a gang in the port city of Nyanzaru. This was worn by Strigga Morkoscavich_ whose stances moved fluidly_ flawlessly_ and who defanged the Serpent one blustery night.
]]
local items = {
  "1c69a87e-9136-4e13-90af-c0f02d0fc81f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>345</ID>
                  <Description>"Vest of Soul Rejuvenation"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Monk_SoulRejunevation_Armor

Item Description:
A garment worn by one of three monks who fought together against Headless Serpent_ Secret Venom_ a gang in the port city of Nyanzaru. This was worn by Strigga Morkoscavich_ whose stances moved fluidly_ flawlessly_ and who defanged the Serpent one blustery night.
]]
local items = {
  "1c69a87e-9136-4e13-90af-c0f02d0fc81f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>346</ID>
                  <Description>"Viconia's Priestess Robe"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Viconia_Robe

Item Description:
Listening to the magical hum this robe emits dulls your senses_ thoughts_ feelings - everything. Listen too long_ and you can almost hear the screaming chitters of a thousand spiders devoured by encroaching_ hungry darkness. Almost. 
]]
local items = {
  "bf59b289-5603-479f-8fd3-7cb258d31ba5"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>347</ID>
                  <Description>"Wavemother's Robe"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LC_Umberlee_Regeneration_Robe

Item Description:
Tales tell of a most wondrous fish_ scales resplendent_ an intricate jewel that shone beneath the sea. When it died_ the Wavemother gifted its hide as a robe to her most devoted follower - and demanded she drown the sailors that killed her gem-bright fish.
]]
local items = {
  "56a26829-5103-49e7-8f5a-b88381a86903"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>348</ID>
                  <Description>"Wyll's Earthy Garb"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Body_Wyll

Item Description:
In his good-humoured performativity_ Wyll could not resist a puff of perfume on these clothes. Possibly eau du Frontiers.
]]
local items = {
  "bd2ac836-5584-41e5-b4ff-01782c0dec6d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>349</ID>
                  <Description>"Yuan-ti Scale Mail"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_CKM_SerpenScale_Armor

Item Description:
The snakefolk of Chult are not known for waste_ so often forge lightweight and robust armour like this from their own shed skin. 
]]
local items = {
  "14ebeea8-7d0a-47a9-ba79-b1168c21f8d4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>350</ID>
              <Description>"Cloak"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>351</ID>
                  <Description>"ARM_Cloak_Long_D"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Cloak_Long_D

Item Description:

]]
local items = {
  "fc49414b-49d6-4f57-ae92-721d9d912d83"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>352</ID>
                  <Description>"ARM_Cloak_Long_C"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Cloak_Long_C

Item Description:

]]
local items = {
  "a5f5a875-932b-44c4-8b45-88d2ed379787"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>353</ID>
                  <Description>"ARM_Cloak_Long_B"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Cloak_Long_B

Item Description:

]]
local items = {
  "8ed92d35-159c-493c-a8da-fba455f181e4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>354</ID>
                  <Description>"ARM_Cloak_Long_C_1"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Cloak_Long_C_1

Item Description:

]]
local items = {
  "c2f0ea14-9384-4b5e-a0eb-81909ce72d38"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>355</ID>
                  <Description>"Braindrain Cape"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Psychic_MentalFatigue_Cape

Item Description:
What was life like before the mind flayers snatched you up_ Road dust clots your boots_ campfires roar up and diminish_ faces swim by. ____More and more that life distances itself like some other world. A dream world maybe_ glimpsed now and again through a gauze.
]]
local items = {
  "1b4d85b9-eefd-4629-9985-db3cb5365e8f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>356</ID>
                  <Description>"Cape of the Red Prince"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
DLC_DD_Red_Price_Cloak

Item Description:
A noble warrior's cloak_ woven in the heart of an ancient empire.
]]
local items = {
  "be8f2382-576f-426f-ae90-45544b507e07"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>357</ID>
                  <Description>"Cindermoth Cloak"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Fire_BurningOnDamaged_Cloak

Item Description:
With every rustle of this cloak_ small moths like windblown embers appear around you - they flutter for a moment_ then fade into inconsequence. 
]]
local items = {
  "8a31c554-1545-4647-b24d-93cf5d81df18"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>358</ID>
                  <Description>"Cloak"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Cloak

Item Description:
Woven of heavy wool_ this cloak is solid of make if somewhat stiff to wear.
]]
local items = {
  "a1978b4d-3d93-49ec-9a8b-d19171ed35d5"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>359</ID>
                  <Description>"Cloak of Avarice"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Toll_Collector_Cloak

Item Description:
For one to wear this heavy cloak woven of errant_ unused gold_ one's pockets must hang even heavier still.
]]
local items = {
  "c7774285-21b3-44fc-bae0-0b893a6a3549"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>360</ID>
                  <Description>"Cloak of Cunning Brume"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Shadow_FogOfCloudDisengage_Cloak

Item Description:
One of the relics of Deep Duerra's rebellious children. The children found nothing of use in the vault and were discouraged.____But in the morning the Vault Keykeeper's son_ who admired the children_ sought them out - and in his arms he brought a wealth of things_ forged in shadow. 
]]
local items = {
  "4b8ea38f-d0c0-4c29-a66f-bea71219f8a3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>361</ID>
                  <Description>"Cloak of Displacement"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_PHB_CloakOfDisplacement_Cloak

Item Description:
The fur is so blue as to be almost black. When mantled across your shoulders_ the patterns on the cloak seem to shift and ripple.
]]
local items = {
  "257aed3e-370d-40b3-b464-de10257dd82b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>362</ID>
                  <Description>"Cloak of Elemental Absorption"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ElementalGish_AbsorbElements_Cloak

Item Description:
A favourite among fleet-footed gish_ this cloak allows the wearer to wield a foe's elemental mastery against them. 
]]
local items = {
  "811ab129-2fb2-49ed-af29-5042197022fe"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>363</ID>
                  <Description>"Cloak of Protection"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_PHB_CloakOfProtection_Cloak

Item Description:
Wizards Otiluke and Bigby may be renowned as dignified members of the Circle of Eight_ but on one occasion_ as younger men_ Bigby bet Otiluke that he couldn't suck thirteen litres of vodka out of a protection cloak like this one.____Bigby won. 
]]
local items = {
  "602f62dd-0fba-4438-ad68-b846f17ac538"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>364</ID>
                  <Description>"Cloak of The Weave"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_EndGameCaster_Cloak

Item Description:
Part of an outfit worn by the wizard Tenser when he was inducted into the organisation of eminent wizards called the Circle of Eight.
]]
local items = {
  "58c9bc94-b0ac-4ab9-a005-28cc445186f8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>365</ID>
                  <Description>"Derivation Cloak"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Poison_InflictPoisonHealSelf_Cloak

Item Description:
Based on a mad alchemist's experiments to derive youth from his victims by poisoning them_ this cloak relies on a much more reliable arcane formula. 
]]
local items = {
  "857d9a3c-5a40-4dfa-a634-99629095248b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>366</ID>
                  <Description>"Fleshmelter Cloak"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Acid_AcidMeleeCounter_Cloak

Item Description:
Droplets of foul acid drip from the tails of this cloak_ as if from the stinger of a demonic scorpion.
]]
local items = {
  "a927e273-3385-4a11-8941-e952d0ddfd38"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>367</ID>
                  <Description>"Mantle of the Holy Warrior"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Radiant_CrusaderMantle_Cloak

Item Description:
This garment accidentally fell into the communal steambaths during the All Saints Morning Retreat And Candlelit Guided Meditation.
]]
local items = {
  "f1fdb8db-e754-4ea9-b6ce-440db6b776ac"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>368</ID>
                  <Description>"Nymph Cloak"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LC_Nymph_Cloak

Item Description:
The charmers_ seducers_ philanderers_ flirts_ gallants_ beguilers_ ravishers_ rogues_ tempters_ and tantalisers of the Feywild all share one common trait_ they make you feel as if you are the only diamond among the drift. 
]]
local items = {
  "6062db99-6719-44e2-9d01-9a99131d1ba7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>369</ID>
                  <Description>"Reverse Rain Cloak"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
WYR_Circus_WetCloak

Item Description:
The wearer is perpetually just a little bit damp. 
]]
local items = {
  "fc9f7223-6b39-4734-b600-820fad6c4a08"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>370</ID>
                  <Description>"Shade-Slayer Cloak"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Critical_HidingCritical_Cloak

Item Description:
Rough and coarse_ the cloak's materials soften to silk when immersed in shadow. 
]]
local items = {
  "aff94826-0ea4-42e3-8855-aa2002c01b76"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>371</ID>
                  <Description>"The Deathstalker Mantle"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_DarkUrge_Bhaal_Cloak

Item Description:
Let hill and hollow be a door__To screams that last forevermore. 
]]
local items = {
  "dff731f7-d6da-403d-80cf-7f3d9cc7345b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>372</ID>
                  <Description>"Thunderskin Cloak"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Thunder_InflictDazeOnReverberatedCreature_Cloak

Item Description:
Through a gap in the long snarls of thread_ you are sure you can glimpse a great black thunderhead swollen with purple lightning and spears of rain. 
]]
local items = {
  "c4c5150c-0931-4d9e-b7b2-36f40d56c290"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>373</ID>
                  <Description>"Vivacious Cloak"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_CQCaster_TempHPAfterCast_Cloak

Item Description:
The sheer mortal terror of the low-vitality spellcaster _who can be blown over by a wafted spoon_ can be partially offset by cloaks like this one. 
]]
local items = {
  "62a89e3a-ef88-457a-8219-0cefae6dec92"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>374</ID>
                  <Description>"Wavemother's Cloak"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LC_Umberlee_Protection_Cape

Item Description:
Little jellyfish-shaped pockets line the inside of this cloak. 
]]
local items = {
  "e36702e9-10e5-4964-b254-7ff0659f9bb5"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>375</ID>
              <Description>"Gloves"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>376</ID>
                  <Description>"ARM_Gloves_Leather_Minsc"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Gloves_Leather_Minsc

Item Description:

]]
local items = {
  "ca7faba9-aafb-4a04-b838-17b5d4eadee6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>377</ID>
                  <Description>"UNI_Jaheira_Gloves"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_Jaheira_Gloves

Item Description:

]]
local items = {
  "5d3b434b-4448-47c3-8dc3-92e1ca946e29"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>378</ID>
                  <Description>"UNI_Karlach_Gloves"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_Karlach_Gloves

Item Description:

]]
local items = {
  "8ee5bdde-c22f-452f-add9-2d82ec3dc390"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>379</ID>
                  <Description>"UNI_Halsin_Gloves"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_Halsin_Gloves

Item Description:

]]
local items = {
  "eb99ce71-8ef2-4ff6-a94a-a7b9cff3d45b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>380</ID>
                  <Description>"UNI_OrpheusChains_Gloves"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_OrpheusChains_Gloves

Item Description:

]]
local items = {
  "35c0a291-fe35-4a3e-94d5-adbf31b269d4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>381</ID>
                  <Description>"Abyss Beckoners "</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Zhentarim_Demonspirit_Gloves

Item Description:
Demons will bite their masters_ slaves_ comrades_ and_ on occasion_ themselves. They bite on principle_ and are functionally piranha with extra steps.
]]
local items = {
  "7ef359b6-79af-4414-99bc-f93bc5eeed77"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>382</ID>
                  <Description>"Bhaalist Gloves"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Bhaalist_Gloves

Item Description:
When the Lord of Murder_ Bhaal_ was rendered mortal_ he knew his days were numbered. His vile machinations had gained him many enemies.____Those days ran out and Bhaal was indeed killed_ not by a god_ but by a man with hawkish features named Cyric. 
]]
local items = {
  "afd74d05-7c24-45ec-8033-84f365e6ea5f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>383</ID>
                  <Description>"Blackguard's Gauntlets"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OB_Paladin_DeathKnight_Gloves

Item Description:
For some paladins_ the iron-clad grip that an oath holds can be too much to bear. When these champions fail and falter_ their hands that would guide turn cold_ hard_ and piercing.
]]
local items = {
  "65c65d78-1786-4a78-9a43-96c19849b6f3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>384</ID>
                  <Description>"Bonespike Gloves"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Barbarian_BoneSpike_Gloves

Item Description:
These gloves were soaked in the marrow of a Dragon Turtle_ its bones broken and their fluid drained in sloppy chunks into vats.
]]
local items = {
  "7e32e812-b79d-4bdb-a7c6-ee6778e893ec"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>385</ID>
                  <Description>"Bracers of Defence"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_ARM_OfDefense_Gloves

Item Description:
Delicate twists of magical iron - painstakingly gilded - have been fashioned into these fortifying vambraces. 
]]
local items = {
  "58315437-f06a-4797-a26a-6bbcff80c4fe"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>386</ID>
                  <Description>"Braindrain Gloves"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Psychic_MentalFatigue_Gloves

Item Description:
Somewhere deep in the spongy grey matter and little jiggly bits that comprise the brain_ the memory of the slimy tadpole slithering over your eyeball lingers... 
]]
local items = {
  "0071fe71-ad1e-4be0-9ca3-cdfdc558b571"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>387</ID>
                  <Description>"Cerebral Citadel Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Illithid_Carapace_Gloves

Item Description:
The taut violet leather is drier than snakeskin_ and puckered at each knuckle with shallow mouth-shaped pits. 
]]
local items = {
  "9e90efe2-200a-4923-a597-ddc044e704f2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>388</ID>
                  <Description>"Cindersnap Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_FlamingFist_BattleWizardGloves

Item Description:
'What moves faster_ a loosed crossbow bolt or a windblown cinder_ Let's find out.' - Overheard during a Flaming Fist raid in Baldur's Gate. 
]]
local items = {
  "761d719f-dade-4f61-9d23-cc378f9d2f0c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>389</ID>
                  <Description>"Craterflesh Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Critical_Force_Gloves

Item Description:
Indents on the fingertips of these gloves are ringed with tiny meteorites_ lined in a shimmering purple light rather than the rich red of astral flame.
]]
local items = {
  "556c4071-7d59-4cb7-ad84-9fa0efcd535f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>390</ID>
                  <Description>"Daredevil Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_CQCaster_CloseRangedSpellMastery_Gloves

Item Description:
The sting of fear at the encroachment of some hulking brute is lessened by these gloves. In fact_ in such moments_ they send rivulets of courage coursing through you.
]]
local items = {
  "c9f03464-488c-4f3f-aa2f-6d4c8e48a106"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>391</ID>
                  <Description>"Dark Displacement Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Zhentarim_Swap_Gloves

Item Description:
Rudimentary teleportation sigils mark the palms of these gloves_ like coiled snakes in a bath of pitch.
]]
local items = {
  "48c5fe1f-c058-4b47-9a36-024f89a5b0f7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>392</ID>
                  <Description>"Dark Justiciar Gauntlets"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_JusticiarArmor_Gloves

Item Description:
The grip of darkness is a fear felt by many. The grip of a Dark Justiciar's gauntlets is a sacred fear reserved for an unfortunate few.
]]
local items = {
  "518a925b-eb77-44e7-999d-e8c195b2261d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>393</ID>
                  <Description>"Dark Justiciar Gauntlets"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
SHA_JusticiarArmor_Gloves

Item Description:
The grip of darkness is a fear felt by many. The grip of a Dark Justiciar's gauntlets is a sacred fear reserved for an unfortunate few.
]]
local items = {
  "73a443e0-2056-4e4c-b8d2-d4283d8d3595"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>394</ID>
                  <Description>"Deadly Channeller Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Critical_ArcanicCritical_Gloves

Item Description:
A message stitched in gold lettering on the inside of the right-hand glove implies these were a birthday present. 
]]
local items = {
  "e07fb5cb-4276-4ecd-8758-7bb9b172372b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>395</ID>
                  <Description>"Drow Leather Gloves"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
GOB_DrowCommander_Leather_Gloves

Item Description:
Fabricated from lizard hides in the depths of the Underdark_ these gloves were never meant to see the light of day.
]]
local items = {
  "69e57d02-44a2-4e39-8b2a-502413761219"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>396</ID>
                  <Description>"Fleetfingers"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Mobility_JumpOnDash_Gloves

Item Description:
Plain leather with a faint but unmistakable buzz - as if eager to put idle hands to work.
]]
local items = {
  "df7093d7-efdd-4153-bfb6-b2a6350fb3c2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>397</ID>
                  <Description>"Gauntlets of Frost Giant Strength"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_ARM_OfGiantHillStrength_Gloves

Item Description:
Your basic hill giant is just a landslide with a digestive system. 
]]
local items = {
  "9481aa27-ce9c-414c-84ff-5e974fd64d89"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>398</ID>
                  <Description>"Gauntlets of Surging Accuracy"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Fighter_ActionSurge_AttackBonus_Gloves

Item Description:

]]
local items = {
  "7529f6ba-6fff-4224-bdd9-e10538a96528"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>399</ID>
                  <Description>"Gauntlets of the Warmaster"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfWarMaster_Gloves

Item Description:
Clothing doesn't tend to have much personality. That comes down to how it's worn. Yet these gloves exude a confidence_ an intangible aura of expertise. 
]]
local items = {
  "85865321-5feb-447f-92e7-5c04359fe3af"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>400</ID>
                  <Description>"Gemini Gloves"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Warlock_Twinned_Gloves

Item Description:
Designed by an arcane smith with half-vision. He made these gloves to make sure his spells hit their target. 
]]
local items = {
  "fc4fd633-bc45-4ff4-90e6-2e454f7ceaa0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>401</ID>
                  <Description>"Githyanki Bracers"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Gloves_Metal_Githyanki

Item Description:
Forged from an amalgamation of metals_ these bracers shine a million different shades of silver.
]]
local items = {
  "30b19abd-fc49-4826-811f-9c4c556ae6f0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>402</ID>
                  <Description>"Gloves of Archery"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_ARM_OfArchery_Gloves

Item Description:
Banded in dark iron_ these gloves are embossed with the brass likeness of an elf against a trio of arrows in flight. 
]]
local items = {
  "6d84b9e5-e9e4-477c-8d5b-a3f232a4415a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>403</ID>
                  <Description>"Gloves of Baneful Striking"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ElementalGish_BaneOnElementalWeaponDamage_Gloves

Item Description:
The slightest movement of leather makes a dark energy seep out of the gloves.
]]
local items = {
  "9e259ea7-291f-41bd-b275-cc49edba3bb6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>404</ID>
                  <Description>"Gloves of Battlemage's Power"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Gish_ArcaneAcuity_Gloves

Item Description:
Bands of blue light snap and contract when the gloved fingertips are pressed together - evidence of the arcane polarity linking them. 
]]
local items = {
  "15381544-e616-46e6-a881-0af793971863"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>405</ID>
                  <Description>"Gloves of Belligerent Skies"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Thunder_Reverberation_Gloves

Item Description:
Balling your fingers into fists while wearing these gloves causes a sonorous chime_ like the fusion of a tempest and a church bell_ to resound inside your skull. 
]]
local items = {
  "c987b6e4-adcb-47d6-8dfd-6d4d2f15a381"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>406</ID>
                  <Description>"Gloves of Cinder and Sizzle"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Monk_Fire_Gloves

Item Description:
It was through scrying and observing blazing elementals that the monks of Plumgully Temple mastered the art of fighting fire with fists_ and vice versa. 
]]
local items = {
  "663e4a1a-5f0d-4e2e-8dcf-0fb515fc2e0f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>407</ID>
                  <Description>"Gloves of Crushing"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BG_OfCrushing_Gloves

Item Description:
Stitched into the fabric of these gloves are the words_ Largest and Largesse_ For The Discerning Murderer. 
]]
local items = {
  "a8d15838-5721-4a3f-bfbd-f51c58c2fde3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>408</ID>
                  <Description>"Gloves of Dexterity"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BG_OfDexterity_Gloves

Item Description:
The point at which the gloves meet the wrist is form-fitting and very snug_ almost a hint at the supple quickness and skill these gloves permit the wearer. 
]]
local items = {
  "f3775096-0055-4d35-8cc0-f5765284bc7d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>409</ID>
                  <Description>"Gloves of Fire Resistance"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LowHP_ResistanceFire_Gloves

Item Description:
These gloves are cool to the touch_ chilling the tips of the wearer's fingers.
]]
local items = {
  "9c888908-04d0-4047-bf9d-02d3cecb08d6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>410</ID>
                  <Description>"Gloves of Flint and Steel"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Fire_ApplyBurningOnFireDamage_Gloves

Item Description:
Carixim_ a fiendish smith of hell who gorged himself fat on souls by the thousand_ did not consider himself to have enemies_ though many hated him dearly.
]]
local items = {
  "88225372-376e-42fb-a028-65ac3d0dd864"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>411</ID>
                  <Description>"Gloves of Hail of Thorns"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
PLA_ZhentCave_Gloves

Item Description:
Grants wearer ability to cast Hail of Thorns.____Whoever previously owned these gloves marked each with a series of thirty superficial scrapes_ six per finger. What they indicate is unclear. 
]]
local items = {
  "69271c04-ab3d-4efc-ab3c-4ca6c5ec7db3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>412</ID>
                  <Description>"Gloves of Heroism"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Paladin_LayOnHandsSupport_Gloves

Item Description:
Suede covers the palms of these gloves - ensuring a soft_ comforting touch for anyone in need of help.
]]
local items = {
  "110144ac-db1d-4db8-a907-92f642086d0d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>413</ID>
                  <Description>"Gloves of Missile Snaring"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_ARM_OfMissileSnaring_Gloves

Item Description:
These gloves seem to meld to your skin - supple_ snug and dextrous as one could hope for. 
]]
local items = {
  "687cc55b-77a3-4893-a7d7-cfbafdc2737c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>414</ID>
                  <Description>"Gloves of Power"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
DEN_RaidingParty_GoblinCaptain_Gloves

Item Description:
Blessed by Priestess Gut_ these gauntlets provide additional aid to any who bear the Absolute's mark upon their flesh.
]]
local items = {
  "d22e2679-aff0-4244-9ed2-7aac981b82cf"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>415</ID>
                  <Description>"Gloves of Soul Catching"</Description>
                  <Color>4080FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_PHB_OfSoulCatching_Gloves

Item Description:
Formerly worn by Autumnal Baskin_ a professional meditator turned bare-knuckle champion_ who gained enlightenment via two methods. The second was getting a lot of fighting acumen. Advanced cosmic harmony is a nose. Sometimes you've got to break it a few times to get the best of things.
]]
local items = {
  "c1342b19-c898-451c-b2e8-6eb6666fe1c2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>416</ID>
                  <Description>"Gloves of the Automaton"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfAutomaton_Gloves

Item Description:
Llena the Many-Times-Married would use these gloves to blend in with the statues in her courtyard. This would allow her to avoid her plethora of husbands. Anything for a moment's peace. 
]]
local items = {
  "d10ec0b7-5868-4563-9a34-e1ab72d50269"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>417</ID>
                  <Description>"Gloves of the Balanced Hands"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfTheBalancedHands_Gloves

Item Description:
Formerly worn by Doubleway Douglas Fairbanks_ who was so ambidextrous his tears ran down the back of his neck.
]]
local items = {
  "7ffce863-d530-4492-a455-a8f11c53d6c3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>418</ID>
                  <Description>"Gloves of The Duellist"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfTheDuelist_Gloves

Item Description:
Ways of beginning a duel have varied over the years. Perhaps the most famous is the Bildumbacher Method_ in which the instigator drips paint thinner onto the opponent's socks.  
]]
local items = {
  "97e362b2-e2aa-4703-9840-6824d7068334"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>419</ID>
                  <Description>"Gloves of the Growling Underdog"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ZOC_AdvantageOnMeleeAttackWhileSurounded_Gloves

Item Description:
Crowded taprooms. Packed feast halls. Bustling market bazaars. Chances to be social_ Sure. Chances to be violent_ Absolutely. 
]]
local items = {
  "1001f28b-5ea3-4257-864c-f60c812aecf0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>420</ID>
                  <Description>"Gloves of Thievery"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_PHB_OfThievery_Gloves

Item Description:
Useful for bank vaults_ locked chests_ and bolted barns.
]]
local items = {
  "5a2d9181-8179-46cc-a5f8-d5bae909d8e0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>421</ID>
                  <Description>"Gloves of Uninhibited Kushigo"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Monk_Magic_Gloves

Item Description:
Forsaking his infamous armour_ Kushigo left Irishi's body and wandered naked_ without thought or care_ into the barren countryside. The land was flat and desolate under the red-gold sun_ but compared to his lonely heart_ it seemed alive with joy. 
]]
local items = {
  "3e088120-9a4f-4e94-9d1e-23fae8616cd4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>422</ID>
                  <Description>"Helldusk Gloves"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Infernal_Metal_Gloves

Item Description:
What precisely confers eternal punishment_ reward_ absolution_ Perhaps it's not just belief in a god. Perhaps the deciding factor is whether the gods believe in you.
]]
local items = {
  "ad219a90-ab3d-4821-8206-011293f5837b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>423</ID>
                  <Description>"Hellgloom Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Lesser_Infernal_Metal_Gloves

Item Description:
'Beneath the tormented screams_ I heard this moaning sound like many people in pain_ and I heard the ringing of a great hammer. Carixim's forge was close.' - Overheard from the smith Dammon
]]
local items = {
  "cbc9b5dd-76e5-4e22-b0cf-26e957033a9d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>424</ID>
                  <Description>"Hellrider's Pride"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
DEN_HellridersPride

Item Description:
A waft of sulphur emanates from these proudly-kept gauntlets.
]]
local items = {
  "db4d4560-dc72-4d64-b552-5caf442c0927"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>425</ID>
                  <Description>"Herbalist's Gloves"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_Myco_Alchemist_HealerGloves

Item Description:
The leather smells faintly of herbs_ as if washed in a herbal bath.
]]
local items = {
  "f3ff7066-f407-41c7-b936-0aff066c08e4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>426</ID>
                  <Description>"Hr'a'cknir Bracers"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Githborn_MageHandSupport_Gloves

Item Description:
The planar silver cladding of these forearm bracers allows the wielder to channel the latent astral energies floating in the Weave.
]]
local items = {
  "4be77d67-2310-44fc-bdaf-81cffb411467"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>427</ID>
                  <Description>"Ichorous Gloves"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Acid_NoxiousFumes_Gloves

Item Description:
These gloves smell like beef mince left to rot in a privy pail. 
]]
local items = {
  "ca7a96f9-594c-4ed3-afd3-aed0094c383c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>428</ID>
                  <Description>"Illithid Carapace Boots"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Illithid_Carapace_Boots

Item Description:

]]
local items = {
  "397331d6-e86e-448d-8255-014dab6f860f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>429</ID>
                  <Description>"Jhannyl's Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Harpers_JhannylGloves

Item Description:
Divine runes accentuate the finger pads. While not a religious sect_ the Harpers do not demand the occlusion of religion in their members. 
]]
local items = {
  "79741a3c-730a-4e9d-a3fe-ec39df64af0f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>430</ID>
                  <Description>"Knock Knuckle Gloves"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Zhentarim_Lockpicking_Gloves

Item Description:
In the palm of the left glove is a glossy scarlet solution that coats Thieves' Tools_ making them more reliable. In the right_ arcane symbols wax and wane. 
]]
local items = {
  "31809893-c293-4c89-b6b6-437a3c49b604"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>431</ID>
                  <Description>"Leather Gloves"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Gloves_Leather

Item Description:
These supple gloves provide both flexibility and protection.
]]
local items = {
  "8e34fd76-8b6d-48a5-89e3-942289bec31e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>432</ID>
                  <Description>"Legacy of the Masters"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BG_OfTheMasters_Legacy_Gauntlet

Item Description:
Formerly the property of the royalty of Threskel_ these gauntlets impart some of the prince of Threskel's legendary skill with weapons.
]]
local items = {
  "c9ea7679-d30a-481f-b45b-c0427d569ec7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>433</ID>
                  <Description>"Luminous Gloves"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Radiant_RadiatingOrb_Gloves

Item Description:
The pads of each fingertip shine from the fabric with a garish glow. 
]]
local items = {
  "e8a72355-b81f-484e-bc7d-945ec81c04a3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>434</ID>
                  <Description>"Martial Exertion Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Martial_Exertion_Gloves

Item Description:
'You drop and give me thirty you sumbitch_ you think a bugbear's gonna roll over and let you rub his tummy_ One two three four - keep going maggot_ Stronger_ better_ tougher_' - Any Sword Coast Drill Sergeant_ Invariably 
]]
local items = {
  "2c6da257-8ca8-4e7c-847d-3e03bb32f260"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>435</ID>
                  <Description>"Metallic Gloves"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_Daisy_Gloves

Item Description:
Made from steel hammered thin_ these gauntlets are a fine investment for any warrior.
]]
local items = {
  "5a0ee632-9145-48b2-9b92-97c32c2ccbd9"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>436</ID>
                  <Description>"Metallic Gloves"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Gloves_Metal

Item Description:
Made from steel hammered thin_ these gauntlets are a fine investment for any warrior.
]]
local items = {
  "1dcdf52e-b596-4e3a-8d1c-8fff17ed8c2c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>437</ID>
                  <Description>"Netherstone-Studded Gauntlet"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Gortash_Gloves

Item Description:
A tyrant's grip must be one of cool_ unforgiving_ and intricately realised steel. It cannot budge_ cannot falter_ no matter the pressure_ and its fingertips must deeply pierce those who would struggle against it.
]]
local items = {
  "f7d87a7a-e5aa-4bc9-ba51-4e2df3e0bae0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>438</ID>
                  <Description>"Nimblefinger Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BG_Nimblefinger_Gloves

Item Description:
For the right wearer_ these supple doeskin gloves offer both comfort and protection - alongside a perfectly attuned sense of where one's fingers are_ and what pocket they're picking. 
]]
local items = {
  "fbc9b0ad-f31e-4cdc-a1cc-1e2204cb46c5"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>439</ID>
                  <Description>"Oathbreaker Knight Gloves"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Oathbreaker_Gloves

Item Description:

]]
local items = {
  "f66431d0-08a6-4b15-b8a4-7154fc1e5f47"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>440</ID>
                  <Description>"Pale Widow Gloves"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LC_DrowSpider_Gloves

Item Description:
While many drow revere arachnids_ there is undoubtedly a degree of emulation at work in the case of certain loathsome sects - look no further than the spiderlike coldness of the Lolthite community for proof of this mimicry.
]]
local items = {
  "69d30b5a-1fcc-4d66-88a2-6f021ae8f010"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>441</ID>
                  <Description>"Poisoner's Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Poison_PoisonExposure_Gloves

Item Description:
While the leather is clean and well-maintained_ a cold_ acrid smell permeates these gloves.
]]
local items = {
  "49c8234e-3134-40f0-8001-e221114b1d2a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>442</ID>
                  <Description>"Quickspell Gloves"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Warlock_Quickened_Gloves

Item Description:
These gloves were worn by the wizard Bucknard_ who always maintained that speed was most important in spellcasting. This_ because even if you royally bugger up the spell_ you've got enough time to leg it away afterward. 
]]
local items = {
  "4b1b3dcd-dcbc-4a93-a848-f16510d76d82"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>443</ID>
                  <Description>"Raven Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Raven_Gloves

Item Description:
Dark and suitably moody_ these gloves are perfect for wearing while thinking about poetry.
]]
local items = {
  "ce92a056-0754-4e8a-b3b7-5d6cbb844c65"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>444</ID>
                  <Description>"Reason's Grasp"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Rage_TempHPOnExit_Gloves

Item Description:
The snug fit of these gloves resist a balled fist - as if favouring the open hand of peace.
]]
local items = {
  "b51863cc-f8de-4945-a062-6bda2a35cdbc"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>445</ID>
                  <Description>"Seraphic Pugilist Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OpenHand_Radiant_Gloves

Item Description:
Apparently this is what happens to your handwear when you clock an angel in the chops.
]]
local items = {
  "59fcc2e4-5897-4e0d-a9ca-4d9234f85af8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>446</ID>
                  <Description>"Servitor of the Black Hand Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Banites_Gloves

Item Description:
Covetous of Mystra's command of the Weave_ Bane the Black Hand extends his grasp_ each finger comprised of ten thousand fanatics_ adjuncts of his evil will.
]]
local items = {
  "106d74f9-5341-478e-a8d5-feaef5624675"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>447</ID>
                  <Description>"Snow-Dusted Monastery Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Monk_Cold_Gloves

Item Description:
Cracking your knuckles in these gloves dislodges puffy drifts of snow from your fingers. 
]]
local items = {
  "6ba63a43-5322-4a03-b82f-46eb6bf9cf4f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>448</ID>
                  <Description>"Spellmight Gloves"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Arcanist_Gloves

Item Description:
Designed for the jobbing spellcaster_ these gloves are well-insulated to prevent digit immolation for the somatically inept.
]]
local items = {
  "c187103e-7f51-49f7-b3b7-72ec78e4a44f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>449</ID>
                  <Description>"Spellseeking Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_MM_Sorcery_SeekingSpell_Gloves

Item Description:
Sorcerers operate on a first-come_ first-blasted basis. 
]]
local items = {
  "98c60a0f-a58b-4dc1-99ca-06b9db0cd42f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>450</ID>
                  <Description>"Stalker Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Stalker_Gloves

Item Description:
It's a difficult life being a modern rogue - everyone expects the surprise attack. These gloves assist in making sure that the surprisee doesn't live long enough to decide whether they were surprised.
]]
local items = {
  "dd99248c-fe42-4d07-9861-853e9291ea51"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>451</ID>
                  <Description>"Swordmaster Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfSwordmaster_Gloves

Item Description:
The famous drow with his heart of gold_ Drizzt Do'Urden_ is not the pioneer of the 'twin sword style' of fighting_ though he was among the best practitioners.
]]
local items = {
  "66e20a58-4bc3-4e17-a13e-510a19b23c33"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>452</ID>
                  <Description>"The Fork-Lightning Fingers"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Monk_Lightning_Gloves

Item Description:
There's a technique specific to the monks who train along the Spine of the World. It doesn't have a name_ but it does involve fists_ lightning_ and some extremely decimated pines.
]]
local items = {
  "e050d6c6-a228-4bc2-9794-9ae5c69345c7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>453</ID>
                  <Description>"The Reviving Hands"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfRevivify_Gloves

Item Description:
Stitched into the lining is the phrase_ 'Yes all right_ all right_ stop moaning and get up.'
]]
local items = {
  "0e94335a-bf4d-47b9-bde7-85ee2f01102f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>454</ID>
                  <Description>"The Sparkle Hands"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ChargedLightning_AbilityCheckBoost_Gloves

Item Description:
'Sometimes I just want to feel that spark_' Yrre the Sparkstruck said. 'Feel the lightning course through me.'
]]
local items = {
  "a0bbe602-ffc1-45f1-9a09-de7d11575465"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>455</ID>
                  <Description>"Thermoarcanic Gloves"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Fire_HeatOnFireDamage_Gloves

Item Description:
Ash dusts the gloves' fingers_ darkening their seams.
]]
local items = {
  "aaf703d3-77d2-4259-9369-f98416be0e2e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>456</ID>
                  <Description>"Thunderpalm Strikers"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Monk_Thunder_Gloves

Item Description:
Each blow landed while wearing these gloves produces the rumbling boom of a thousand demons' ravenous stomachs.
]]
local items = {
  "6906d0c8-d99d-439c-8a4c-c00f081770ba"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>457</ID>
                  <Description>"Unlucky Thief's Gloves"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
WYR_Circus_ThiefGloves

Item Description:
Whenever the wearer steals anything_ a piece of coal appears in their pocket_ like a tiny_ dusty condemnation.
]]
local items = {
  "39e420ae-ceae-441c-ab6b-251e97c3c26d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>458</ID>
                  <Description>"Unwanted Masterwork Gauntlets"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_DevilsBlackmith_Gloves

Item Description:
These gauntlets spark with unfinished_ yet still potent devillish magic - indicative of a cancelled blacksmith's commission. 
]]
local items = {
  "b337cd63-d206-4229-84fd-4b77809f7eb3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>459</ID>
                  <Description>"Vampiric Gloves"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Vampiric_Gloves

Item Description:
Little leech motifs adorn the pad of each finger. The leeches have rows of suckling_ sharp teeth. 
]]
local items = {
  "51ce5b9a-e56a-40d6-9383-ad4ec7042acc"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>460</ID>
                  <Description>"Winkling Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LC_Tinkerer_Gloves

Item Description:
Good for a winkle in cases of mechanisms_ locks_ or some bugger who needs killing.
]]
local items = {
  "dbcab01a-0654-4365-836b-c0f8ccc94558"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>461</ID>
                  <Description>"Winter's Clutches"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Frost_GenerateFrostOnDamage_Gloves

Item Description:
Likely these originated in Icewind Dale_ where tempers run as hot as hearths_ and frozen rivers trace the arm of the dale in a network of blue-white tributaries.
]]
local items = {
  "e6bb26ab-2987-4061-9c5c-764b377f91b8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>462</ID>
                  <Description>"Wondrous Gloves"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BG_Wondrous_Gloves

Item Description:
A series of motivational quotes have been enthusiastically removed from the embroidery of these gloves_ as if in protest. 
]]
local items = {
  "afe6c7a2-fdd7-4cca-9441-e0b3a2237f5f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>463</ID>
              <Description>"Helmet"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>464</ID>
                  <Description>"Accursed Coins - Chest"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
TWN_TollCollector_ArmorPart_Torso

Item Description:
These coins grant the Toll Collector protection against attacks_ but will be lost if destroyed.
]]
local items = {
  "ee8533b8-483e-4ce6-93d4-82d5a1c29a30"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>465</ID>
                  <Description>"Accursed Coins - Head"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
TWN_TollCollector_ArmorPart_Head

Item Description:
These coins grant the Toll Collector protection against attacks_ but will be lost if destroyed.
]]
local items = {
  "d7ba60e5-fe90-4503-9919-0f831c306c53"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>466</ID>
                  <Description>"Accursed Coins - Left Arm"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
TWN_TollCollector_ArmorPart_Arm_L

Item Description:
These coins grant the Toll Collector protection against attacks_ but will be lost if destroyed.
]]
local items = {
  "def9e410-c2a3-4132-a38c-f7dc436679ad"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>467</ID>
                  <Description>"Accursed Coins - Left Leg"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
TWN_TollCollector_ArmorPart_Leg_L

Item Description:
These coins grant the Toll Collector protection against attacks_ but will be lost if destroyed.
]]
local items = {
  "17e965b2-7ae6-4b28-b545-b11469efbd9c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>468</ID>
                  <Description>"Accursed Coins - Right Arm"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
TWN_TollCollector_ArmorPart_Arm_R

Item Description:
These coins grant the Toll Collector protection against attacks_ but will be lost if destroyed.
]]
local items = {
  "6dce5e63-42bd-4d49-830a-e40d9641cef4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>469</ID>
                  <Description>"Accursed Coins - Right Leg"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
TWN_TollCollector_ArmorPart_Leg_R

Item Description:
These coins grant the Toll Collector protection against attacks_ but will be lost if destroyed.
]]
local items = {
  "cb3330bd-672d-4d4c-973c-fcc7e7c037c5"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>470</ID>
                  <Description>"Assassin of Bhaal Cowl"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Bhaalist_Hat

Item Description:
When he was killed_ Bhaal's blight upon the world was not destroyed. For the many people upon whom he had sired his spawn slithered out of tainted wombs_ and with their arrival Bhaal's malcontent returned with force. 
]]
local items = {
  "d5d22dfc-bba4-4e2c-ba71-c804d3b47919"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>471</ID>
                  <Description>"Bicorne of the Sea Beast"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
DLC_DD_Beasts_Tricorn

Item Description:
A battered two-point hat that's seen the wear and tear of rebellion.
]]
local items = {
  "d7696865-e8c2-4c44-a890-a43f5b6f9752"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>472</ID>
                  <Description>"Birthright"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_GleamingSorcery_Hat

Item Description:
'The thing that you poor sods simply cannot grasp is how effortless all this magical hootie-wootie castie-spellsie business is for me_' - A very stupid sorcerer at a wizard academy ball. 
]]
local items = {
  "76ce9b38-9203-437f-9962-4be4c4ad1193"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>473</ID>
                  <Description>"Bonespike Helmet"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Barbarian_BoneSpike_Helmet

Item Description:
The tibia of a storm giant was ground and chiselled and reworked till it became this helm. The wearer can actually smell summer tempest clouds like maroon-dark dread while wearing the helm.
]]
local items = {
  "72152951-3670-4004-b275-6b722c498bbc"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>474</ID>
                  <Description>"Brimmed Hat"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Hat_Wizard_D

Item Description:
This wizardly hat has a little embroidered rabbit inside its lining - the rabbit is called snowball_ and once he was lost_ never to be found. 
]]
local items = {
  "b8bd447c-eef3-441e-9fb8-303b5b926432"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>475</ID>
                  <Description>"Browbeaten Circlet"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_CQCaster_SpellDCBonusWhileThreatened_Circlet

Item Description:
A cornered animal will_ on occasion_ feel a rush of exhilarating energy_ and an urge to fight. The same is true of many arcane practitioners_ who do not take kindly to being menaced. 
]]
local items = {
  "4def305d-0141-4811-b1d1-353d323f5f2a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>476</ID>
                  <Description>"Bycocket"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Hat_Wizard_C

Item Description:
This wizardly hat has a little embroidered rabbit inside its lining - the rabbit is called snowball_ and once he was lost_ never to be found. 
]]
local items = {
  "a05f4468-4e26-4856-b996-ba8ab8e55a14"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>477</ID>
                  <Description>"Cap and Bells"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Jester_Hat

Item Description:
Tinkling_ ringing_ jangling_ and about as festive as a terminal diagnosis.
]]
local items = {
  "56769fcd-f35c-4569-b7ef-9a974fd2e226"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>478</ID>
                  <Description>"Cap of Curing"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Bard_HealingBardicInspiration_Hat

Item Description:
Putting on this hat is somehow enough to lift your spirits.
]]
local items = {
  "cfbd013c-f24d-4430-be13-d7bfafd48709"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>479</ID>
                  <Description>"Cap of Wrath"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Violence_ViolenceOnDamaged_Helmet

Item Description:
With every blow the skullcap seems to compress_ narrowing the vision of the wearer.
]]
local items = {
  "b2ac96aa-5f04-49fb-800c-ab51a2bdb3c6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>480</ID>
                  <Description>"Circle of Bones"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Myrkulites_CircletOfMyrkul_Circlet

Item Description:
A coldness clings to this macabre circlet_ like the chill of a grave.
]]
local items = {
  "d2a4e407-b5de-4f0b-ab7a-75f9bf5041dd"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>481</ID>
                  <Description>"Circlet"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Circlet

Item Description:
Provides its wearer a touch of elegance but no additional protection.
]]
local items = {
  "348b0f52-8960-43e0-ae38-c1d3b1974c3f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>482</ID>
                  <Description>"Circlet"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_ShadowheartCirclet

Item Description:
Provides its wearer a touch of elegance but no additional protection.
]]
local items = {
  "437aede9-dea6-46fd-ade2-fc9cfef16c3d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>483</ID>
                  <Description>"Circlet of Blasting"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_CircletOfBlasting

Item Description:
This delicate circlet grants its wearer the ability to cast the Scorching Ray spell.
]]
local items = {
  "3abdbb8a-4701-4397-8fce-7a8dd8a0bb84"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>484</ID>
                  <Description>"Circlet of Hunting"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BonusAttack_AgainstMarked_Circlet

Item Description:
Huntresses prowling in the least hospitable woods of Toril hold one rule as cardinal_ kill quickly. This is not about suffering. It's about sound_ and its necessary absence. 
]]
local items = {
  "1e59513c-a787-4f77-bcef-675ac4199daf"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>485</ID>
                  <Description>"Circlet of Inner Turmoil"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_EndGameCaster_Circlet

Item Description:
Fell magic has seeped into this circlet_ rejoicing at the slightest touch of despair.
]]
local items = {
  "5cd6935a-4be9-4018-9fc2-e340b96ac519"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>486</ID>
                  <Description>"Circlet of Mental Anguish"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Illithid_Regen_Circlet

Item Description:
Fell magic has seeped into this circlet_ rejoicing at the slightest touch of despair.
]]
local items = {
  "4b3d2d3d-3dd5-4872-af6c-7acb3756b6c7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>487</ID>
                  <Description>"Circlet of Psionic Revenge"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
CRE_MAG_Psychic_Githborn_Circlet

Item Description:
You get the eerie feeling that the jewelsmith used more than alien metals to forge this circlet - something like ancient magic_ or shards of a soul.
]]
local items = {
  "8a17f2b1-5c5d-4bb0-8b2e-408e837c4d1f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>488</ID>
                  <Description>"Coldbrim Hat"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Frost_GenerateFrostOnStatusApply_Hat

Item Description:
Upturning the hat and gazing into it_ you get this slightly vertiginous feeling_ as if you were looking into a cold_ abandoned well with no discernible end. 
]]
local items = {
  "d8ef5f3c-cada-42f8-a947-c3a3f62e569d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>489</ID>
                  <Description>"Covert Cowl"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Shadow_CriticalBoostWhileObscured_Helmet

Item Description:
One of the relics of Deep Duerra's rebellious children. Keeping themselves and one another safe from the nasty surprises of their home_ the siblings made good progress. ____At the final hurdle_ they were confronted by none other than Duerra herself_ and her rage was great_ and they felt the candles of hope in their hearts snuff out. 
]]
local items = {
  "8aaf7649-5bee-442a-9192-5e8abd723c55"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>490</ID>
                  <Description>"Damaged Headpiece"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
FOR_ShadowheartOM_SharCrown

Item Description:
Battered by age and use_ this once-fine helmet feels like a ghost of a bygone time.
]]
local items = {
  "ad3c0c6b-bcc4-488e-a5cf-32b809188633"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>491</ID>
                  <Description>"Dark Justiciar Helm"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_Justiciar_Helmet_Magic

Item Description:
Stamped with Shar's own sigil_ this helm was worn by the Nightsinger's own crusaders. The darkness within seems deeper than night_ somehow.
]]
local items = {
  "27f1c6cd-c716-440d-ba7c-795c431ce5a3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>492</ID>
                  <Description>"Dark Justiciar Helmet"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_DarkJusticiar_Helmet

Item Description:
Adorned in a fanned coronet of speartip points_ its mask fixed with stiff-lipped intent_ this helmet evokes a frightful_ almost alien aspect that gestures to Shar. For she is strange and terrible indeed.
]]
local items = {
  "3523b640-e9da-4d89-b031-6ffe1d5fd3ed"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>493</ID>
                  <Description>"Dark Justiciar Mask"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_Justiciar_Mask_Magic

Item Description:
Worn by Shar's most loyal zealots_ the mere sight of it strikes fear in the heart of even the bravest of souls.
]]
local items = {
  "58968403-4dd6-4611-a7a2-a293ae7cf0b0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>494</ID>
                  <Description>"Devilfoil Mask"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_MerregonMask

Item Description:
A placid smile and cherubic cheeks. Who knows what face once lay beneath.
]]
local items = {
  "b2409a86-dc0d-4193-9985-4f11419c64be"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>495</ID>
                  <Description>"Diadem of Arcane Synergy"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Gish_ArcaneSynergy_Circlet

Item Description:
This circlet shimmers with a hundred otherworldly metals.
]]
local items = {
  "f6585fc7-22bb-4e58-b4a6-bbb56e48a86f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>496</ID>
                  <Description>"Elegant Light Garb"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BarbMonk_Cloth_Hat_A_1

Item Description:

]]
local items = {
  "0d109073-74f6-4e35-80f7-4da10bfcf3b9"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>497</ID>
                  <Description>"Embroidered Bycocket"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Hat_Wizard_F

Item Description:
Tapered to a precise point_ such as the wizardly mind when focusing on a nice big dinner_ instead of all these complicated spells.
]]
local items = {
  "694320b7-726b-4804-9dd6-fbc8a307a05f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>498</ID>
                  <Description>"Embroidered Hat"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Hat_Wizard_E

Item Description:
Silvery wings spread over the stiff unyeilding leather.
]]
local items = {
  "e24d6a8b-5489-4c5c-b133-b435fda3918a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>499</ID>
                  <Description>"Enforcer Helmet"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Enforcer_RejunevatingKnock_Helmet

Item Description:
The brutish thuggery of the Enforcer's position is summarised in this helmet's design. 
]]
local items = {
  "e9d1d363-5ebc-41ef-bb87-0db20780765d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>500</ID>
                  <Description>"Fistbreaker Helm"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BarbMonk_Cloth_Hat_A_1_Late

Item Description:
'If your foe rains down blows upon your head_ turn not the other cheek_ but let your pricking helm bleed the bastards dry.'
]]
local items = {
  "8eece655-bd99-4451-8ce0-f763edec09a4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>501</ID>
                  <Description>"Frayed Drow Hood"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_DrowDisguiseCowl

Item Description:
A supple leather cowl. Its spider web embroidery is stained_ and pieces of leather and thread are slowly disintegrating.
]]
local items = {
  "85f6aec3-a6df-458c-8ef4-b3fa58d85a56"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>502</ID>
                  <Description>"Gibus of the Worshipful Servant"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Hat_Butler

Item Description:
Corroded by Sceleritas' insouciant perversion_ this little gibus hat was worn by the Butler before he sank throat-deep into Bhaal's clutches. Once_ it was beyond besmirchment. Once_ it was lovely. 
]]
local items = {
  "14b2e775-9734-4fa0-82c3-2e560b8f2e2f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>503</ID>
                  <Description>"Grymskull Helm"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_MeleeDebuff_AttackDebuff1_OnDamage_Helmet

Item Description:
Once home to an inscrutable machine intelligence_ Grym's skull now serves as a simple helm.
]]
local items = {
  "6b1c4d55-e0d1-4b58-a26d-57d807bca488"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>504</ID>
                  <Description>"Haste Helm"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Mobility_MomentumOnCombatStart_Helmet

Item Description:
The helm throbs when violence is near_ filling the wearer with a compulsion to act.
]]
local items = {
  "94cc605d-e407-408d-acb6-9e2e31dfb283"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>505</ID>
                  <Description>"Hat"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Hat

Item Description:

]]
local items = {
  "4d2e0931-3a01-4759-834b-8ae36749daab"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>506</ID>
                  <Description>"Hat"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Hat_Rich

Item Description:

]]
local items = {
  "4d2e0931-3a01-4759-834b-8ae36749daab"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>507</ID>
                  <Description>"Hat of Fire Acuity"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Fire_ArcaneAcuityOnFireDamage_Hat

Item Description:
It is said some wizard hats grant the power to keep your head cool - both literally and figuratively.
]]
local items = {
  "dbd8a255-771c-4c3e-b3d6-65d744b2cbd8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>508</ID>
                  <Description>"Hat of Storm Scion's Power"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Thunder_ArcaneAcuityOnThunderDamage_Hat

Item Description:
Two sigils glow white where the hat brushes your temples - something is being tapped into_ something distant and fearsome.
]]
local items = {
  "fa68c8ad-67d7-4680-88bc-f0b066e71761"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>509</ID>
                  <Description>"Hat of the Sharp Caster"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfSharpCaster_Hat

Item Description:
All you need now is a holster for your wand_ tobacco to chew_ and some sort of pack animal to ride_ and you'll look like a complete and utter bingus.
]]
local items = {
  "5be5a605-ddeb-4244-ba05-551ec86297fa"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>510</ID>
                  <Description>"Hat of Uninhibited Kushigo"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Monk_Magic_Hat

Item Description:
Coming upon a wise woman_ Kushigo got drunk and grew maudlin_ and told her about Irishi's scalping. She gave him some clothes - light and fine - and encouraged him to take his time to grieve. He did.____And_ when he was ready_ he fought again_ uninhibited by steel or fellowship - for they only weighed him down. 
]]
local items = {
  "4d444e63-152c-48b7-a198-7027fb5904f0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>511</ID>
                  <Description>"Hat Of Uproarious Laughter"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Hat_Circushat

Item Description:
The insides of this hat have clasps_ not for gloves or cards_ but rather for a portable custard pie gag.
]]
local items = {
  "42aa49c5-8ad2-4c2d-bb60-16016fa53205"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>512</ID>
                  <Description>"Headband of Intellect"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_HeadbandOfIntellect

Item Description:
An elegant circlet_ best worn by those with an affinity for the magical arts.
]]
local items = {
  "8779b30f-dc6f-4264-b7af-9dc0eff51bb0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>513</ID>
                  <Description>"Helldusk Helmet"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Infernal_Metal_Helmet

Item Description:
It is said that Carixim_ the fiendish titan whose flesh squirms with twenty-thousand trapped souls_ forged the pieces of this armour set. 
]]
local items = {
  "1c198060-6b6a-41c5-82ce-a3d3c3d76404"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>514</ID>
                  <Description>"Hellgloom Helmet"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Lesser_Infernal_Metal_Helmet

Item Description:
'When I found Carixim_ he turned to me_ with all those poor people's souls crammed into him_ and he... he grinned at me. He said_ _I been expecting you_ boy._' - Overheard from the smith Dammon
]]
local items = {
  "2b69a73f-0d1b-4514-bdae-5565a8045e26"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>515</ID>
                  <Description>"Helm of Arcane Gate"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_ARM_OfTeleportation_Helm

Item Description:
The skullcap inside the helm is embroidered with the likeness of a pair of gorgeous gateways_ tethered by a cord of light. 
]]
local items = {
  "fef0dda1-1d06-45b5-a302-a31e545b8ede"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>516</ID>
                  <Description>"Helm of Balduran"</Description>
                  <Color>4080FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_WYRM_OfBalduran_Helmet

Item Description:
This helm_ worn atop the pate of Balduran the Brave_ still gleams as if with the untarnished splendour of his legacy. Baldur's Gate itself bears his name_ and tales of his exploits have turned the heads and hearts of many. 
]]
local items = {
  "0a64283a-1fc4-45cd-9e5e-f463f6b762ea"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>517</ID>
                  <Description>"Helmet"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Helmet_Metal

Item Description:
Any padding that once lined this helmet has long since worn away.
]]
local items = {
  "67a87879-533e-4f9b-8274-f5bd37748ace"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>518</ID>
                  <Description>"Helmet of Arcane Acuity"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ElementalGish_ArcaneAcuity_Helmet

Item Description:
Subtle magics are woven into the helmet's leather panes - for a powerful offence is sometimes still the best defence.
]]
local items = {
  "df71a665-a179-43b3-89ee-2e355166fa9b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>519</ID>
                  <Description>"Helmet of Autonomy"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_FairyRing_AntiCharmHelmet

Item Description:
The metal bolted to the helmet's forehead is engraved with a faded script. Though the words have become unintelligible_ their magic remains.
]]
local items = {
  "a47c13a1-1a8e-4b3b-9cd9-53cf9c7058f0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>520</ID>
                  <Description>"Helmet of Grit"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LowHP_BonusAction_Helmet

Item Description:
At the barest touch_ you feel a surge of exuberance and stamina - like you could take on anyone and anything.
]]
local items = {
  "d98595e1-0722-4200-ab73-5e88269519fa"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>521</ID>
                  <Description>"Helmet of Smiting"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Paladin_SmiteSpellsSupport_Helmet

Item Description:
A set of runes has been expertly worked into the helmet's filigree. Almost imperceptible - but powerful nonetheless.
]]
local items = {
  "0ae1e62c-b36a-4dbc-97fb-e0658b454974"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>522</ID>
                  <Description>"Holy Lance Helm"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Radiant_Radiating_Helmet

Item Description:
Brief halos of divine light wrap your head when you don and doff this helmet. 
]]
local items = {
  "5b3c40c5-b0c0-44b5-9b75-e642069fd2cc"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>523</ID>
                  <Description>"Hood of the Weave"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_EndGameCaster_Hood

Item Description:
Worn by the wizard Tenser when he was inducted into the Circle of Eight.
]]
local items = {
  "c5a627ff-7fc5-4cde-81ca-e4fb57cb38d6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>524</ID>
                  <Description>"Horns of the Berserker"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Hat_Barbarian_Hide

Item Description:
This was created by a designer and an enchanter who were going through a messy divorce at the time. As such_ the armour is filled with active-aggressive rage. It also makes you feel like you've wasted the last ten years picking up after a complete tit.
]]
local items = {
  "271af9f0-409d-4b14-8277-95a36b8dd543"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>525</ID>
                  <Description>"Ignoble Hat"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Hat_MuffinHat_A

Item Description:
Foppish and fluffy and built for just the right sort of dome accustomed to having it set upon the head by other people.
]]
local items = {
  "90008c9b-ca19-46c1-9c2b-7164983de6da"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>526</ID>
                  <Description>"Infernal Mask"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_OrpheusChains_Helmet

Item Description:
Power radiates from this like heat from the sun.
]]
local items = {
  "520666df-5f1b-4fd9-983e-c0753f224855"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>527</ID>
                  <Description>"Jannath's Hat"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LC_Jannath_Hat

Item Description:
The corner of modern fashion that this hat currently occupies might well be called Optimistic. 
]]
local items = {
  "62189421-f3e5-4ebc-927a-26bc0ebf844a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>528</ID>
                  <Description>"Key of the Ancients"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_Druid_Helmet_Circlet

Item Description:
The branches of this circlet are half-fossilised_ passed down through generations of druids. Fabricated during the founding of the grove_ the wreath is forever linked to its lands_ the tiny rubies connected to its stones and structures_ bidding them to do their bidding.
]]
local items = {
  "f4bef44e-57f1-47b5-ab2d-2457ff21c707"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>529</ID>
                  <Description>"Leather Helmet"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Helmet_Leather

Item Description:
Layers of leather were boiled and moulded to create this rugged cap. It still smells a bit of tannins.
]]
local items = {
  "c58a1f91-ec1b-49c8-96ab-d94d4be4b584"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>530</ID>
                  <Description>"Marksmanship Hat"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ofMarksmanship_Hat

Item Description:

]]
local items = {
  "f67b0733-ad73-4d1b-94fd-e3e0236623ca"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>531</ID>
                  <Description>"Mask of Soul Perception"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Monk_SoulPerception_Hat

Item Description:
Formerly worn by Autumnal Baskin_ a professional meditator turned bare-knuckle champion_ who gained enlightenment via two methods. The first was giving up her addictive reliance on secluded caves and lonely mountaintops_ and getting a bit more sociable. This involved many new skirts. Most of them lavender. 
]]
local items = {
  "bfd9ef48-7251-4259-86b0-6646f5f99d72"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>532</ID>
                  <Description>"Mask of Soul Perception"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BarbMonk_Cloth_Hat_A_2_Late

Item Description:
Formerly worn by Autumnal Baskin_ a professional meditator turned bare-knuckle champion_ who gained enlightenment via two methods. The first was giving up her addictive reliance on secluded caves and lonely mountaintops_ and getting a bit more sociable. This involved many new skirts. Most of them lavender. 
]]
local items = {
  "bfd9ef48-7251-4259-86b0-6646f5f99d72"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>533</ID>
                  <Description>"Mask of the Shapeshifter"</Description>
                  <Color>4080FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfTheShapeshifter_Mask

Item Description:
The magic of this mask comes from its gory provenance_ and makes it perfect for the discerning actor_ sleuth_ or person with a mirror and time to kill. 
]]
local items = {
  "5d66776d-0650-4512-b300-b2ac38e2be3a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>534</ID>
                  <Description>"Oathbreaker Knight Helmet"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Oathbreaker_Helmet

Item Description:

]]
local items = {
  "ae1dc399-3706-447e-8c79-f8a35c035ec4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>535</ID>
                  <Description>"Old Floppy Hat"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Hat_Wizard_B

Item Description:
Whacked around more often than a clown in a tragedy. 
]]
local items = {
  "65f78de8-f6aa-4080-84de-73e654b02883"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>536</ID>
                  <Description>"Pyroquickness Hat"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Fire_BonusActionOnFireSpell_Circlet

Item Description:
Merely holding the circlet makes your skin flush_ filling you with determination and righteous fury.
]]
local items = {
  "d5e4dce0-4385-4fae-a601-22a11fe0b2af"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>537</ID>
                  <Description>"Reinforced Helmet"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
HAG_SwampedHero_OldFancyHelmet

Item Description:
Forged from an unfamiliar alloy. Uncommonly rugged.
]]
local items = {
  "910ed403-38b3-4128-b07b-0de5d14da8f8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>538</ID>
                  <Description>"Rufflesome Blaggart Hat"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Hat_MuffinHat_B

Item Description:
For the discerning ranonteur_ spinning of stories_ and peacockish personality.
]]
local items = {
  "3d3c949f-8fff-4133-b12e-3c739dbd6428"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>539</ID>
                  <Description>"Sarevok's Horned Helmet"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_ARM_Sarevok_Horned_Helmet

Item Description:
The last sight Sarevok witnessed as a mortal was his sibling's knife. This duel_ the first between Bhaalspawn_ is worshipped still by the cult of Bhaal_ who now believe that no act is more sacred than fratricide between spawn before the altar of their Dread Lord.
]]
local items = {
  "139b28dc-7db0-40b2-a383-3a4ce4c09812"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>540</ID>
                  <Description>"Scabby Pugilist Circlet"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BarbMonk_Leather_Circlet

Item Description:
Every adventuring party has at least one 'chaotic element'. In the case of one such party_ this was the infamous Scabby_ a barbarous goblin who was trained by monks.
]]
local items = {
  "48920bf4-85b0-44a1-9f6a-0ad8b493fa47"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>541</ID>
                  <Description>"Shadow of Menzoberranzan"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_ShadowOfMenzoberranzan

Item Description:
You sense the shadows that envelop this drowcraft cowl_ eagerly waiting to envelop you and shield you from view.
]]
local items = {
  "d46206c9-fb4f-44a4-a4f4-f70f8cd2a64c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>542</ID>
                  <Description>"Shapeshifter Hat"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Druid_Wildshape_Hat

Item Description:
'Trust is the most fundamental part of wild-shaping. Not trusting others_ but trusting yourself. Because the assumption of an animalistic form comes part and parcel with risk - that you'll like being a beast. Like it too much. You've got to trust yourself to the extent that you're comfortable courting that danger. Trust yourself the way you trust a marital partner with your heart.' - Mac T_re_ Moon Druid
]]
local items = {
  "e3720399-7a78-4073-aff7-cb0fb37b13eb"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>543</ID>
                  <Description>"Snakeskin Hat"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Hat_Wizard_H

Item Description:
As classic a design as one can hope for. It even has the frumpy wrinkles.
]]
local items = {
  "4a4e2cf1-a02f-41c4-b68f-5f5301f74577"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>544</ID>
                  <Description>"Steelwatcher Helmet"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Helmet_Human_Watcher

Item Description:
'When I found Carixim_ he turned to me_ with all those poor people's souls crammed into him_ and he... he grinned at me. He said_ _I been expecting you_ boy._' - Overheard from the smith Dammon
]]
local items = {
  "c2ef4013-e6d1-48da-99f0-db486c223a90"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>545</ID>
                  <Description>"The Lifebringer"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ChargedLightning_TempHP_Helmet

Item Description:
'Lightning is like magic_' Yrre the Sparkstruck once said. 'And what is magic but life itself_'
]]
local items = {
  "3ccc28a3-faa5-4664-a46a-39300b2d3803"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>546</ID>
                  <Description>"The Pointy Hat"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Wizard_Pointy_Hat

Item Description:
Sages over the course of ages have dealt very constructive and useful advice - however_ none so sagacious as that of the wizard Otiluke_ who once advised one of his students thusly_ 'Never cast Speak with Dead on a loved one if there's unresolved tension there. It's never worth it. Trust me.'
]]
local items = {
  "6c2e4f84-a8f2-4a91-81bf-488b497718a2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>547</ID>
                  <Description>"The Shadespell Circlet"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Shadow_SpellDCBonusWhileObscured_Circlet

Item Description:
One of the relics of Deep Duerra's rebellious children. Flanked by her court_ Duerra shook her head at her children. Had they really believed they could leave her_
]]
local items = {
  "f0e42b7e-4d6b-46fb-85d6-d577afc72040"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>548</ID>
                  <Description>"Tightening Orbit Helm"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ZOC_Force_Helmet

Item Description:
'Keep your enemies close_ and those you want to slit up closer.' - Popular nursery saying
]]
local items = {
  "5ac19da8-48bf-4a75-b312-430c1ab7cb41"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>549</ID>
                  <Description>"Wapira's Crown"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Healer_HealSelf_Helmet

Item Description:
Legends say a giant elk and a druid once formed a powerful friendship. When the elk laid down his life for the druid_ she crafted this helmet in honour of her beloved friend_ so his beauty and compassion would live on forever.
]]
local items = {
  "e305c00e-a231-41e4-86de-cbb320bafbc8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>550</ID>
                  <Description>"Warped Headband of Intellect"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
FOR_OgresForHire_HeadbandOfIntellect

Item Description:
This particular circlet is covered in yellow slime and has pieces of half-digested mutton stuck behind the gems.
]]
local items = {
  "8f4876f1-44d9-4bb8-802e-907c6b0a0dba"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>551</ID>
                  <Description>"Whispering Mask"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ACT1_HAG_HagMask

Item Description:
Soft_ unintelligible whispers seep from the dark wood_ ringing in your ears and resounding in your skull.
]]
local items = {
  "73690248-deea-4713-84d6-c1c8fb045869"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>552</ID>
                  <Description>"Wide-Brimmed Hat"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Hat_Wizard_G

Item Description:
Very wide brimmed_ really. Almost a kind of grinning sombrero.
]]
local items = {
  "ff47e1c4-f49f-460c-b6a6-dce635fa48c4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>553</ID>
                  <Description>"Wizard Hat"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Hat_Wizard_A

Item Description:
This wizardly hat has a little embroidered rabbit inside its lining - the rabbit is called snowball_ and once he was lost_ never to be found. 
]]
local items = {
  "07ad0e9f-7fb4-418f-a1ef-06b431c252be"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>554</ID>
              <Description>"MusicalInstrument"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>555</ID>
                  <Description>"Dostrealt's Piccolo"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_LOW_DostrealtsPiccolo

Item Description:
This petite flute_ engraved with drow sigils_ is said to have belonged to Captain Dostrealt of the spelljammer flitter 'Erevan's Clutch'.
]]
local items = {
  "09de8b63-12ad-43d5-a2cf-b9b32692e777"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>556</ID>
                  <Description>"Falataeric Cli Lyre"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_LOW_FalataericCliLyre

Item Description:
This exquisite instrument is said to come from the shop of the legendary Moonshaean bard Falataer. Fewer than twenty of his handcrafted lyres still survive.
]]
local items = {
  "3542b820-713a-4dd3-9cc8-35586f4e7f46"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>557</ID>
                  <Description>"Flute"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Instrument_Flute

Item Description:
It is said Diores the Charming once lured a nest of harpies to their deaths_ using only a flute.
]]
local items = {
  "848ad8dc-59f3-464b-b8b2-95eab6022446"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>558</ID>
                  <Description>"Glimmergad's Selgaunt Fiddle"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_LOW_GlimmergadSelgauntFiddle

Item Description:
The notorious gnomish bard Fiddlesticks Glimmergad was said to play violin tunes so sad they made bank guards weep - while his accomplices robbed the bank's vaults.
]]
local items = {
  "209c50b2-1e39-4484-905d-588741eba320"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>559</ID>
                  <Description>"Hand Drum"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Instrument_Drum

Item Description:
Whether sounding war_ celebration_ or simple rhythm_ the drum is a main-stay of any entertainer's arsenal.
]]
local items = {
  "76944b2f-1e79-4c22-8d9a-e6c30e5194e0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>560</ID>
                  <Description>"Kiam Goda's Kilat Drum"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_LOW_KiamGodasKilatDrum

Item Description:
A Lulutiun hand drum covered in sealskin_ like those played at koatulit peace festivals. Kiam Goda was famous for his finger-thumb taradiddles.
]]
local items = {
  "ab846656-a9f7-4ed5-93ae-85a8df39b5ac"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>561</ID>
                  <Description>"Lute"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Instrument_Lute_B

Item Description:
Many a bard's first instrument_ the lute is heard in taverns all across Faer_n.
]]
local items = {
  "f2487101-548f-4494-9ec8-b20fa3ad6f7b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>562</ID>
                  <Description>"Lute"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Instrument_Lute

Item Description:
Many a bard's first instrument_ the lute is heard in taverns all across Faer_n.
]]
local items = {
  "8f98a7e7-c773-4b58-9127-5cf79b9206e9"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>563</ID>
                  <Description>"Lute of the Merryweather Bard"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
DLC_DD_Lohses_Lute

Item Description:
An old lute that hums with the voices of numerous sprites and spirits. 
]]
local items = {
  "35a38ec0-8902-46bf-ae84-f2361e713b7e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>564</ID>
                  <Description>"Lyre"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Instrument_Lyre

Item Description:
Devotees of the goddess Sune hold that the lyre's seven strings represent the seven different forms of love. 
]]
local items = {
  "13739f15-7366-4d7f-9926-991e98b9e964"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>565</ID>
                  <Description>"Stolyarof's Table Lute"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_LOW_StolyarofsTableLute

Item Description:
This heavy_ deep-voiced instrument is of the type called a 'table lute' due to its weight. Famously_ the late Ahndri Stolyarof refused to let anyone else play it.
]]
local items = {
  "59a1ed6f-b530-44b2-972e-2a73e02080cb"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>566</ID>
                  <Description>"Violin"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Instrument_Violin

Item Description:
A violin of cedar and burled walnut. The pegs are a little scuffed_ the strings thin and worn_ but the song from this instrument would still ring clear and true.
]]
local items = {
  "aca5d144-773b-42ba-aca1-6903c60c418c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>567</ID>
              <Description>"Ring"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>568</ID>
                  <Description>"A Sparking Promise"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ChargedLightning_EnsnaringShock_Ring

Item Description:
A year into their union_ Lenore_ cleric of Mystra_ gifted the gnome inventor Yrre an invention of her own devising - a ring that held a spell of sparks. Eventually_ the touch of Lenore's hand faded to a glinting memory_ but the ring's tingling grip remained resolute.
]]
local items = {
  "5c8235c3-1aad-4b6d-bd0c-9753c77da5d2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>569</ID>
                  <Description>"Absolute's Smite"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
FOR_DeathOfATrueSoul_TrueSoul_Ring

Item Description:
This ring coaxes anyone branded by the Absolute. Their fingers veritably itch to slip it on.
]]
local items = {
  "f09b6c2f-e5f3-43df-82c7-9ed5862a7421"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>570</ID>
                  <Description>"After Death Do Us Part "</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
LOW_KerriRing_Ring

Item Description:
Love is the last cruel leaf to fall in an autumn wide with sorrow. 
]]
local items = {
  "d874115c-6b92-4222-b1a2-594cf111b075"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>571</ID>
                  <Description>"Amethyst Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_D_Gold_A

Item Description:
An unusual piece_ this gold-studded amethyst caused a stir at the Wide plaza in Baldur's Gate.
]]
local items = {
  "b7aab838-cafa-4b7d-a8d5-95ec3488f909"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>572</ID>
                  <Description>"Amethyst Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_D_Silver_A

Item Description:
The silver band's cool undertones highlight this ring's vivid purple gemstone.
]]
local items = {
  "a9f741f6-a758-47ea-bb21-9a37d3ddfe42"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>573</ID>
                  <Description>"Band of the Mystic Scoundrel"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ArcaneTrickster_Ring

Item Description:
What better way to disguise one's transgressions than a quickly positioned phantasm after the deed is done_
]]
local items = {
  "5b74c9d8-cb88-4a29-99c4-25d98c7d88f7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>574</ID>
                  <Description>"Bracing Band"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Shove_ACboost_Ring

Item Description:
A common ring_ simple and unadorned. Though there is a certain heft to it...
]]
local items = {
  "c714fc94-eeaf-4622-9375-545261867514"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>575</ID>
                  <Description>"Bronze Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_F

Item Description:
A cheap ring_ decorated only with a sizeable green agate.
]]
local items = {
  "5dafe8e9-8437-4347-96eb-98b58efaacf6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>576</ID>
                  <Description>"Bronze Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_D

Item Description:
A purple gemstone set in bronze_ this ring has been crafted by a steady and practised hand.
]]
local items = {
  "9e1ef422-c33e-4429-a197-abc07a02d767"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>577</ID>
                  <Description>"Burnished Ring"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ParalyzingRay_Ring

Item Description:
A paralysing eyestalk harvested from a beholder was boiled in a broth_ and poured down the throat of a dwarven ringsmith. Not one fortnight thence_ he crafted this ring.
]]
local items = {
  "7902afa6-2b17-4052-beb2-2a1bced5c6e6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>578</ID>
                  <Description>"Callous Glow Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Radiant_DamageBonusOnIlluminatedTarget_Ring

Item Description:
A grudging gleam emits from this ring - more an indictment of light than an endorsement.
]]
local items = {
  "afdcde80-f976-4781-86be-75a5fb0ae05e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>579</ID>
                  <Description>"Carnelian Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_C

Item Description:
Considered a token of good fortune_ this ring's stones are perfectly smooth.
]]
local items = {
  "d4d7ed7f-3b51-4be4-8b3c-15dcd4f9de91"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>580</ID>
                  <Description>"Caustic Band"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Acid_AcidDamageOnWeaponAttack_Ring

Item Description:
Adjusting this unassuming ring on your finger_ you hear a faint sizzle_ as of pressure being released.
]]
local items = {
  "463b0a81-1fc3-4db1-bafe-a915f9a8e028"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>581</ID>
                  <Description>"Copper Band"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_G

Item Description:
This chunky copper ring is embedded with dark green stones.
]]
local items = {
  "5f2b3262-bc71-4873-beb5-b51968e565ee"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>582</ID>
                  <Description>"Copper Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_E

Item Description:
Inlaid with semi precious stones_ this ring looks expensive - at first glance.
]]
local items = {
  "8b1c2137-76e4-4a47-bebb-cf50847aca08"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>583</ID>
                  <Description>"Coruscation Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Radiant_RadiatingOrb_Ring

Item Description:
Provocative light blooms from the engraved contours of this ring. 
]]
local items = {
  "3bd041cf-bff5-4464-9002-5c17b957b3c7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>584</ID>
                  <Description>"Crypt Lord Ring"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfUndeadServant_Ring

Item Description:
Slipping one's finger through this ring fills the senses with the waft of tombs_ the urine-yellow smell of old bandages_ images of dead spiders curled into husks_ and the sensation of hot_ slobbering breath at the nape of one's neck. 
]]
local items = {
  "e86c0cbb-9791-4cc7-95ba-9821902119fa"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>585</ID>
                  <Description>"Dark Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_I

Item Description:
With a sharpened gemstone at its centre_ this ring is capable of cutting the very flesh it decorates. 
]]
local items = {
  "5b22795e-8193-4933-98f9-9667d6f60b53"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>586</ID>
                  <Description>"Djinni Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_WYR_Circus_WheelRing

Item Description:
The ring from the djinni who worked in the circus. Its magic certainly explains how the djinni was able to cheat at the wheel.
]]
local items = {
  "258f4d35-959c-497b-a38a-df3a1e71f3a0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>587</ID>
                  <Description>"Emerald Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_B

Item Description:
Imported in bulk from Calimshan_ the gemstone set in this ring is roughly finished and marred with visible flaws.
]]
local items = {
  "7ff7d7b1-6fdd-44b7-b0ca-d9f4ebf5bb72"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>588</ID>
                  <Description>"Emerald Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_Copper

Item Description:
Imported in bulk from Calimshan_ the gemstone set in this ring is roughly finished and marred with visible flaws.
]]
local items = {
  "7ff7d7b1-6fdd-44b7-b0ca-d9f4ebf5bb72"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>589</ID>
                  <Description>"Emerald Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_DrunkGoblinRing

Item Description:
Imported in bulk from Calimshan_ the gemstone set in this ring is roughly finished and marred with visible flaws.
]]
local items = {
  "41eed7f8-308a-4ab8-9f47-8ef619d6da57"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>590</ID>
                  <Description>"Eversight Ring "</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Shadow_BlindImmunity_Ring

Item Description:
One of the relics of Deep Duerra's rebellious children. Paranoid by nature_ Duerra had erected a vast array of biting_ blasting_ blinding traps and safeguards to keep her enemies from gaining her sanctum.____Of course_ this also meant her children were sealed in with her by those same deadly measures.
]]
local items = {
  "0661eb9b-0924-450d-923b-1e371de444ae"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>591</ID>
                  <Description>"Explorer's Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_MushroomHunger_RingOfExploration

Item Description:
A radiant and remarkably preserved ring_ forged from arandur metal.
]]
local items = {
  "046598e3-8cb4-497c-bfd2-866ff88b50db"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>592</ID>
                  <Description>"Family Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
SCL_MAG_SkepticalRobber_WifesRing

Item Description:
The ring's simplicity is a deceit. Its gold core is woven with iron-hard feathers from the wings of great black corvid birds_ envoys of the Raven Queen.
]]
local items = {
  "d337a7fe-dcbf-446c-a595-00b30f8f2e58"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>593</ID>
                  <Description>"Fetish of Callarduran Smoothhands"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_DeadInWater_CallarduranTrinket

Item Description:
The smooth_ six-pointed star on this ring is beset with small Underdark gemstones_ as befits a talisman of the god of mining and patron of deep gnomes.
]]
local items = {
  "f2b2327e-0aae-4389-87fb-cc999f7121ed"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>594</ID>
                  <Description>"Garnet Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_H

Item Description:
The garnet at the centrepiece of this ring is like an unblinking_ malevolent eye.
]]
local items = {
  "f284c260-84d9-45d6-8a15-257401f361dc"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>595</ID>
                  <Description>"Garnet Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_B_Gem_A_Gold

Item Description:
The garnet embedded in this tarnished ring has been lovingly polished - the band worn thin from use.
]]
local items = {
  "8eba01b5-b731-447f-887e-0cf0dd4d53d4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>596</ID>
                  <Description>"Garnet Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_H_Gold_A

Item Description:
When the light catches_ this ring shines like a smouldering flame.
]]
local items = {
  "638307c5-20ec-41a3-8c2f-c86d56bbaf73"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>597</ID>
                  <Description>"Gold Band"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_G_Gold_A

Item Description:
A weighted gold ring embellished with emeralds of varying sizes. Simple_ but elegant. 
]]
local items = {
  "b72c3fb7-c172-4dfa-81bb-f924a3c1ec19"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>598</ID>
                  <Description>"Gold Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_B_Gem_B_Gold

Item Description:
A mythical creature_ depicted in full flight_ has been delicately carved into this ring.
]]
local items = {
  "2a4b298c-88cb-4951-b244-2e65e6819945"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>599</ID>
                  <Description>"Gold Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_A_Gem_A_Gold

Item Description:
A date was once engraved on the inside of this ring_ but most of it has long since been worn away by time.
]]
local items = {
  "173aad0e-0db4-4f2f-8f24-49e6898b8f90"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>600</ID>
                  <Description>"Gold Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_E_Gold_A

Item Description:
Multiple amethysts fresh off the boat from Chult line this ring's band.
]]
local items = {
  "aa39ec3a-55c5-465c-8a3f-d5eb810c073f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>601</ID>
                  <Description>"Gold Ring "</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_C_Gold_A

Item Description:
Expertly formed and finished_ this ring catches the attention of admirers and thieves alike.
]]
local items = {
  "a631b70a-22e9-4e2c-bb07-2164c2beb5d0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>602</ID>
                  <Description>"Guiding Light"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_Tower_RingLight

Item Description:
Used by the previous owner to access both the Underdark's darkest corners and her own basement_ this ring seems to reflect light where there should be none.
]]
local items = {
  "70ad7889-e1e2-4c2f-980f-28eaa02c2022"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>603</ID>
                  <Description>"Guild Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
LOW_GuildRing

Item Description:

]]
local items = {
  "46b1d5d4-34e0-467e-b1b8-a43ae33f7541"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>604</ID>
                  <Description>"Hag's Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
HAG_HagsRing

Item Description:
Grimy_ discoloured_ and revoltingly ugly. Auntie Ethel must have made it herself. Surprisingly_ you feel no disgust. Instead it fills you with a longing_ as if it's calling out for its like.
]]
local items = {
  "139a436b-120a-413e-a36e-c0e2c970439c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>605</ID>
                  <Description>"Hermit Crab"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
CRA_HermitCrab_Ring

Item Description:
This creature's tiny appendages periodically creep out to poke at its surroundings.
]]
local items = {
  "bcd0ad1a-19b3-4068-a3b0-b968c8d50bf7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>606</ID>
                  <Description>"Keepsake Ring"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LOW_Rat_Keepsake_Ring

Item Description:
Created by a conglomerate of druids one moonlit night when all the stirring violins of insect_ elms_ and whispering winds consorted_ and when wild beasts in need of taming prowled unseen.
]]
local items = {
  "75a84557-5cc5-4e74-83a8-1353f84116ef"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>607</ID>
                  <Description>"Killer's Sweetheart"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Critical_CriticalExecution_Ring

Item Description:
Though the ring is highly polished_ darkened slivers of blood still cling to small scrapes and corners.
]]
local items = {
  "2f2d4bf3-6a14-43f5-81fe-e14aa9871215"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>608</ID>
                  <Description>"Mage's Friend"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_Tower_RingArcana

Item Description:
Though carefully stowed away in a bedside chest_ this ring is covered in dust and cobwebs.
]]
local items = {
  "4b6d7c53-43b5-4c17-8139-732ca0fc2972"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>609</ID>
                  <Description>"'Magic' Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
DEN_Thiefling_Ring5

Item Description:
The runes encircling this ring appear to have been scratched into the metal with a rock.
]]
local items = {
  "eb4e9410-3d33-4986-a5c2-8642ca5bbfc4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>610</ID>
                  <Description>"Obsidian Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_I_Gold_A

Item Description:
This ring's dark gemstone appears to steal the light from around it. 
]]
local items = {
  "65bb04bb-4313-4446-b250-727a712000c9"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>611</ID>
                  <Description>"Onyx Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_I_Silver_A

Item Description:
This silver band is inlaid with onyx and tempered to a sharpened point. Beautiful_ but dangerous.
]]
local items = {
  "fc5dbbb6-10ec-427d-abe5-a04f5182e332"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>612</ID>
                  <Description>"Orin's Temple Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_GLO_Orin_TeleportRing

Item Description:
Orin's Ring
]]
local items = {
  "66079879-2c5c-492a-8fb6-bfbae79475e6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>613</ID>
                  <Description>"Orphic Ring"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Orpheus_Ring

Item Description:
When light catches this ring at the right angle_ it pulses with a dizzying_ intoxicating glow befitting the jewellery of the Prince of the Comet. 
]]
local items = {
  "1789fae7-b4c9-48a6-8886-cd96687bf45f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>614</ID>
                  <Description>"Peridot Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_Silver

Item Description:
Considered sacred by some gnomes and halflings_ the gem set in this ring sparkles brilliantly. 
]]
local items = {
  "9c147265-5b32-44fe-af57-fa0d3f6c5712"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>615</ID>
                  <Description>"Peridot Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_B_Silver_A

Item Description:
Considered sacred by some gnomes and halflings_ the gem set in this ring sparkles brilliantly. 
]]
local items = {
  "9c147265-5b32-44fe-af57-fa0d3f6c5712"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>616</ID>
                  <Description>"Poisoner's Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Poison_PoisonLethality_Ring

Item Description:
Strange_ green fumes seep from the ring's emerald.
]]
local items = {
  "c4f364cc-daa1-4783-a474-b7ff394d2157"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>617</ID>
                  <Description>"Polished Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_E_Silver_A

Item Description:
Each purple gemstone set in this thin silver band has been polished until it gleams.
]]
local items = {
  "efe2746c-10d4-4082-9133-d05b6f7fa291"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>618</ID>
                  <Description>"Pyschic Bolstering Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Psychic_TempHP_Ring

Item Description:

]]
local items = {
  "13bc3b80-9e0e-44cc-a2e4-612eebfb385f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>619</ID>
                  <Description>"Ring of Absolute Force"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_KC_RingOfAbsolute

Item Description:
Darkness seems to blossom from this ring_ heightened by the menacing glare of the Absolute's symbol_ though for the Branded this symbol holds the promise of power.
]]
local items = {
  "c7a58f48-f24f-4139-b0f0-8b12e1bf074e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>620</ID>
                  <Description>"Ring of Arcane Synergy"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Gish_ArcaneSynergy_Ring

Item Description:
The sharp silver corners of this ring almost cut into the stone set in its centre - a gem of which you've never seen the like before.
]]
local items = {
  "fa7b47e8-d411-4379-b68a-8ceb26891265"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>621</ID>
                  <Description>"Ring of Beguiling "</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Illithid_CharmPerson_Ring

Item Description:
Whispers in the Deep Speech of the Underdark insinuate themselves into the mind of whoever so much as brushes against the burnished metal of this ring. 
]]
local items = {
  "931bdffe-0a36-4645-89f9-5ea7ec2eeb7f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>622</ID>
                  <Description>"Ring of Being Really Invisible"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
DEN_Thiefling_Ring1

Item Description:
This ring is missing its gem - or perhaps it's just very invisible.
]]
local items = {
  "1abd032b-c138-45ee-b85e-62b5bbb6ea2d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>623</ID>
                  <Description>"Ring Of Blink"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfBlink_Ring

Item Description:
Fashioned by the wizard Bigby in honour of his faithful hound Bigboy_ who could use teleportation to fetch_ snare errant cats_ and generally harass postmen. 
]]
local items = {
  "ec81c059-7d71-42ba-8970-cc77b9864967"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>624</ID>
                  <Description>"Ring of Colour Spray"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
DEN_HarpyMeal_NestRing

Item Description:
When the light hits it just so_ the centre jewel shimmers with every colour of the rainbow.
]]
local items = {
  "eadad0c4-d4a5-45cb-b4c3-e16a9b3ebe0a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>625</ID>
                  <Description>"Ring of Elemental Infusion"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ElementalGish_ElementalInfusion_Ring

Item Description:
The mysterious gem set in this ring seems to change hues whenever you aren't looking.
]]
local items = {
  "9ce563ca-82b0-4c28-bd82-8640fd0a5be3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>626</ID>
                  <Description>"Ring of Evasion"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_PHB_OfEvasion_Ring

Item Description:
Decorated with a hummingbird wrought of jade and sapphire_ this ring evokes the sheer wonderful quickness of that animal. 
]]
local items = {
  "57e350dc-5156-49a7-8994-0f6a8eca08ea"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>627</ID>
                  <Description>"Ring of Exalted Marrow"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Myrkulites_RingofMyrkul_Ring

Item Description:
Gazing through this ring_ you find that there is no other side_ only a small sucking blackness that defies explanation.
]]
local items = {
  "6594c1e3-0868-4efd-a93c-b6f4b3bd034d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>628</ID>
                  <Description>"Ring of Feywild Sparks"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfFeywildSparks_Ring

Item Description:
This otherwise unassuming ring ties a spellcaster indelibly to the sporadic arcana of the Faerie realm.
]]
local items = {
  "a4813d7b-2ff0-488b-8152-a27cb75e8d8e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>629</ID>
                  <Description>"Ring of Fire"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Fire_IncreasedDamage_Ring

Item Description:
A burning heat radiates from this ring_ warming the wearer from head to toe.
]]
local items = {
  "146e88ea-85ca-469b-9ce0-60be52613f2d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>630</ID>
                  <Description>"Ring of Flinging"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Harpers_RingOfProjection

Item Description:
Organisations like the Harpers do not relegate their activities to head-to-head combat - many a moonlit chase with an evildoer has been resolved with a loose roof tile and a decent throwing arm. 
]]
local items = {
  "4aba2198-98f9-4ec8-8a1b-bbd9ed864856"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>631</ID>
                  <Description>"Ring of Free Action"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_PHB_OfFreeAction_Ring

Item Description:
The heart of the gem seems to flow like liquid - yet it contains neither quicksilver nor mercury.
]]
local items = {
  "50379f58-7892-44cb-be6e-146a60070055"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>632</ID>
                  <Description>"Ring of Geniality "</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Harpers_RingOfAttraction

Item Description:
Glibness is not only in the tongue_ but in the body. Gesture is powerful. Think of how many words of comfort can be stored and saved_ when a hug will do just as sweetly. 
]]
local items = {
  "6c6c956e-80d3-4382-b651-b647ed0a998b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>633</ID>
                  <Description>"Ring of Infinite Wishes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
DEN_Thiefling_Ring3

Item Description:
The exterior of this ring is roughly carved with nonsensical runes.
]]
local items = {
  "1f2df119-5ca2-4860-ba0c-ecbb9c140e37"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>634</ID>
                  <Description>"Ring of Jumping"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_PHB_OfJumping_Ring

Item Description:
The ring is scuffed and twisted out of shape_ as if worn by big stony fingers. The owner of those fingers has carved 'Karthol' into the warped metal in a fit of affection or possessiveness.
]]
local items = {
  "cddea208-03cc-4b67-969d-a038bb233e5d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>635</ID>
                  <Description>"Ring of Mental Inhibition"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Psychic_MentalOverload_Ring

Item Description:
The patterns in the ring's swirling metal make your head spin whenever you look at them for too long.
]]
local items = {
  "70893b6f-b0de-4f4e-af9f-f10e2c09bd1e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>636</ID>
                  <Description>"Ring of Mind-Shielding"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_UND_RingOfMindShielding

Item Description:
This ring is forged from a smooth_ alien metal_ capped with eyes of emerald that watch the world unblinking.
]]
local items = {
  "c8f05ff8-58f9-49f9-8ea7-abda1fea27d6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>637</ID>
                  <Description>"Ring of Poison Resistance"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_RingOfPoisonResistance

Item Description:
The ring's emerald glows a deep_ deadly green.
]]
local items = {
  "35688051-90df-40e1-890b-c3cde2c82fde"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>638</ID>
                  <Description>"Ring of Protection"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_PHB_Ring_Of_Protection

Item Description:
Elegant motifs of warding - shields_ targes_ bucklers_ and buffers - are faintly impressed into the metal round of the ring. 
]]
local items = {
  "1352a999-76cc-46c5-a67a-26edc2011911"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>639</ID>
                  <Description>"Ring of Regeneration"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_PHB_OfRegeneration_Ring

Item Description:
This ring is_ in effect_ a tiny field medic that won't charge you 70 gold pieces for a fifteen-minute consultation.
]]
local items = {
  "d6ee2594-7373-4fed-a167-f9d95cb4ecfd"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>640</ID>
                  <Description>"Ring of Resistance to Ants"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
DEN_Thiefling_Ring2

Item Description:
A glob of tree sap studded with dead ants occupies the space where this ring's stone once sat.
]]
local items = {
  "4ca7ff5f-2c7b-407c-b754-b227d6e4fc31"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>641</ID>
                  <Description>"Ring of Salving"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_SocietyOfBrilliance_PullingRing

Item Description:
A hymn to Eilistraee is inscribed along the inside of this ring_ which is surprisingly heavy when worn.
]]
local items = {
  "a6fe2fbc-b0f8-4c35-a3ab-d5deb6aa2978"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>642</ID>
                  <Description>"Ring of Self Immolation"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Fire_SelfImmolation_Ring

Item Description:
Every one of the three gems in this ring is searing hot - enough to burn yourself with the slightest brush of your fingers.
]]
local items = {
  "69362d04-4569-4ec8-8946-c20ee2dc1490"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>643</ID>
                  <Description>"Ring of Shadows"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_PassWithoutTrace_Ring

Item Description:
For some_ darkness is wielded like a black opal stud embedded in a signet ring - fashioned to a sharp and unforgiving point.
]]
local items = {
  "c0bce741-9829-49c5-9778-426f2b00a642"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>644</ID>
                  <Description>"Ring of Spiteful Thunder"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Thunder_InflictDazeOnThunderDamage_Ring

Item Description:
When you slip this ring on your hand and flex your fingers_ a boom of discontented thunder grumbles in the air around you. 
]]
local items = {
  "5c05ff73-9d0d-4d58-b93a-e4b448a1e388"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>645</ID>
                  <Description>"Ring of the Lekinesus"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
DEN_Thiefling_Ring4

Item Description:
A small pebble swings from a length of fishing line tied to this copper ring.
]]
local items = {
  "46e1228a-6682-4766-af76-bf5a42fe8611"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>646</ID>
                  <Description>"Ring of Truthfulness"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_WYRM_OfTruthTelling_Ring

Item Description:
'Fib now_ and forever hold your teeth.' - Folk saying
]]
local items = {
  "d897788f-6bed-498a-a87d-c205c7195525"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>647</ID>
                  <Description>"Ring of Twilight"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Harpers_RingOfTwilight

Item Description:
Dark smoke swirls in the ring's onyx_ protecting something within.
]]
local items = {
  "252584f5-e8b8-4ad8-8776-b3a2bb9e0823"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>648</ID>
                  <Description>"Risky Ring "</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_RiskyAttack_Ring

Item Description:
Life is just a series of risks taken while blindfolded. 
]]
local items = {
  "6fa51fb6-0c99-4e2e-bf3c-f4fe18fd64a7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>649</ID>
                  <Description>"Ruby Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_C_Silver_A

Item Description:
The setting around the ruby is chipped and scratched_ as if somebody had tried to lever the gem free.
]]
local items = {
  "81d843ad-2343-4964-b5d0-3db44dfee4e1"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>650</ID>
                  <Description>"Ruby Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_H_Silver_A

Item Description:
A ruby like a drop of blood sits at the centre of this ring.
]]
local items = {
  "5cbedb00-e900-439e-9035-50ab581fc5b9"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>651</ID>
                  <Description>"Sandthief's Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
SHA_SandthiefsRing

Item Description:

]]
local items = {
  "bf2949fe-6739-4149-ac68-106a00eec905"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>652</ID>
                  <Description>"Seemingly Gleaming Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_TheOptimist_Ring

Item Description:

]]
local items = {
  "743984c8-55a8-4045-9904-f0c84a0cf692"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>653</ID>
                  <Description>"Shadow Blade Ring "</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Shadow_ShadowBlade_Ring

Item Description:
One of the relics of Deep Duerra's rebellious children. Long ago in a foreboding realm called Hammergrim_ Deep Duerra_ daughter of the dour god Laduguer_ sired a great many heirs to her twisted corundum throne.
]]
local items = {
  "8cc165d7-0372-4f4b-b4ac-f424f4069af1"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>654</ID>
                  <Description>"Shadow-Cloaked Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
SCL_MastiffPoachers_Ring

Item Description:
Even in the brightest light_ this ring never gleams_ as if perpetually wrapped in shadow_ hungry for the dark.
]]
local items = {
  "9297096d-98d6-4637-9b7c-843af752505e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>655</ID>
                  <Description>"Shapeshifter's Boon Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ShapeshiftersBurgeon_Ring

Item Description:
'I'm a talented shapeshifter_ too. I can shapeshift a thin body into a fat body. All I need is a steady supply of mince pies and mulled wine.' - Overheard in a tavern in Daggerford
]]
local items = {
  "6853e585-e9c7-4f26-918e-995342b19d1a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>656</ID>
                  <Description>"Shifting Corpus Ring "</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_FlamingFist_ScoutRing

Item Description:
An shiny_ deceptively simple band_ designed to look like those worn by battlefield scouts and city pickpockets alike.
]]
local items = {
  "959e9aa6-b12b-4b71-83b4-0debdf647e9c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>657</ID>
                  <Description>"Silver Band"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_G_Silver_A

Item Description:
Calishite emeralds are embedded in this heavy silver ring.
]]
local items = {
  "34dceb64-7246-4a2a-b7c0-411725ce468e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>658</ID>
                  <Description>"Smuggler's Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
PLA_SmugglerRing

Item Description:
A subtle accessory prized by purveyors of the covert arts.
]]
local items = {
  "1b47637d-fdea-431f-a828-7ff8d9b4341e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>659</ID>
                  <Description>"Snowburst Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Frost_GenerateSurfaceOnColdDamage_Ring

Item Description:
A series of names have been scratched out_ one after the other_ on the inside of the ring. The last word_ untouched_ is not a name. It simply reads_ Mine. 
]]
local items = {
  "ee8d0bb8-ee1c-437c-b8e0-a9671b865c48"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>660</ID>
                  <Description>"Spurred Band"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Mobility_LowHP_Momentum_Ring

Item Description:
Tiny barbs prick the wearer when they're injured_ as if urging flight from danger.
]]
local items = {
  "699135e9-8932-4bde-8a17-8be5e11d873f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>661</ID>
                  <Description>"Strange Conduit Ring"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Gish_PsychicDamageBonusWhileConcentrating_Ring

Item Description:
In his speculative writing on arcane displacement_ the wizard Tenser notes the possibility for keenly focused minds to maintain spells_ and even unlock hidden potential while doing so.
]]
local items = {
  "c4194cee-6f9a-4c5e-8327-816d44c86316"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>662</ID>
                  <Description>"Sunwalker's Gift"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UND_SocietyOfBrilliance_DarkvisionRing

Item Description:
The ring's arcane jewel parts all but the darkest of shadows.
]]
local items = {
  "e8b6eb1d-c4f2-4b46-979c-ad3b9469030e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>663</ID>
                  <Description>"Szarr Family Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_LOW_SzarrRing

Item Description:
This ring carries the symbol of the Szarr family and has an inscription in some crusty old language.
]]
local items = {
  "846d27b5-c247-4049-9872-86171c172015"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>664</ID>
                  <Description>"Tarnished Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring

Item Description:
A cheap ring marred by rust and a thin patina of neglect.
]]
local items = {
  "ecf4a8a4-7859-4a82-8c08-0c9526f29500"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>665</ID>
                  <Description>"Tarnished Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_A_Simple_Gold

Item Description:
A cheap ring marred by rust and a thin patina of neglect.
]]
local items = {
  "ecf4a8a4-7859-4a82-8c08-0c9526f29500"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>666</ID>
                  <Description>"The Sparkswall"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ChargedLightning_Resistance_Ring

Item Description:
When the inventor Yrre met the cleric Lenore_ sparks flew. Apart_ they were in a rut_ but together_ they inspired each other to push the boundaries of innovation and invention. This ring is just one of their many scientific triumphs.
]]
local items = {
  "a72120e6-aa1c-4a2b-89ae-a0469fb5b088"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>667</ID>
                  <Description>"The Whispering Promise"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_MassHealRing

Item Description:
A soft_ soothing voice floats from this ring_ reciting a prayer over and over.
]]
local items = {
  "4aef9bb0-38a8-428e-8b87-6e462d612dd6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>668</ID>
                  <Description>"Till Death Do Us Part "</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
LOW_JannathRing_Ring

Item Description:
Love is the sweetest bird that might migrate to the charming country of your heart.
]]
local items = {
  "d5617279-2a10-4749-9d2d-686144178689"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>669</ID>
                  <Description>"Tourmaline Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_F_Gold_A

Item Description:
The warm tones of the gold band pair beautifully with this mint-green tourmaline. 
]]
local items = {
  "66dc3535-3757-403b-8236-de380bf3f4ca"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>670</ID>
                  <Description>"Tourmaline Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_F_Silver_A

Item Description:
A slim-fitting silver band_ decorated with a mint green gemstone.
]]
local items = {
  "49b84359-6a28-460e-af98-4526c5fca6fd"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>671</ID>
                  <Description>"True Love's Caress"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
TWN_BondedByLove_WifesRing

Item Description:
The most pragmatic and courageous lover ever known was_ of course_ Sorcha MacTire_ for whom the popular hairstyle is named_ and for whom many an extremely soppy poem has been written _most of them comparing her to geography_.
]]
local items = {
  "bf59a1e5-e3d1-48f1-9970-4aa3fdcaa780"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>672</ID>
                  <Description>"True Love's Embrace"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
TWN_BondedByLove_HusbandsRing

Item Description:
The scholar of love_ Joel Firris Baldidims_ writes that the next time he reads about a woman compared to a flower _or any feature of geography for that matter_ he's going to start knocking on poets' doors with a sledgehammer.
]]
local items = {
  "7becedf0-a90a-40d3-a726-e4e671f3d73f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>673</ID>
                  <Description>"Verdelite Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_Gold

Item Description:
Encased in delicately twisted gold_ this seafoam green stone is of the tourmaline variety.
]]
local items = {
  "5cd7c5d3-fb97-4757-b5fd-dcc7a43110a7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>674</ID>
                  <Description>"Verdelite Ring"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Ring_B_Gold_A

Item Description:
Encased in delicately twisted gold_ this seafoam green stone is of the tourmaline variety.
]]
local items = {
  "5cd7c5d3-fb97-4757-b5fd-dcc7a43110a7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>675</ID>
              <Description>"Shield"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>676</ID>
                  <Description>"Abdel's Trusted Shield"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_MissileProtection_Shield

Item Description:
Attached to this shield is a faded note. 'G_ I've found the best defence against an arrow is to be the one behind the bow - but this shield also does the trick in a pinch. Yours_ AA'
]]
local items = {
  "e308d17c-7278-44c1-b1fc-853ea3cf5c29"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>677</ID>
                  <Description>"Absolute's Protector"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Absolute_Protecter_Shield

Item Description:
The Absolute's power radiates from this shield_ invisible waves of energy beckoning to the Branded.
]]
local items = {
  "53b3317f-5a52-41c0-89ea-c6ef31adc4f7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>678</ID>
                  <Description>"Absolute's Warboard"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
GOB_Priest_Shield

Item Description:
Blood is smeared across the shield's face_ exalting wielders who bear the Absolute's mark.
]]
local items = {
  "3d57c1a7-2dee-4a0f-aa7a-e7b6574b75e3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>679</ID>
                  <Description>"Adamantine Shield"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_MeleeDebuff_AttackDebuff1_OnDamage_Shield

Item Description:
The dull shine of the adamantine promises this shield could take a thousand beatings - and still look as good as new.
]]
local items = {
  "96907713-b560-4daf-ab32-3c1aec3f3890"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>680</ID>
                  <Description>"Broken Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shield_Broken

Item Description:
This old splintered shield is no stronger than a child's toy.
]]
local items = {
  "d59619ef-320f-4c16-8e21-0644034f0c26"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>681</ID>
                  <Description>"Enforcer Shield"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Enforcer_NonLethalBlessing_Shield

Item Description:
The shield is so battered_ its metallic portions have the look of a creased grey shirt. However_ underneath those folds of steel_ scintillas of arcane light glimmer_ echoing the hidden power of the Enforcers.
]]
local items = {
  "35be7c52-fe89-4bec-9d15-0d7ddb94bf38"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>682</ID>
                  <Description>"Fossilised Shell"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_KuoToa_Shield_A

Item Description:
Sticky_ rope-like seaweed is wrapped around this oversized shell_ allowing it to be fashioned as a shield.
]]
local items = {
  "2099af4a-caa2-4e06-9b6d-fa6e9754bd09"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>683</ID>
                  <Description>"Fossilised Shell"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shield_GuardianOfFaith_Evil

Item Description:

]]
local items = {
  "65fff410-33fd-49a6-aacd-d24610bc0e7b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>684</ID>
                  <Description>"Fossilised Shell"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shield_GuardianOfFaith_Good

Item Description:

]]
local items = {
  "efdb7b03-83b0-4284-b1fb-06c5c78424d0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>685</ID>
                  <Description>"Fossilised Shell"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shield_GuardianOfFaith_Neutral

Item Description:

]]
local items = {
  "134a78a5-7a20-415a-9af1-5b141db51d42"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>686</ID>
                  <Description>"Gloomstrand Shield"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Harpers_ShieldsOfShadows

Item Description:
Supposedly fashioned around a lock of hair stolen from the head of the Prince of Gloomwrought_ shields of this ilk gladly welcome the dark. 
]]
local items = {
  "1977f0ae-4269-4024-bb3b-a4cca54fafe0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>687</ID>
                  <Description>"Glowing Shield"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_LowHP_TemporaryHP_Shield

Item Description:
Soft_ loving whispers emanate from this shield. Though barely audible and spoken in some long-forgotten language_ they make you feel safe.
]]
local items = {
  "3374ad91-ddcf-430a-bddd-f48e8699ade9"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>688</ID>
                  <Description>"Goblin Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Goblin_Shield_B

Item Description:
Thick spikes jut from this repurposed wooden tabletop.
]]
local items = {
  "89bb450f-d976-4981-b43e-b5d16948da1e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>689</ID>
                  <Description>"Iron-Banded Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shar_Shield

Item Description:
This thick oak shield is reinforced with a frame of rough-hammered iron.
]]
local items = {
  "e4b4c45f-0563-4b00-851c-30a64fcb18ec"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>690</ID>
                  <Description>"Iron-Banded Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Drow_Shield_Absolute

Item Description:
This thick oak shield is reinforced with a frame of rough-hammered iron.
]]
local items = {
  "004ab562-5cd4-4f1f-8aa5-497e7e2c5f4f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>691</ID>
                  <Description>"Iron-Banded Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Drow_Shield

Item Description:
This thick oak shield is reinforced with a frame of rough-hammered iron.
]]
local items = {
  "e4b4c45f-0563-4b00-851c-30a64fcb18ec"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>692</ID>
                  <Description>"Ironvine Shield"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Druid_Ironvine_Shield

Item Description:
Each whorl and groove and worm-curled twist of this shield evokes a tangle of bog-stuck trees in rain-swollen vines. 
]]
local items = {
  "eb06636a-8052-492e-bfb1-67fcb18358d1"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>693</ID>
                  <Description>"Justiciar's Greatshield"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Justiciar_Shield

Item Description:
It's never the shield that kills you - but hearing your frantic steel thudding uselessly against this reinforced oak in the darkness is a good sign the end is near. 
]]
local items = {
  "a189686a-cfcf-4157-9c18-f7a8e7f0be87"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>694</ID>
                  <Description>"Ketheric's Shield"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Ketheric_Shield

Item Description:
In the theatre of dreams_ Ketheric killed his wife every night. That wasn't how things happened... but always upon waking_ he would glare into the dark_ long-faced and solemn_ and he would think_ 'I keep you alive with my memories_ beloved. I kill you with what I've become.'
]]
local items = {
  "6cb88e48-70ce-4304-b3b6-db52d1880bec"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>695</ID>
                  <Description>"Metal Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shield_FlamingFist

Item Description:
Though the metal is only of moderate quality_ a proud_ flaming fist decorates the front of this shield.
]]
local items = {
  "ab10f66f-6e93-43f5-9384-82565f14124a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>696</ID>
                  <Description>"Motivator"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
LOW_DeadMansSwitch_Shield

Item Description:
This device will make something explode if the holder drops it.
]]
local items = {
  "10d9e4a8-8019-47a9-88e3-dac74f7b8ae5"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>697</ID>
                  <Description>"Organic Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_WoodWoad_Shield

Item Description:
These three small stumps make for a peculiar but effective shield.
]]
local items = {
  "41b07341-1bf3-450d-9303-377c035c09ac"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>698</ID>
                  <Description>"Rusty Studded Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shield_Rusty

Item Description:
Good for defending from stray flatulence_ but that's about it. 
]]
local items = {
  "8c02c87f-955d-4cc2-b547-f22462ad7106"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>699</ID>
                  <Description>"Safeguard Shield"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Safeguard_Shield

Item Description:
Magic got caught in this heirloom by being exposed to too many wizard family dinners.
]]
local items = {
  "3138b480-3ef6-42af-ba35-e4cad4e962ee"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>700</ID>
                  <Description>"Scrapwood Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Goblin_Shield_D

Item Description:
A hand-like symbol is artlessly painted on the front of this wood shield.
]]
local items = {
  "33ab760a-e617-4e12-a3c6-1758c83cc3a7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>701</ID>
                  <Description>"Scrapwood Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Goblin_Shield_A

Item Description:
This rough wooden shield is held together by strips of scrap metal_ bolted together with obvious haste.
]]
local items = {
  "dd7550d6-112d-476e-9234-4901a95bd7f6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>702</ID>
                  <Description>"Scrapwood Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Goblin_Shield_E

Item Description:
A hand-like symbol is artlessly painted on the front of this wood shield.
]]
local items = {
  "2ae874a1-4573-4de3-a595-444591564303"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>703</ID>
                  <Description>"Sentinel Shield"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_PHB_Sentinel_Shield

Item Description:
Clever enchantments dance between the grooves of this shield_ which emanates a magic of heightened awareness.
]]
local items = {
  "2baa835f-1422-43f0-9d2a-11e601fbb25e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>704</ID>
                  <Description>"Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shield_D

Item Description:
Pristine and unmarred_ this shield still smells faintly of varnish.
]]
local items = {
  "c069f1f2-1040-4c71-b796-5a95eecfa711"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>705</ID>
                  <Description>"Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_DeathKnight_Shield

Item Description:

]]
local items = {
  "5b8fe99f-56d9-48a8-a9d0-8290ebae6461"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>706</ID>
                  <Description>"Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shield_Azer

Item Description:
This shield bears the crest of a long-forgotten house.
]]
local items = {
  "89792dc1-221b-462e-adcb-026f2cafbb95"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>707</ID>
                  <Description>"Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shield_E

Item Description:
This shield bears the crest of a long-forgotten house.
]]
local items = {
  "89792dc1-221b-462e-adcb-026f2cafbb95"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>708</ID>
                  <Description>"Shield"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shield_2

Item Description:
This shield bears the crest of a long-forgotten house.
]]
local items = {
  "89792dc1-221b-462e-adcb-026f2cafbb95"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>709</ID>
                  <Description>"Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shield_Round_REF

Item Description:

]]
local items = {
  "4caecc0f-4ae3-4284-bc98-3f01593a8865"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>710</ID>
                  <Description>"Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shield_REF

Item Description:

]]
local items = {
  "84912ccc-b15c-4d6e-b69e-154f3fa2ebbe"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>711</ID>
                  <Description>"Shield _1"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
_Shield_Magic

Item Description:
Though dented in many places_ this shield shines like new.
]]
local items = {
  "cb2d6c27-ec29-4555-adf2-41e8c1952439"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>712</ID>
                  <Description>"Shield _1"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shield_1

Item Description:
Though dented in many places_ this shield shines like new.
]]
local items = {
  "cb2d6c27-ec29-4555-adf2-41e8c1952439"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>713</ID>
                  <Description>"Shield of Devotion"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_BG_OfDevotion_Shield

Item Description:
Any tales about the Paladins of Velen are so ancient as to be almost certainly hearsay. Irrefutable_ however_ is the powerful blessing they left on this ancient shield_ which inspires heart-fluttering bravery to this day.
]]
local items = {
  "a0bc3295-c01d-405e-8396-e0fa7e1e5340"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>714</ID>
                  <Description>"Shield of Returning"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Bonded_Shield

Item Description:
When asked how he felt about weapons that return to you when thrown_ famous adventurer Lupperdiddle Swires responded_ 'Not for me. They remind me too much of someone I used to know.'
]]
local items = {
  "3a8f9b79-1153-4128-8832-a306502fd512"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>715</ID>
                  <Description>"Shield of Scorching Reprisal "</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_FlamingFist_Flaming_Shield

Item Description:
Local rumour claims a devil's tear gives these city militia shields their fire - much to the chagrin of the barracks blacksmith.
]]
local items = {
  "8c7caa2a-7c11-4f0b-86a8-b8808057101b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>716</ID>
                  <Description>"Shield of Shielding"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OfShielding_Shield

Item Description:
Named in the style of Extremely Unimaginative Jimmy_ the geographer and interior decorator who named the 'waterfall' and the 'fireplace'.
]]
local items = {
  "dfeaa5fd-1f87-4f99-85b0-8f49664d691f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>717</ID>
                  <Description>"Shield of the Undevout"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_OB_Paladin_DeathKnight_Shield

Item Description:
Where once this shield would protect the rallying forces of good - now it pushes them back_ crushing them against their allies until they pop. 
]]
local items = {
  "b3571443-403b-431b-b4ba-3d943a500f4b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>718</ID>
                  <Description>"Spiked Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Goblin_Shield_C

Item Description:
Thick spikes jut from this repurposed wooden tabletop.
]]
local items = {
  "e0d5a057-328a-467d-b8fb-1bfd298d59e7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>719</ID>
                  <Description>"Studded Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Duergar_Shield_B

Item Description:
The side of this shield has a slightly lighter colour - as if part of it was cut away and replaced.
]]
local items = {
  "31c99c28-f062-44ba-9ee6-cf969af920c4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>720</ID>
                  <Description>"Studded Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shield

Item Description:
The side of this shield has a slightly lighter colour - as if part of it was cut away and replaced.
]]
local items = {
  "d2af60ea-1b72-4d25-a188-6d8bc4fe255b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>721</ID>
                  <Description>"Swires' Sledboard"</Description>
                  <Color>FF00FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_Steadfast_Shield

Item Description:
A gnomish adventurer once used this to outpace his enemies down a slope.
]]
local items = {
  "1cee750f-79c6-4109-8272-d27b97ef02df"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>722</ID>
                  <Description>"The Real Sparky Sparkswall"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_ChargedLightning_StaticDischarge_Shield

Item Description:
'Is there anything as beautiful as lightning striking all around you_' Yrre the Sparkstruck said_ letting lightning strike all around them.
]]
local items = {
  "93c2143c-1c9f-493e-9fee-2310c7bee672"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>723</ID>
                  <Description>"Training Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Toy_Shield

Item Description:
A light_ wooden shield_ full of dents and cuts.
]]
local items = {
  "e13facc6-aced-4b48-b239-b0e76448013f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>724</ID>
                  <Description>"Viconia's Walking Fortress"</Description>
                  <Color>4080FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_TheBulwark_Shield

Item Description:
'Walking Fortress' is a defensive technique reliant on a shield of this caliber. It involves upsetting your opponent who just wants to land a single blow.
]]
local items = {
  "4f313dde-14bb-43a2-abdd-07b2eb38b33a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>725</ID>
                  <Description>"Watcher's Shield"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
TWN_ShieldOfWatcher

Item Description:
To hold this shield is to be vigilant in duty_ wary of danger_ and mindful in crisis.
]]
local items = {
  "cb2b1ac8-5589-464f-ac9f-ccd6fd27ebed"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>726</ID>
                  <Description>"Wood Woad Shield"</Description>
                  <Color>00FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
MAG_WoodWoad_Nature_Shield

Item Description:
'And with her arm the dryad linked a man who had once been her lover_ and once of flesh and bone. Now his flesh was bark_ and his bone heartwood. In his eyes a feverish love still blazed like a thousand fireflies in a spring meadow.'
]]
local items = {
  "90ba50bd-3e65-42ec-9f21-6e07d3ed89ab"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>727</ID>
                  <Description>"Wooden Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Duergar_Shield_A

Item Description:
Blood splatters this shield - both inside and out.
]]
local items = {
  "747387ac-0dc7-47ab-8c69-75269ffc4dbc"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>728</ID>
                  <Description>"Wooden Shield"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Shield_C

Item Description:
Despite the chips and dents_ you can still make out the faded painting of a flower on the face of this shield.
]]
local items = {
  "4491fcaf-03bf-4087-baf3-b638657080f6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>729</ID>
              <Description>"Underwear"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>730</ID>
                  <Description>"Astarion's Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Astarion

Item Description:
Embroidered into the cloth_ 'If you're reading this_ you managed to bed or behead me. Either way_ you got lucky.'
]]
local items = {
  "4b30a649-fd88-4f64-a57b-1149d7b9ac41"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>731</ID>
                  <Description>"Halsin's Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Halsin

Item Description:
Why does it smell like a herb garden_ 
]]
local items = {
  "9ebb9117-a0ae-46f2-a243-8d67650e9586"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>732</ID>
                  <Description>"Jaheira's Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Jaheira

Item Description:
Embroidered with little ducks. 
]]
local items = {
  "91259e65-dd71-4312-ba3c-c55757978788"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>733</ID>
                  <Description>"Karlach's Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Karlach

Item Description:
How do these not burn off_ 
]]
local items = {
  "e865db4c-4df3-48e9-8cf3-5abad75510ba"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>734</ID>
                  <Description>"Lae'zel's Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Laezel

Item Description:
Built for function rather than fun. 
]]
local items = {
  "185ab1be-e93d-4518-b053-d6d4d7168d68"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>735</ID>
                  <Description>"Minsc's Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Minsc

Item Description:
Tight_ aerodynamic_ and built for maximum breathability. Humidity is no friend to hamsters.
]]
local items = {
  "48a3ffbe-f14e-4cfe-b45e-ebadb3af0fd4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>736</ID>
                  <Description>"Minthara's Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Minthara

Item Description:
Woven with as much toughened cobweb as cloth. 
]]
local items = {
  "73874ef8-a3c4-4a68-8d2a-ed3d580dfb52"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>737</ID>
                  <Description>"Netherese Briefs"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Gale

Item Description:
Energy crackles around these. Gale wouldn't... Surely he didn't enchant his...
]]
local items = {
  "5cdc0fe0-dbda-4f31-89f8-9e16782daef1"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>738</ID>
                  <Description>"Shadowheart's Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Shadowheart

Item Description:
If pants could brood... 
]]
local items = {
  "b460bd0c-58fe-4a56-831c-af92fd4ba7e2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>739</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Dwarves

Item Description:

]]
local items = {
  "9fecf84d-911f-4986-9454-0429ac437f45"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>740</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Githyanki_Black

Item Description:

]]
local items = {
  "1dc7ff19-a089-4289-8a4f-77c4be1c229d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>741</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Humans

Item Description:

]]
local items = {
  "d40b567d-6b66-447e-8923-2bbd0d7aea00"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>742</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear

Item Description:

]]
local items = {
  "d40b567d-6b66-447e-8923-2bbd0d7aea00"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>743</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_HalfOrcs

Item Description:

]]
local items = {
  "3caad2f1-719f-4070-b7f0-887c49c773d3"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>744</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Dragonborn

Item Description:

]]
local items = {
  "8494f6d9-d588-4d18-bb0d-c5a58e911771"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>745</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Elves

Item Description:

]]
local items = {
  "0ec7d956-e65f-4bfa-b677-22f399f81a32"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>746</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Humans_B

Item Description:

]]
local items = {
  "7efbf614-e004-4e64-b39e-c7928e703b8b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>747</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Dwarves_Green

Item Description:

]]
local items = {
  "d19364cf-18f9-4841-919b-1e3f0ba2c58c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>748</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Humans_C

Item Description:

]]
local items = {
  "e1797af7-5459-4db2-99da-5703fa203edb"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>749</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Dragonborn_Bronze

Item Description:

]]
local items = {
  "6afe0665-ef74-44bb-916a-fb00a267b4b9"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>750</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Elves_Purple

Item Description:

]]
local items = {
  "6d076cab-f23a-4a80-89b6-107be7f345bd"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>751</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Incubus

Item Description:

]]
local items = {
  "5fa043bf-0445-49ad-9e82-0df77c639fe2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>752</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Githyanki

Item Description:

]]
local items = {
  "1cb3fb1b-2dfc-446a-9c9b-666eb0de05d6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>753</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Helper

Item Description:

]]
local items = {
  "305718fa-de30-474f-97a8-41ae79b4919e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>754</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Halflings

Item Description:

]]
local items = {
  "78063154-288f-41aa-a99f-e56cbf601129"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>755</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Gnomes

Item Description:

]]
local items = {
  "d692d48f-9a39-4001-8a38-c01e397953dc"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>756</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Gnomes_Blue

Item Description:

]]
local items = {
  "50a2cef0-8e1b-4166-ac15-06f8bde59e29"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>757</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Tieflings

Item Description:

]]
local items = {
  "498c155f-8675-4a55-9cb0-89dd7270469f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>758</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Elves_Blue

Item Description:

]]
local items = {
  "f328179e-f5e1-4fd4-bd41-efad411223e8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>759</ID>
                  <Description>"Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_HalfOrcs_Orange

Item Description:

]]
local items = {
  "7d989a9c-ab69-43e0-8fca-02b13d254ae2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>760</ID>
                  <Description>"Wyll's Underwear"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Underwear_Wyll

Item Description:
Long may these gird the Blade of Frontiers. 
]]
local items = {
  "1930ceec-4a50-43d9-8589-94593c449be4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>761</ID>
              <Description>"VanityBody"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>762</ID>
                  <Description>"ARM_Vanity_Body_Shar"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Shar

Item Description:

]]
local items = {
  "754a0191-b439-47ae-9d9e-ebfdad0e9b39"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>763</ID>
                  <Description>"Absolute Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Cultist

Item Description:
Adorned with the tripartite symbol of the Absolute_ this ensemble of black and green presents the wearer as either a mocker or a devotee of the cult. Or someone who likes the cut and colour. Or someone who is cold.
]]
local items = {
  "ef840839-3516-43b1-823f-103b1e0b04bf"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>764</ID>
                  <Description>"Anarchic Blue Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_D_Blue

Item Description:
There is something of the blue-blooded rebel in this outfit_ of the bandit princess or prince stealing plunder and hearts.
]]
local items = {
  "0004915f-4399-4ae1-beab-85a62c11b674"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>765</ID>
                  <Description>"Anarchic Blue Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_D_Green

Item Description:
There is something of the blue-blooded rebel in this outfit_ of the bandit princess or prince stealing plunder and hearts.
]]
local items = {
  "0004915f-4399-4ae1-beab-85a62c11b674"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>766</ID>
                  <Description>"Anarchic Purple Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_D_Puple

Item Description:
There is something of the purple-peacock rebel in this outfit_ of the bandit princess or prince stealing plunder and hearts.
]]
local items = {
  "05916397-ed55-46e0-bec3-ab6c4b2b1cb4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>767</ID>
                  <Description>"Anarchic White Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_D_White

Item Description:
There is something of the pale-white-toothed rebel in this outfit_ of the bandit princess or prince stealing plunder and hearts.
]]
local items = {
  "0e9c3ca7-070f-43e9-b642-bd0b21f76290"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>768</ID>
                  <Description>"Angelic Scion Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Deva

Item Description:
Golden vambraces and arm rings surmount this divine set.
]]
local items = {
  "62950ae1-b74f-46a6-bfd0-055c93bad651"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>769</ID>
                  <Description>"Backless Extravaganza"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_D

Item Description:
Backless so that people can pat you on the back and proclaim_ 'I say_ lovely outfit.'
]]
local items = {
  "d0b540dd-c778-4573-b0cb-149a0309bfa2"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>770</ID>
                  <Description>"Black Flare Leather Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Leather_Black

Item Description:
A minimalist leather binding get-up that clings to the skin and creaks just the slightest bit when you move.
]]
local items = {
  "5efe9bb8-bffe-4c91-bbd6-bee4d5d0611c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>771</ID>
                  <Description>"Blue Flare Leather Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Leather_Rich_Blue

Item Description:
A minimalist leather binding get-up that clings to the skin and creaks just the slightest bit when you move.
]]
local items = {
  "6f3c80a9-14f8-481d-ab27-5426a00329e1"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>772</ID>
                  <Description>"Bright Flare Leather Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Leather_Bright

Item Description:
A minimalist leather binding get-up that clings to the skin and creaks just the slightest bit when you move.
]]
local items = {
  "ab68a753-921f-4df5-9979-d9663cea078e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>773</ID>
                  <Description>"Chandelier-Style Embroidered Ensemble"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_C

Item Description:
Modelled on the chandeliers in the Waterdavian Sea Ward - aesthetically pleasing and most grand.
]]
local items = {
  "66685917-3cd9-4dc8-a792-319288dacb30"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>774</ID>
                  <Description>"Chocolatier Style Doublet"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Aristocrat_Brown

Item Description:
This lovely ensemble is evocative of the apron of a master chocolatier - and just as scrumptious.
]]
local items = {
  "3fc58d24-9743-4e82-a4bd-ad18eda257cb"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>775</ID>
                  <Description>"Circus Ensemble"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Circus

Item Description:
Designed for fun rather than function.
]]
local items = {
  "76e754a1-9559-4cb7-b11b-045f1b8aada1"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>776</ID>
                  <Description>"City of Brass Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Patriars_Red

Item Description:
Though the name is an exaggeration _the fabled city's heat would burn the fabric black stitch by stitch__ the sheer magnificence of this ensemble's appeal is not.
]]
local items = {
  "c65c5dd5-705c-4103-904c-0835d81bd846"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>777</ID>
                  <Description>"Comfortable Ashmeadow Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Citizen_Black

Item Description:
Stylish without being altogether noteworthy_ though the embroidery is actually very fine in certain lights.
]]
local items = {
  "eff198aa-7040-4893-bde4-b0983c08142c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>778</ID>
                  <Description>"Comfortable Autumnal Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Citizen_Purple

Item Description:
Stylish without being altogether noteworthy_ though the embroidery is actually very fine in certain lights.
]]
local items = {
  "d73c75f6-7fbf-4336-817e-aab883c47406"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>779</ID>
                  <Description>"Comfortable Blue-Red Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Citizen

Item Description:
Stylish without being altogether noteworthy_ though the embroidery is actually very fine in certain lights.
]]
local items = {
  "516d4737-5f69-4083-8bae-3f09e5aab180"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>780</ID>
                  <Description>"Comfortable Red Shirt"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Shirt_Red

Item Description:
As red as campfire flame.
]]
local items = {
  "4866f90d-ee70-43a8-96a4-35511f4b824e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>781</ID>
                  <Description>"Cosy Blue Shirt"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Shirt_Blue

Item Description:
At camp_ under the deep blue sky fading to indigo at the horizon_ this shirt fits right in.
]]
local items = {
  "e03b6708-5865-409d-8855-67aa834c60bd"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>782</ID>
                  <Description>"Delicately Constructed Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_B

Item Description:
Capably crafted_ giving the impression of affirming wealth_
]]
local items = {
  "0469f558-e4f0-4eb5-b4b2-bf00b8e0aa15"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>783</ID>
                  <Description>"Destitute Clothes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Prison_Poor

Item Description:
Lowly and poorly fitting on any physique_ this garb is of the worst quality.
]]
local items = {
  "42c04143-38cb-4112-91de-0d5ed0ca7101"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>784</ID>
                  <Description>"Diamond Blue Doublet"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_F_Blue

Item Description:
Robust_ sleek_ and flattering_ this ensemble presents a very fetching figure for the wearer.
]]
local items = {
  "a6e5ebd6-beb6-4d67-8aeb-254a2b063332"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>785</ID>
                  <Description>"Diamond Pattern Garb"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_F

Item Description:
Diamonds are like the colour black - they simply go with everything.
]]
local items = {
  "c1212df0-3f47-4af7-b98a-164fca31da97"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>786</ID>
                  <Description>"Drow Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Drow

Item Description:
With its harsh_ almost arachnid cut and shape_ this outfit evokes the spiderlike denizens of the Underdark.
]]
local items = {
  "7ab22473-bb9a-49f4-9890-4d3a691331b6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>787</ID>
                  <Description>"Elegant Robe"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_DaisyDress

Item Description:
A draped robe made with lightweight fabric. Made for seduction rather than battle.
]]
local items = {
  "d943c31f-a8c9-49b0-8eba-f120b5075a67"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>788</ID>
                  <Description>"Elegant Robe"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_ElegantRobe

Item Description:
A draped robe made with lightweight fabric. Made for seduction rather than battle.
]]
local items = {
  "2f7aadd5-65ea-4ab6-8c55-88ee584c72df"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>789</ID>
                  <Description>"Elegant Robe"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
UNI_DaisyPlaysuit

Item Description:
A draped robe made with lightweight fabric. Made for seduction rather than battle.
]]
local items = {
  "bf4700bb-f1db-4586-8332-4e3e0c3e0fe0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>790</ID>
                  <Description>"Eminent Emerald Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Patriars_Green

Item Description:
Each stitch not embellished with filigree and gold weave is gorgeous as the polished scales of a green dragon fully grown.
]]
local items = {
  "c2024c47-967b-4d6b-bfb3-978f502d1321"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>791</ID>
                  <Description>"Eminent Obsidian Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Patriars_Black

Item Description:
Black as volcanic glass and just as valuable_ this ensemble would turn the eye of an entire court.
]]
local items = {
  "164ebd0f-432e-4aa6-8589-5dccafc8383e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>792</ID>
                  <Description>"Fastidiously Perfect Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_B1

Item Description:
Nimble fingers designed and created this outfit. 
]]
local items = {
  "a38159ef-a981-4abd-bcdd-58e61558960e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>793</ID>
                  <Description>"Green Flare Leather Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Leather_Rich_Green

Item Description:
A minimalist leather binding get-up that clings to the skin and creaks just the slightest bit when you move.
]]
local items = {
  "cf7e5e2f-d791-4929-b1bc-a7ba35db1687"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>794</ID>
                  <Description>"Leathery Garb"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Leather

Item Description:
So tight... 
]]
local items = {
  "82fa106f-3fb9-4c00-818f-5e5df5deb434"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>795</ID>
                  <Description>"Lionheart Green-Pink Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_E_GreenPink

Item Description:
Robust_ sleek_ and flattering_ this ensemble presents a very fetching figure for the wearer.
]]
local items = {
  "1c6c44c6-4bc5-44f6-b5f6-8d3cc4654134"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>796</ID>
                  <Description>"Lionheart Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_E

Item Description:
Presumably named for a courageous person. Regardless_ a marvellously decadent outfit.
]]
local items = {
  "91bb667d-239b-4d56-9287-c41124736872"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>797</ID>
                  <Description>"Lionheart Teal Outfir"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_E_Teal

Item Description:
Robust_ sleek_ and flattering_ this ensemble presents a very fetching figure for the wearer.
]]
local items = {
  "6cd27edd-fd6b-491b-8263-c01d9dd915aa"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>798</ID>
                  <Description>"Magnificently Realised Ensemble"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Patriars

Item Description:
Some craftsperson of the highest caliber envisioned and created this_ and anyone who wears it shall be the envy of not only their friends_ but their enemies too.
]]
local items = {
  "2e3d2a61-a0ba-495c-80e2-faa452542035"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>799</ID>
                  <Description>"Mellow Black Shirt"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Shirt_Black

Item Description:
Dark and inexpensive_ yet with a very charming cosiness once worn.
]]
local items = {
  "67f1d175-a03b-4cb0-bf3c-c7304b147aca"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>800</ID>
                  <Description>"Mesmerising Circus Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Circus_B

Item Description:
A burst of fun and colour_ this outfit completely avoids the general sensation of damp misery inherent to the standard circus clown.
]]
local items = {
  "c03c2a3c-9e84-4042-8267-189ccb2af715"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>801</ID>
                  <Description>"Opalescent Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Patriars_Blue

Item Description:
When held out in the sun_ the sleeves almost glitter_ so richly woven is the fabric of this outfit.
]]
local items = {
  "f577a9be-8793-48da-a03d-e66d993dc4e7"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>802</ID>
                  <Description>"Prison Shirt"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Prison

Item Description:
Tattered and infested with crawling bedbugs_ this shirt was worn by some interred prisoner. 
]]
local items = {
  "a8db945d-ee7a-450a-a8a8-cbcdfd466d85"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>803</ID>
                  <Description>"Raffish Bronze-Red Outift"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_G_Red

Item Description:
Raffish _meaning sly and disreputable in an alluring way_ comes from Raffish Buck Daederum_ whose fashion this ensemble mimicks closely.
]]
local items = {
  "220d0f79-5016-407d-aaa6-5fb4208dcc56"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>804</ID>
                  <Description>"Raffish Chestnut Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_G_Brown

Item Description:
Raffish _meaning sly and disreputable in an alluring way_ comes from Raffish Buck Daederum_ whose fashion this ensemble mimicks closely.
]]
local items = {
  "22a80754-79f2-4b6a-9de4-3e619a80d5d4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>805</ID>
                  <Description>"Raffish Garb"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_G

Item Description:
Something slightly perilous and fun imbues this design of garments.
]]
local items = {
  "c9588fa5-3644-4c2d-8b8b-f0d4cdb3869e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>806</ID>
                  <Description>"Raffish Metallic-Shaded Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_G_Bright

Item Description:
Raffish _meaning sly and disreputable in an alluring way_ comes from Raffish Buck Daederum_ whose fashion this ensemble mimicks closely.
]]
local items = {
  "e6497a0d-94e6-41bd-8bbd-91885bf56313"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>807</ID>
                  <Description>"Raffish Midnight Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_G_Black

Item Description:
Raffish _meaning sly and disreputable in an alluring way_ comes from Raffish Buck Daederum_ whose fashion this ensemble mimicks closely.
]]
local items = {
  "4880fb87-77b7-4931-a586-6909c4a5752a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>808</ID>
                  <Description>"Road-Dust Gray Clothes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Refugee_Gray

Item Description:
Gray with accumulated road dust as much as dye_ these clothes are nothing special.
]]
local items = {
  "47e4e37b-d3fa-4e23-8d53-203804cd3b6e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>809</ID>
                  <Description>"Rustic Dark Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Refugee

Item Description:
An ensemble very fitting for a relaxing sit by the campfire_ whereupon stories are exchanged_ generally over hipflasks.
]]
local items = {
  "c9d62e5b-2734-42cf-9069-6953b8060df0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>810</ID>
                  <Description>"Scruffy Vagabond Clothes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Refugee_Green

Item Description:
Patchwork and threadbare_ these clothes practically dangle off their wearer.
]]
local items = {
  "dfe7cf67-64b5-4b91-9ae2-50aea87493f9"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>811</ID>
                  <Description>"Snug Purple Shirt"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Shirt_Purple

Item Description:
Purple as tasty plums shared by a camp tent.
]]
local items = {
  "8725508f-e47e-488f-8187-3d15ebb9c8e9"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>812</ID>
                  <Description>"Snugglesome Green Shirt"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Shirt_Green

Item Description:
Soft and green and ideal for a good sleep under the stars.
]]
local items = {
  "39d87577-6f4f-438e-a5b7-abf387a6f0f1"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>813</ID>
                  <Description>"Solemnity Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_G2

Item Description:
Austere and no-nonsense_ this outfit betoken's largesse and poise.
]]
local items = {
  "9a8a79fe-a9a2-466d-af06-f3973fe5b16b"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>814</ID>
                  <Description>"Solemnity Outfit in Blue"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_G2_Blue

Item Description:
One of master Figaro's collection pieces_ this outfit maintains the poise and grace of the wearer. Honestly_ it elevates it considerably. Bad poise becomes competent poise. Competent becomes strong. Strong becomes spiffing.
]]
local items = {
  "b3185288-bcb3-475d-aac1-7c34fa88898e"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>815</ID>
                  <Description>"Solemnity Outfit in Gold Medallions"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_G2_White

Item Description:
One of master Figaro's collection pieces_ this outfit maintains the poise and grace of the wearer. Honestly_ it elevates it considerably. Bad poise becomes competent poise. Competent becomes strong. Strong becomes spiffing.
]]
local items = {
  "168a676a-af4c-497c-8b98-76a0f6d20462"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>816</ID>
                  <Description>"Solemnity Outfit in Green"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_G2_Green

Item Description:
One of master Figaro's collection pieces_ this outfit maintains the poise and grace of the wearer. Honestly_ it elevates it considerably. Bad poise becomes competent poise. Competent becomes strong. Strong becomes spiffing.
]]
local items = {
  "a7b3f166-f909-4103-8c2c-b8559da749b5"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>817</ID>
                  <Description>"Solemnity Outfit in Purple"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_G2_Purple

Item Description:
One of master Figaro's collection pieces_ this outfit maintains the poise and grace of the wearer. Honestly_ it elevates it considerably. Bad poise becomes competent poise. Competent becomes strong. Strong becomes spiffing.
]]
local items = {
  "0650531b-3a2f-499e-bf4e-58488a14636f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>818</ID>
                  <Description>"Splendid Beige Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_B1_Beige

Item Description:
Tailoired with immaculate skill_ this outfit makes you feel like someone who has elevated beige. Beige is an atrocious colour_ yet here it is_ very impressive and pleasing on the eye.
]]
local items = {
  "0d2cf317-1e3d-492b-8755-00f33cd3f24f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>819</ID>
                  <Description>"Splendid Blue Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_C_Blue

Item Description:
This outfit makes you feel like a piece of the summer sky transmuted into silk.
]]
local items = {
  "5daa7ba8-8e8d-4e68-9f5a-3c9f89c32c89"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>820</ID>
                  <Description>"Splendid Gold Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_Gold

Item Description:
This outfit makes the wearer feel like a ray of sunlight swanning around camp.
]]
local items = {
  "12c2f3d2-a4a6-47e6-a7aa-dfcced16add6"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>821</ID>
                  <Description>"Splendid Green Outfit "</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_Green

Item Description:
This outfit makes the wearer feel like a brilliant green turaco bird.
]]
local items = {
  "3c8eca7a-8c7c-40a5-be4c-64455630f08f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>822</ID>
                  <Description>"Splendid Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich

Item Description:
Keenly administered to by the sort of fingers that were born stitching_ crocheting_ and generally making nice clothes.
]]
local items = {
  "9c1fedb8-4262-4426-84cc-8ad8dc01be97"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>823</ID>
                  <Description>"Splendid Purple Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_B_Purple

Item Description:
Tailoired with immaculate skill_ this outfit makes you feel like a Luskan noble walking their manor instead of a wilderland camp.
]]
local items = {
  "efb49491-ca1d-4bab-a7a7-815f8d298ee0"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>824</ID>
                  <Description>"Splendid Red Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_C_Red

Item Description:
This outfit makes you feel like a red dragon's fiery breath_ only the deadliness lies in sheer aesthetic beauty.
]]
local items = {
  "6909f7fa-6da9-40ea-898e-91cbaac9bf5c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>825</ID>
                  <Description>"Splendid Teal Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Rich_Teal

Item Description:
This outfit makes the wearer feel like a bouquet of puya flowers_ except with legs_ and great style.
]]
local items = {
  "f4064489-adce-4b58-b664-311c6d476880"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>826</ID>
                  <Description>"Spring Slimfit Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Citizen_B

Item Description:
Accentuating all features_ turning stockiness into slenderness_ turning a beer-belly into... well_ an ale gut_ but even so_ A win overall_
]]
local items = {
  "52353c73-2c58-4dd7-8370-adb266a17fab"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>827</ID>
                  <Description>"Strapped Choker Leather Ensemble"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Leather_Rich

Item Description:
So tight... 
]]
local items = {
  "a89389a2-37c5-4fcd-b392-f856451a2325"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>828</ID>
                  <Description>"Swarthy Wayfarer in Blue"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Citizen_C_Blue

Item Description:
A most adventuresome and spring-heeled variety of ensemble_ perfect for journey-makers and risk-takers.
]]
local items = {
  "58f9af08-f4ac-412d-ba38-f8b1d7db9e5f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>829</ID>
                  <Description>"Swarthy Wayfarer in Cream"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Citizen_C

Item Description:
A most adventuresome and spring-heeled variety of ensemble_ perfect for journey-makers and risk-takers.
]]
local items = {
  "d9caff77-293c-4e8d-a721-3e17908490f8"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>830</ID>
                  <Description>"Swarthy Wayfarer in Green"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Citizen_C_Green

Item Description:
A most adventuresome and spring-heeled variety of ensemble_ perfect for journey-makers and risk-takers.
]]
local items = {
  "12c9ad5c-040f-44a5-ac30-d8ed4505d651"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>831</ID>
                  <Description>"Swarthy Wayfarer in Red"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Citizen_C_Red

Item Description:
A most adventuresome and spring-heeled variety of ensemble_ perfect for journey-makers and risk-takers.
]]
local items = {
  "8b9ee0cf-35a6-4439-9402-d5f829645e2a"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>832</ID>
                  <Description>"Sweetly Tailored Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Aristocrat

Item Description:
Fashioned at the hands of someone deeply skilled... or_ at the very least_ someone who was having a good day at the loom and tailor shop.
]]
local items = {
  "3dc4b718-0504-43e2-a88f-0d6736bf6b25"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>833</ID>
                  <Description>"Teal Slimfit Outfit"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Citizen_B_Teal

Item Description:
Accentuating all features_ turning stockiness into slenderness_ turning a beer-belly into... well_ an ale gut_ but even so_ A win overall_
]]
local items = {
  "2db4d06e-db75-4bcf-97a2-de4dff6939af"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>834</ID>
                  <Description>"Umber Trousers"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Pants

Item Description:

]]
local items = {
  "a5cc728e-6b8a-4458-86cd-7492f7c4a266"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>835</ID>
                  <Description>"Winter Gala Doublet"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Body_Aristocrat_White

Item Description:
Crisply white with snatches of blue_ this garment would not be out of place at a winter festival gala celebrating the wearer's sense of style.
]]
local items = {
  "af6ffb20-cbdc-410c-9a12-6c217eb8aa9c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>836</ID>
              <Description>"VanityBoots"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>837</ID>
                  <Description>"Breezy Sandals"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Sandals_B_Red

Item Description:
Strapped and lined in an either piscine or arboreal motif_ these sandals are perfect for a warm morning stroll.
]]
local items = {
  "697a6021-ff43-43d5-b9c9-a432bb3ea59d"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>838</ID>
                  <Description>"Casual Sandals"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Sandals_B

Item Description:
Strapped and lined in an either piscine or arboreal motif_ these sandals are perfect for a warm morning stroll.
]]
local items = {
  "ba0fbaf7-324f-4f79-a124-66ba185faef9"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>839</ID>
                  <Description>"Celestial Sandals"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Deva_Shoes

Item Description:
Not only do these sandals allow your feet to breathe on warm summer-scented evenings and leaf-crunchy autumn afternoons_ but come the turning of clocks toward colder seasons_ the sandal straps emit a faintly magical heat as cosy as any pair of wooly socks.
]]
local items = {
  "db2f2945-debc-4b18-b4f5-6456a11ecddb"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>840</ID>
                  <Description>"Delicate Shoes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Shoes_E

Item Description:
Patterned with twists of gold_ lilac and sapphire_ these delicate shoes are very reasonable for dancing_ romancing_ perhaps even prancing.
]]
local items = {
  "5272e57c-7ea0-4bda-aac5-449304f4f011"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>841</ID>
                  <Description>"Elfin Woodsoles"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Shoes_B

Item Description:
These shoes make light_ almost imperceptible clicking noises as they walk on stone_ the wood nice and sculpted.
]]
local items = {
  "d8bc3625-f1d8-4ad3-8cfd-23b6b496cf36"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>842</ID>
                  <Description>"Gladiatorial Sandals"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Sandals_C

Item Description:
Worn by warriors upon the bloodiest sands.
]]
local items = {
  "aa1b4d17-528f-4934-b350-6b17f389b9dd"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>843</ID>
                  <Description>"Meshtoe Sandals"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Sandals

Item Description:
A mesh of webbed material protects the toes from errant spiders.
]]
local items = {
  "1856414d-8a47-4e41-8aee-55991b18f494"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>844</ID>
                  <Description>"Pointed-Toe Shoes"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Shoes_F

Item Description:
The height of modern Sword Coastian fashion_ provided you like being targetted by muggers and thugs and other interesting friendly people.
]]
local items = {
  "16a8aee6-568c-458e-b006-cb3344cac4fb"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>845</ID>
                  <Description>"Pristine Meshtoe Sandals"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Sandals_Blue

Item Description:
A mesh of webbed material protects the toes from errant spiders - these seem brand new_ and never worn.
]]
local items = {
  "2290f957-2e17-4ceb-870f-bd53f81f866c"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>846</ID>
                  <Description>"Reliably Built Boots"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Vanity_Shoes_Circus

Item Description:
Made of tough_ well-worn leather_ these boots have survived years of use_ and can survive many more.
]]
local items = {
  "b61e283d-eba5-4fd2-86a3-21e490ad16bf"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>847</ID>
                  <Description>"Slashstrip Sandals"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Sandals_A1

Item Description:
Slashes of leather gird the feet. A bright silvery button gleams.
]]
local items = {
  "37ceb8fb-7d41-4373-b31b-6fcc602955b4"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>848</ID>
                  <Description>"Tanner's Delight"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Shoes_C

Item Description:
The tanners had an excellent time producing this leather - they actually got to use real animal flesh. Usually they work with much grosser stuff.
]]
local items = {
  "c6db137e-b61c-418f-9785-b0beb6e6de0f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>849</ID>
                  <Description>"Worn Slashstrip Sandals"</Description>
                  <Color></Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

--[[
Item Name:
ARM_Camp_Sandals_A1_Black

Item Description:
Slashes of leather gird the feet. A bright silvery button gleams - this pair have seen better days.
]]
local items = {
  "03855492-12d7-42bf-866f-8aeb8eae176f"
}
local quantity = 1

local cmdCall = getAddress("cmdCall")
local cmdArgs = getAddress("cmdArgs")
local cmdStr1 = getAddress("cmdStr1")
local cmdStr2 = getAddress("cmdStr2")

PrepareCall("GetHostCharacter")
executeCodeEx(0, nil, cmdCall)

local player = readPointer(cmdArgs + 0x08)
player = readString(player, 256, false)
writeString(cmdStr1, player)
writeBytes(cmdStr1 + #player, 0)

for i = 1, #items do
  local item = items[i]
  writeString(cmdStr2, item)
  writeBytes(cmdStr2 + #item, 0)

  PrepareCall("TemplateAddTo")
  writePointer(cmdArgs + 0x08, cmdStr2) -- item
  writePointer(cmdArgs + 0x18, cmdStr1) -- player
  writeQword(cmdArgs + 0x28, quantity)  -- quantity
  writeQword(cmdArgs + 0x38, 0)
  writeQword(cmdArgs + 0x48, 0)
  executeCodeEx(0, nil, cmdCall)
end

{$asm}
assert(true)
[DISABLE]
                  </AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>playerCharactersPtr</Name>
      <Address>1D4526F0000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"bg3.exe"+25C0F20</Address>
      <Comment>Zanzer</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
